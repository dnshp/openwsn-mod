   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"gpio.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	GPIOGetIntNumber
  20              		.thumb
  21              		.thumb_func
  23              	GPIOGetIntNumber:
  24              	.LFB0:
  25              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Filename:       gpio.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Revised:        $Date: 2013-04-29 09:36:44 +0200 (Mon, 29 Apr 2013) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Revision:       $Revision: 9922 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Description:    Driver for the GPIO controller.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \addtogroup gpio_api
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include <headers/hw_gpio.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include <headers/hw_ints.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include <headers/hw_memmap.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include <headers/hw_sys_ctrl.h>
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include "debug.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include "gpio.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include "interrupt.h"
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include "ioc.h"
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \internal
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Checks a GPIO base address
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function determines if a GPIO port base address is valid.
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns \b true if the base address is valid and \b false
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! otherwise.
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #ifdef ENABLE_ASSERT
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** static bool
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOBaseValid(uint32_t ui32Port)
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return((ui32Port == GPIO_A_BASE) || (ui32Port == GPIO_B_BASE) ||
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32Port == GPIO_C_BASE) || (ui32Port == GPIO_D_BASE));
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #endif
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \internal
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets the GPIO interrupt number
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Given a GPIO base address, returns the corresponding interrupt number.
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns a GPIO interrupt number, or 0 if \e ui32Port is invalid.
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOGetIntNumber(uint32_t ui32Port)
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
  26              		.loc 1 92 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 85B0     		sub	sp, sp, #20
  35              		.cfi_def_cfa_offset 24
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32Int;
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Determine the GPIO interrupt number for the given module.
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     switch(ui32Port)
  39              		.loc 1 103 0
  40 0008 7B68     		ldr	r3, [r7, #4]
  41 000a 4FF42042 		mov	r2, #40960
  42 000e C4F20D02 		movt	r2, 16397
  43 0012 9342     		cmp	r3, r2
  44 0014 1CD0     		beq	.L3
  45 0016 4FF42042 		mov	r2, #40960
  46 001a C4F20D02 		movt	r2, 16397
  47 001e 9342     		cmp	r3, r2
  48 0020 06D8     		bhi	.L4
  49 0022 4FF41042 		mov	r2, #36864
  50 0026 C4F20D02 		movt	r2, 16397
  51 002a 9342     		cmp	r3, r2
  52 002c 0DD0     		beq	.L5
  53 002e 18E0     		b	.L2
  54              	.L4:
  55 0030 4FF43042 		mov	r2, #45056
  56 0034 C4F20D02 		movt	r2, 16397
  57 0038 9342     		cmp	r3, r2
  58 003a 0CD0     		beq	.L6
  59 003c 4FF44042 		mov	r2, #49152
  60 0040 C4F20D02 		movt	r2, 16397
  61 0044 9342     		cmp	r3, r2
  62 0046 09D0     		beq	.L7
  63 0048 0BE0     		b	.L2
  64              	.L5:
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     case GPIO_A_BASE:
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32Int = INT_GPIOA;
  65              		.loc 1 107 0
  66 004a 1023     		movs	r3, #16
  67 004c FB60     		str	r3, [r7, #12]
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         break;
  68              		.loc 1 108 0
  69 004e 0AE0     		b	.L8
  70              	.L3:
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     case GPIO_B_BASE:
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32Int = INT_GPIOB;
  71              		.loc 1 113 0
  72 0050 1123     		movs	r3, #17
  73 0052 FB60     		str	r3, [r7, #12]
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         break;
  74              		.loc 1 114 0
  75 0054 07E0     		b	.L8
  76              	.L6:
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     case GPIO_C_BASE:
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32Int = INT_GPIOC;
  77              		.loc 1 119 0
  78 0056 1223     		movs	r3, #18
  79 0058 FB60     		str	r3, [r7, #12]
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         break;
  80              		.loc 1 120 0
  81 005a 04E0     		b	.L8
  82              	.L7:
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     case GPIO_D_BASE:
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32Int = INT_GPIOD;
  83              		.loc 1 125 0
  84 005c 1323     		movs	r3, #19
  85 005e FB60     		str	r3, [r7, #12]
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         break;
  86              		.loc 1 126 0
  87 0060 01E0     		b	.L8
  88              	.L2:
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     default:
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(0);
  89              		.loc 1 131 0
  90 0062 0023     		movs	r3, #0
  91 0064 00E0     		b	.L9
  92              	.L8:
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return GPIO interrupt number.
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(ui32Int);
  93              		.loc 1 138 0
  94 0066 FB68     		ldr	r3, [r7, #12]
  95              	.L9:
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
  96              		.loc 1 139 0
  97 0068 1846     		mov	r0, r3
  98 006a 1437     		adds	r7, r7, #20
  99 006c BD46     		mov	sp, r7
 100              		@ sp needed
 101 006e 5DF8047B 		ldr	r7, [sp], #4
 102 0072 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE0:
 106              		.align	2
 107              		.global	GPIODirModeSet
 108              		.thumb
 109              		.thumb_func
 111              	GPIODirModeSet:
 112              	.LFB1:
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Sets the direction and mode of the specified pin(s)
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32PinIO is the pin direction and/or mode.
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function sets the specified pin(s) on the selected GPIO port
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! as either an input or output under software control or sets the
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin to be under hardware control.
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The parameter \e ui32PinIO is an enumerated data type that can be one of
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_DIR_MODE_IN
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_DIR_MODE_OUT
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_DIR_MODE_HW
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! where \b GPIO_DIR_MODE_IN specifies that the pin will be programmed as
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! a software controlled input, \b GPIO_DIR_MODE_OUT specifies that the pin
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! will be programmed as a software controlled output, and
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_DIR_MODE_HW specifies that the pin will be placed under
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! hardware control.
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIODirModeSet(uint32_t ui32Port, uint8_t ui8Pins,
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                uint32_t ui32PinIO)
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 113              		.loc 1 176 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 16
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118 0074 80B4     		push	{r7}
 119              		.cfi_def_cfa_offset 4
 120              		.cfi_offset 7, -4
 121 0076 85B0     		sub	sp, sp, #20
 122              		.cfi_def_cfa_offset 24
 123 0078 00AF     		add	r7, sp, #0
 124              		.cfi_def_cfa_register 7
 125 007a F860     		str	r0, [r7, #12]
 126 007c 0B46     		mov	r3, r1
 127 007e 7A60     		str	r2, [r7, #4]
 128 0080 FB72     		strb	r3, [r7, #11]
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32PinIO == GPIO_DIR_MODE_IN) || (ui32PinIO == GPIO_DIR_MODE_OUT) ||
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32PinIO == GPIO_DIR_MODE_HW));
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pin direction and mode.
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_DIR)   = ((ui32PinIO & GPIO_DIR_MODE_OUT) ?
 129              		.loc 1 188 0
 130 0082 FB68     		ldr	r3, [r7, #12]
 131 0084 03F58063 		add	r3, r3, #1024
 132 0088 1A46     		mov	r2, r3
 133 008a 7B68     		ldr	r3, [r7, #4]
 134 008c 03F00103 		and	r3, r3, #1
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 135              		.loc 1 189 0
 136 0090 002B     		cmp	r3, #0
 137 0092 06D0     		beq	.L11
 138              		.loc 1 189 0 is_stmt 0 discriminator 1
 139 0094 FB68     		ldr	r3, [r7, #12]
 140 0096 03F58063 		add	r3, r3, #1024
 141 009a 1968     		ldr	r1, [r3]
 142 009c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 143 009e 0B43     		orrs	r3, r3, r1
 144 00a0 06E0     		b	.L12
 145              	.L11:
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) & ~(ui8Pins)));
 146              		.loc 1 190 0 is_stmt 1 discriminator 2
 147 00a2 FB68     		ldr	r3, [r7, #12]
 148 00a4 03F58063 		add	r3, r3, #1024
 149 00a8 1968     		ldr	r1, [r3]
 150 00aa FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 151 00ac DB43     		mvns	r3, r3
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 152              		.loc 1 189 0 discriminator 2
 153 00ae 0B40     		ands	r3, r3, r1
 154              	.L12:
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 155              		.loc 1 188 0
 156 00b0 1360     		str	r3, [r2]
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_AFSEL) = ((ui32PinIO & GPIO_DIR_MODE_HW) ?
 157              		.loc 1 191 0
 158 00b2 FB68     		ldr	r3, [r7, #12]
 159 00b4 03F58463 		add	r3, r3, #1056
 160 00b8 1A46     		mov	r2, r3
 161 00ba 7B68     		ldr	r3, [r7, #4]
 162 00bc 03F00203 		and	r3, r3, #2
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) | ui8Pins) :
 163              		.loc 1 192 0
 164 00c0 002B     		cmp	r3, #0
 165 00c2 06D0     		beq	.L13
 166              		.loc 1 192 0 is_stmt 0 discriminator 1
 167 00c4 FB68     		ldr	r3, [r7, #12]
 168 00c6 03F58463 		add	r3, r3, #1056
 169 00ca 1968     		ldr	r1, [r3]
 170 00cc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 171 00ce 0B43     		orrs	r3, r3, r1
 172 00d0 06E0     		b	.L14
 173              	.L13:
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) & ~(ui8Pins)));
 174              		.loc 1 193 0 is_stmt 1 discriminator 2
 175 00d2 FB68     		ldr	r3, [r7, #12]
 176 00d4 03F58463 		add	r3, r3, #1056
 177 00d8 1968     		ldr	r1, [r3]
 178 00da FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 179 00dc DB43     		mvns	r3, r3
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) | ui8Pins) :
 180              		.loc 1 192 0 discriminator 2
 181 00de 0B40     		ands	r3, r3, r1
 182              	.L14:
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_AFSEL) = ((ui32PinIO & GPIO_DIR_MODE_HW) ?
 183              		.loc 1 191 0
 184 00e0 1360     		str	r3, [r2]
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 185              		.loc 1 194 0
 186 00e2 1437     		adds	r7, r7, #20
 187 00e4 BD46     		mov	sp, r7
 188              		@ sp needed
 189 00e6 5DF8047B 		ldr	r7, [sp], #4
 190 00ea 7047     		bx	lr
 191              		.cfi_endproc
 192              	.LFE1:
 194              		.align	2
 195              		.global	GPIODirModeGet
 196              		.thumb
 197              		.thumb_func
 199              	GPIODirModeGet:
 200              	.LFB2:
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets the direction and mode of a pin
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pin is the pin number.
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function gets the direction and control mode for a specified pin on
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the selected GPIO port.  The pin can be configured as either an input or
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! output under software control, or it can be under hardware control.  The
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! type of control and direction are returned as an enumerated data type.
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns one of the enumerated data types described for
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIODirModeSet().
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIODirModeGet(uint32_t ui32Port, uint8_t ui8Pin)
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 201              		.loc 1 214 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 16
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206 00ec 80B4     		push	{r7}
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 7, -4
 209 00ee 85B0     		sub	sp, sp, #20
 210              		.cfi_def_cfa_offset 24
 211 00f0 00AF     		add	r7, sp, #0
 212              		.cfi_def_cfa_register 7
 213 00f2 7860     		str	r0, [r7, #4]
 214 00f4 0B46     		mov	r3, r1
 215 00f6 FB70     		strb	r3, [r7, #3]
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32Dir;
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32AFSEL;
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(ui8Pin < 8);
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Convert from a pin number to a bit position.
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui8Pin = 1 << ui8Pin;
 216              		.loc 1 227 0
 217 00f8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 218 00fa 0122     		movs	r2, #1
 219 00fc 02FA03F3 		lsl	r3, r2, r3
 220 0100 FB70     		strb	r3, [r7, #3]
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the pin direction and mode.
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32Dir   = HWREG(ui32Port + GPIO_O_DIR);
 221              		.loc 1 232 0
 222 0102 7B68     		ldr	r3, [r7, #4]
 223 0104 03F58063 		add	r3, r3, #1024
 224 0108 1B68     		ldr	r3, [r3]
 225 010a FB60     		str	r3, [r7, #12]
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32AFSEL = HWREG(ui32Port + GPIO_O_AFSEL);
 226              		.loc 1 233 0
 227 010c 7B68     		ldr	r3, [r7, #4]
 228 010e 03F58463 		add	r3, r3, #1056
 229 0112 1B68     		ldr	r3, [r3]
 230 0114 BB60     		str	r3, [r7, #8]
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(((ui32Dir & ui8Pin) ? GPIO_DIR_MODE_OUT : GPIO_DIR_MODE_IN) |
 231              		.loc 1 234 0
 232 0116 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 233 0118 FB68     		ldr	r3, [r7, #12]
 234 011a 1340     		ands	r3, r3, r2
 235 011c 002B     		cmp	r3, #0
 236 011e 0CBF     		ite	eq
 237 0120 0023     		moveq	r3, #0
 238 0122 0123     		movne	r3, #1
 239 0124 DBB2     		uxtb	r3, r3
 240 0126 1A46     		mov	r2, r3
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            ((ui32AFSEL & ui8Pin) ? GPIO_DIR_MODE_HW : GPIO_DIR_MODE_IN));
 241              		.loc 1 235 0
 242 0128 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 243 012a BB68     		ldr	r3, [r7, #8]
 244 012c 0B40     		ands	r3, r3, r1
 245 012e 002B     		cmp	r3, #0
 246 0130 01D0     		beq	.L16
 247              		.loc 1 235 0 is_stmt 0 discriminator 1
 248 0132 0223     		movs	r3, #2
 249 0134 00E0     		b	.L17
 250              	.L16:
 251              		.loc 1 235 0 discriminator 2
 252 0136 0023     		movs	r3, #0
 253              	.L17:
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(((ui32Dir & ui8Pin) ? GPIO_DIR_MODE_OUT : GPIO_DIR_MODE_IN) |
 254              		.loc 1 234 0 is_stmt 1
 255 0138 1343     		orrs	r3, r3, r2
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 256              		.loc 1 236 0
 257 013a 1846     		mov	r0, r3
 258 013c 1437     		adds	r7, r7, #20
 259 013e BD46     		mov	sp, r7
 260              		@ sp needed
 261 0140 5DF8047B 		ldr	r7, [sp], #4
 262 0144 7047     		bx	lr
 263              		.cfi_endproc
 264              	.LFE2:
 266 0146 00BF     		.align	2
 267              		.global	GPIOIntTypeSet
 268              		.thumb
 269              		.thumb_func
 271              	GPIOIntTypeSet:
 272              	.LFB3:
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Sets the interrupt type for the specified pin(s)
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32IntType specifies the type of interrupt trigger mechanism.
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function sets up the various interrupt trigger mechanisms for the
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! specified pin(s) on the selected GPIO port.
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The parameter \e ui32IntType is an enumerated data type that can be one of
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_FALLING_EDGE
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_RISING_EDGE
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_BOTH_EDGES
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_LOW_LEVEL
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_HIGH_LEVEL
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! where the different values describe the interrupt detection mechanism
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! (edge or level) and the particular triggering event (falling, rising,
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! or both edges for edge detect, low or high for level detect).
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note To avoid any spurious interrupts, the user must
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! ensure that the GPIO inputs remain stable for the duration of
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! this function.
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                uint32_t ui32IntType)
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 273              		.loc 1 276 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 16
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278 0148 80B4     		push	{r7}
 279              		.cfi_def_cfa_offset 4
 280              		.cfi_offset 7, -4
 281 014a 85B0     		sub	sp, sp, #20
 282              		.cfi_def_cfa_offset 24
 283 014c 00AF     		add	r7, sp, #0
 284              		.cfi_def_cfa_register 7
 285 014e F860     		str	r0, [r7, #12]
 286 0150 0B46     		mov	r3, r1
 287 0152 7A60     		str	r2, [r7, #4]
 288 0154 FB72     		strb	r3, [r7, #11]
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32IntType == GPIO_FALLING_EDGE) ||
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32IntType == GPIO_RISING_EDGE) || (ui32IntType == GPIO_BOTH_EDGES) ||
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32IntType == GPIO_LOW_LEVEL)  || (ui32IntType == GPIO_HIGH_LEVEL));
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pin interrupt type.
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IBE) = ((ui32IntType & 1) ?
 289              		.loc 1 289 0
 290 0156 FB68     		ldr	r3, [r7, #12]
 291 0158 03F58163 		add	r3, r3, #1032
 292 015c 1A46     		mov	r2, r3
 293 015e 7B68     		ldr	r3, [r7, #4]
 294 0160 03F00103 		and	r3, r3, #1
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 295              		.loc 1 290 0
 296 0164 002B     		cmp	r3, #0
 297 0166 06D0     		beq	.L20
 298              		.loc 1 290 0 is_stmt 0 discriminator 1
 299 0168 FB68     		ldr	r3, [r7, #12]
 300 016a 03F58163 		add	r3, r3, #1032
 301 016e 1968     		ldr	r1, [r3]
 302 0170 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 303 0172 0B43     		orrs	r3, r3, r1
 304 0174 06E0     		b	.L21
 305              	.L20:
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) & ~(ui8Pins)));
 306              		.loc 1 291 0 is_stmt 1 discriminator 2
 307 0176 FB68     		ldr	r3, [r7, #12]
 308 0178 03F58163 		add	r3, r3, #1032
 309 017c 1968     		ldr	r1, [r3]
 310 017e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 311 0180 DB43     		mvns	r3, r3
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 312              		.loc 1 290 0 discriminator 2
 313 0182 0B40     		ands	r3, r3, r1
 314              	.L21:
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 315              		.loc 1 289 0
 316 0184 1360     		str	r3, [r2]
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IS) = ((ui32IntType & 2) ?
 317              		.loc 1 292 0
 318 0186 FB68     		ldr	r3, [r7, #12]
 319 0188 03F20443 		addw	r3, r3, #1028
 320 018c 1A46     		mov	r2, r3
 321 018e 7B68     		ldr	r3, [r7, #4]
 322 0190 03F00203 		and	r3, r3, #2
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) | ui8Pins) :
 323              		.loc 1 293 0
 324 0194 002B     		cmp	r3, #0
 325 0196 06D0     		beq	.L22
 326              		.loc 1 293 0 is_stmt 0 discriminator 1
 327 0198 FB68     		ldr	r3, [r7, #12]
 328 019a 03F20443 		addw	r3, r3, #1028
 329 019e 1968     		ldr	r1, [r3]
 330 01a0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 331 01a2 0B43     		orrs	r3, r3, r1
 332 01a4 06E0     		b	.L23
 333              	.L22:
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) & ~(ui8Pins)));
 334              		.loc 1 294 0 is_stmt 1 discriminator 2
 335 01a6 FB68     		ldr	r3, [r7, #12]
 336 01a8 03F20443 		addw	r3, r3, #1028
 337 01ac 1968     		ldr	r1, [r3]
 338 01ae FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 339 01b0 DB43     		mvns	r3, r3
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) | ui8Pins) :
 340              		.loc 1 293 0 discriminator 2
 341 01b2 0B40     		ands	r3, r3, r1
 342              	.L23:
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IS) = ((ui32IntType & 2) ?
 343              		.loc 1 292 0
 344 01b4 1360     		str	r3, [r2]
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IEV) = ((ui32IntType & 4) ?
 345              		.loc 1 295 0
 346 01b6 FB68     		ldr	r3, [r7, #12]
 347 01b8 03F20C43 		addw	r3, r3, #1036
 348 01bc 1A46     		mov	r2, r3
 349 01be 7B68     		ldr	r3, [r7, #4]
 350 01c0 03F00403 		and	r3, r3, #4
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) | ui8Pins) :
 351              		.loc 1 296 0
 352 01c4 002B     		cmp	r3, #0
 353 01c6 06D0     		beq	.L24
 354              		.loc 1 296 0 is_stmt 0 discriminator 1
 355 01c8 FB68     		ldr	r3, [r7, #12]
 356 01ca 03F20C43 		addw	r3, r3, #1036
 357 01ce 1968     		ldr	r1, [r3]
 358 01d0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 359 01d2 0B43     		orrs	r3, r3, r1
 360 01d4 06E0     		b	.L25
 361              	.L24:
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) & ~(ui8Pins)));
 362              		.loc 1 297 0 is_stmt 1 discriminator 2
 363 01d6 FB68     		ldr	r3, [r7, #12]
 364 01d8 03F20C43 		addw	r3, r3, #1036
 365 01dc 1968     		ldr	r1, [r3]
 366 01de FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 367 01e0 DB43     		mvns	r3, r3
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) | ui8Pins) :
 368              		.loc 1 296 0 discriminator 2
 369 01e2 0B40     		ands	r3, r3, r1
 370              	.L25:
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IEV) = ((ui32IntType & 4) ?
 371              		.loc 1 295 0
 372 01e4 1360     		str	r3, [r2]
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 373              		.loc 1 298 0
 374 01e6 1437     		adds	r7, r7, #20
 375 01e8 BD46     		mov	sp, r7
 376              		@ sp needed
 377 01ea 5DF8047B 		ldr	r7, [sp], #4
 378 01ee 7047     		bx	lr
 379              		.cfi_endproc
 380              	.LFE3:
 382              		.align	2
 383              		.global	GPIOIntTypeGet
 384              		.thumb
 385              		.thumb_func
 387              	GPIOIntTypeGet:
 388              	.LFB4:
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets the interrupt type for a pin
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pin is the pin number.
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function gets the interrupt type for a specified pin on the selected
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port.  The pin can be configured as a falling edge, rising edge, or
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! both edge detected interrupt, or can be configured as a low level or
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! high level detected interrupt.  The type of interrupt detection mechanism
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! is returned as an enumerated data type.
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns one of the enumerated data types described for
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIOIntTypeSet().
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin)
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 389              		.loc 1 319 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 24
 392              		@ frame_needed = 1, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394 01f0 80B4     		push	{r7}
 395              		.cfi_def_cfa_offset 4
 396              		.cfi_offset 7, -4
 397 01f2 87B0     		sub	sp, sp, #28
 398              		.cfi_def_cfa_offset 32
 399 01f4 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
 401 01f6 7860     		str	r0, [r7, #4]
 402 01f8 0B46     		mov	r3, r1
 403 01fa FB70     		strb	r3, [r7, #3]
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IBE, ui32IS, ui32IEV;
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(ui8Pin < 8);
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Convert from a pin number to a bit position.
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui8Pin = 1 << ui8Pin;
 404              		.loc 1 331 0
 405 01fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 406 01fe 0122     		movs	r2, #1
 407 0200 02FA03F3 		lsl	r3, r2, r3
 408 0204 FB70     		strb	r3, [r7, #3]
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the pin interrupt type.
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IBE = HWREG(ui32Port + GPIO_O_IBE);
 409              		.loc 1 336 0
 410 0206 7B68     		ldr	r3, [r7, #4]
 411 0208 03F58163 		add	r3, r3, #1032
 412 020c 1B68     		ldr	r3, [r3]
 413 020e 7B61     		str	r3, [r7, #20]
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IS  = HWREG(ui32Port + GPIO_O_IS);
 414              		.loc 1 337 0
 415 0210 7B68     		ldr	r3, [r7, #4]
 416 0212 03F20443 		addw	r3, r3, #1028
 417 0216 1B68     		ldr	r3, [r3]
 418 0218 3B61     		str	r3, [r7, #16]
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IEV = HWREG(ui32Port + GPIO_O_IEV);
 419              		.loc 1 338 0
 420 021a 7B68     		ldr	r3, [r7, #4]
 421 021c 03F20C43 		addw	r3, r3, #1036
 422 0220 1B68     		ldr	r3, [r3]
 423 0222 FB60     		str	r3, [r7, #12]
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(((ui32IBE & ui8Pin) ? 1 : 0) | ((ui32IS & ui8Pin) ? 2 : 0) |
 424              		.loc 1 339 0
 425 0224 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 426 0226 7B69     		ldr	r3, [r7, #20]
 427 0228 1340     		ands	r3, r3, r2
 428 022a 002B     		cmp	r3, #0
 429 022c 0CBF     		ite	eq
 430 022e 0023     		moveq	r3, #0
 431 0230 0123     		movne	r3, #1
 432 0232 DBB2     		uxtb	r3, r3
 433 0234 1A46     		mov	r2, r3
 434 0236 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 435 0238 3B69     		ldr	r3, [r7, #16]
 436 023a 0B40     		ands	r3, r3, r1
 437 023c 002B     		cmp	r3, #0
 438 023e 01D0     		beq	.L27
 439              		.loc 1 339 0 is_stmt 0 discriminator 1
 440 0240 0223     		movs	r3, #2
 441 0242 00E0     		b	.L28
 442              	.L27:
 443              		.loc 1 339 0 discriminator 2
 444 0244 0023     		movs	r3, #0
 445              	.L28:
 446              		.loc 1 339 0 discriminator 3
 447 0246 1A43     		orrs	r2, r2, r3
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            ((ui32IEV & ui8Pin) ? 4 : 0));
 448              		.loc 1 340 0 is_stmt 1 discriminator 3
 449 0248 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 450 024a FB68     		ldr	r3, [r7, #12]
 451 024c 0B40     		ands	r3, r3, r1
 452 024e 002B     		cmp	r3, #0
 453 0250 01D0     		beq	.L29
 454              		.loc 1 340 0 is_stmt 0 discriminator 1
 455 0252 0423     		movs	r3, #4
 456 0254 00E0     		b	.L30
 457              	.L29:
 458              		.loc 1 340 0 discriminator 2
 459 0256 0023     		movs	r3, #0
 460              	.L30:
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(((ui32IBE & ui8Pin) ? 1 : 0) | ((ui32IS & ui8Pin) ? 2 : 0) |
 461              		.loc 1 339 0 is_stmt 1
 462 0258 1343     		orrs	r3, r3, r2
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 463              		.loc 1 341 0
 464 025a 1846     		mov	r0, r3
 465 025c 1C37     		adds	r7, r7, #28
 466 025e BD46     		mov	sp, r7
 467              		@ sp needed
 468 0260 5DF8047B 		ldr	r7, [sp], #4
 469 0264 7047     		bx	lr
 470              		.cfi_endproc
 471              	.LFE4:
 473 0266 00BF     		.align	2
 474              		.global	GPIOPinIntEnable
 475              		.thumb
 476              		.thumb_func
 478              	GPIOPinIntEnable:
 479              	.LFB5:
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Enables interrupts for the specified pin(s)
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Unmasks the interrupt for the specified pin(s).
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinIntEnable(uint32_t ui32Port, uint8_t ui8Pins)
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 480              		.loc 1 361 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 8
 483              		@ frame_needed = 1, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 485 0268 80B4     		push	{r7}
 486              		.cfi_def_cfa_offset 4
 487              		.cfi_offset 7, -4
 488 026a 83B0     		sub	sp, sp, #12
 489              		.cfi_def_cfa_offset 16
 490 026c 00AF     		add	r7, sp, #0
 491              		.cfi_def_cfa_register 7
 492 026e 7860     		str	r0, [r7, #4]
 493 0270 0B46     		mov	r3, r1
 494 0272 FB70     		strb	r3, [r7, #3]
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Enable the interrupts.
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IE) |= ui8Pins;
 495              		.loc 1 370 0
 496 0274 7B68     		ldr	r3, [r7, #4]
 497 0276 03F58263 		add	r3, r3, #1040
 498 027a 7A68     		ldr	r2, [r7, #4]
 499 027c 02F58262 		add	r2, r2, #1040
 500 0280 1168     		ldr	r1, [r2]
 501 0282 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 502 0284 0A43     		orrs	r2, r2, r1
 503 0286 1A60     		str	r2, [r3]
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 504              		.loc 1 371 0
 505 0288 0C37     		adds	r7, r7, #12
 506 028a BD46     		mov	sp, r7
 507              		@ sp needed
 508 028c 5DF8047B 		ldr	r7, [sp], #4
 509 0290 7047     		bx	lr
 510              		.cfi_endproc
 511              	.LFE5:
 513 0292 00BF     		.align	2
 514              		.global	GPIOPinIntDisable
 515              		.thumb
 516              		.thumb_func
 518              	GPIOPinIntDisable:
 519              	.LFB6:
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Disables interrupts for the specified pin(s)
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Masks the interrupt for the specified pin(s)
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinIntDisable(uint32_t ui32Port, uint8_t ui8Pins)
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 520              		.loc 1 391 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525 0294 80B4     		push	{r7}
 526              		.cfi_def_cfa_offset 4
 527              		.cfi_offset 7, -4
 528 0296 83B0     		sub	sp, sp, #12
 529              		.cfi_def_cfa_offset 16
 530 0298 00AF     		add	r7, sp, #0
 531              		.cfi_def_cfa_register 7
 532 029a 7860     		str	r0, [r7, #4]
 533 029c 0B46     		mov	r3, r1
 534 029e FB70     		strb	r3, [r7, #3]
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Disable the interrupts.
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IE) &= ~(ui8Pins);
 535              		.loc 1 400 0
 536 02a0 7B68     		ldr	r3, [r7, #4]
 537 02a2 03F58263 		add	r3, r3, #1040
 538 02a6 7A68     		ldr	r2, [r7, #4]
 539 02a8 02F58262 		add	r2, r2, #1040
 540 02ac 1168     		ldr	r1, [r2]
 541 02ae FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 542 02b0 D243     		mvns	r2, r2
 543 02b2 0A40     		ands	r2, r2, r1
 544 02b4 1A60     		str	r2, [r3]
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 545              		.loc 1 401 0
 546 02b6 0C37     		adds	r7, r7, #12
 547 02b8 BD46     		mov	sp, r7
 548              		@ sp needed
 549 02ba 5DF8047B 		ldr	r7, [sp], #4
 550 02be 7047     		bx	lr
 551              		.cfi_endproc
 552              	.LFE6:
 554              		.align	2
 555              		.global	GPIOPinIntStatus
 556              		.thumb
 557              		.thumb_func
 559              	GPIOPinIntStatus:
 560              	.LFB7:
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets interrupt status for the specified GPIO port
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param bMasked specifies whether masked or raw interrupt status is
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returned.
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! If \e bMasked is set as \b true, then the masked interrupt status is
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returned; otherwise, the raw interrupt status is returned.
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns a bit-packed byte, where each bit that is set identifies
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! an active masked or raw interrupt, and where bit 0 of the byte
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Bits 31:8 should be ignored.
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinIntStatus(uint32_t ui32Port, bool bMasked)
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 561              		.loc 1 422 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 02c0 80B4     		push	{r7}
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 02c2 83B0     		sub	sp, sp, #12
 570              		.cfi_def_cfa_offset 16
 571 02c4 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 573 02c6 7860     		str	r0, [r7, #4]
 574 02c8 0B46     		mov	r3, r1
 575 02ca FB70     		strb	r3, [r7, #3]
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the interrupt status.
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(bMasked)
 576              		.loc 1 431 0
 577 02cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 578 02ce 002B     		cmp	r3, #0
 579 02d0 04D0     		beq	.L35
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(HWREG(ui32Port + GPIO_O_MIS));
 580              		.loc 1 433 0
 581 02d2 7B68     		ldr	r3, [r7, #4]
 582 02d4 03F58363 		add	r3, r3, #1048
 583 02d8 1B68     		ldr	r3, [r3]
 584 02da 03E0     		b	.L36
 585              	.L35:
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     else
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(HWREG(ui32Port + GPIO_O_RIS));
 586              		.loc 1 437 0
 587 02dc 7B68     		ldr	r3, [r7, #4]
 588 02de 03F21443 		addw	r3, r3, #1044
 589 02e2 1B68     		ldr	r3, [r3]
 590              	.L36:
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 591              		.loc 1 439 0
 592 02e4 1846     		mov	r0, r3
 593 02e6 0C37     		adds	r7, r7, #12
 594 02e8 BD46     		mov	sp, r7
 595              		@ sp needed
 596 02ea 5DF8047B 		ldr	r7, [sp], #4
 597 02ee 7047     		bx	lr
 598              		.cfi_endproc
 599              	.LFE7:
 601              		.align	2
 602              		.global	GPIOPinIntClear
 603              		.thumb
 604              		.thumb_func
 606              	GPIOPinIntClear:
 607              	.LFB8:
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Clears the interrupt for the specified pin(s)
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Clears the interrupt for the specified pin(s).
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note The write buffer in the Cortex-M3 processor can cause the interrupt 
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! source to take several clock cycles before clearing.
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Therefore, TI recommends clearing the interrupt source early in the 
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! interrupt handler (as opposed to the very last action) to avoid
 458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returning from the interrupt handler before the interrupt source is
 459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! actually cleared.  Failure to clear the interrupt source early can result in
 460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the interrupt handler being immediately reentered (because NVIC still sees
 461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the interrupt source asserted).
 462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinIntClear(uint32_t ui32Port, uint8_t ui8Pins)
 468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 608              		.loc 1 468 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 8
 611              		@ frame_needed = 1, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 613 02f0 80B4     		push	{r7}
 614              		.cfi_def_cfa_offset 4
 615              		.cfi_offset 7, -4
 616 02f2 83B0     		sub	sp, sp, #12
 617              		.cfi_def_cfa_offset 16
 618 02f4 00AF     		add	r7, sp, #0
 619              		.cfi_def_cfa_register 7
 620 02f6 7860     		str	r0, [r7, #4]
 621 02f8 0B46     		mov	r3, r1
 622 02fa FB70     		strb	r3, [r7, #3]
 469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Clear the interrupts.
 476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IC) = ui8Pins;
 623              		.loc 1 477 0
 624 02fc 7B68     		ldr	r3, [r7, #4]
 625 02fe 03F21C43 		addw	r3, r3, #1052
 626 0302 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 627 0304 1A60     		str	r2, [r3]
 478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 628              		.loc 1 478 0
 629 0306 0C37     		adds	r7, r7, #12
 630 0308 BD46     		mov	sp, r7
 631              		@ sp needed
 632 030a 5DF8047B 		ldr	r7, [sp], #4
 633 030e 7047     		bx	lr
 634              		.cfi_endproc
 635              	.LFE8:
 637              		.align	2
 638              		.global	GPIOPortIntRegister
 639              		.thumb
 640              		.thumb_func
 642              	GPIOPortIntRegister:
 643              	.LFB9:
 479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Registers an interrupt handler for a GPIO port
 483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param pfnHandler is a pointer to the GPIO port interrupt handling
 486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! function.
 487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function ensures that the interrupt handler specified by
 489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \e pfnHandler is called when an interrupt is detected from the selected
 490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port.  This function also enables the corresponding GPIO interrupt
 491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! in the interrupt controller; individual pin interrupts and interrupt
 492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! sources must be enabled with GPIOPinIntEnable().
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \sa IntRegister() for important information about registering interrupt
 495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! handlers.
 496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPortIntRegister(uint32_t ui32Port, void (*pfnHandler)(void))
 502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 644              		.loc 1 502 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 8
 647              		@ frame_needed = 1, uses_anonymous_args = 0
 648 0310 80B5     		push	{r7, lr}
 649              		.cfi_def_cfa_offset 8
 650              		.cfi_offset 7, -8
 651              		.cfi_offset 14, -4
 652 0312 82B0     		sub	sp, sp, #8
 653              		.cfi_def_cfa_offset 16
 654 0314 00AF     		add	r7, sp, #0
 655              		.cfi_def_cfa_register 7
 656 0316 7860     		str	r0, [r7, #4]
 657 0318 3960     		str	r1, [r7]
 503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Get the interrupt number associated with the specified GPIO.
 510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32Port = GPIOGetIntNumber(ui32Port);
 658              		.loc 1 511 0
 659 031a 7868     		ldr	r0, [r7, #4]
 660 031c FFF7FEFF 		bl	GPIOGetIntNumber
 661 0320 7860     		str	r0, [r7, #4]
 512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Register the interrupt handler.
 515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IntRegister(ui32Port, pfnHandler);
 662              		.loc 1 516 0
 663 0322 7868     		ldr	r0, [r7, #4]
 664 0324 3968     		ldr	r1, [r7]
 665 0326 FFF7FEFF 		bl	IntRegister
 517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Enable the GPIO interrupt.
 520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IntEnable(ui32Port);
 666              		.loc 1 521 0
 667 032a 7868     		ldr	r0, [r7, #4]
 668 032c FFF7FEFF 		bl	IntEnable
 522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 669              		.loc 1 522 0
 670 0330 0837     		adds	r7, r7, #8
 671 0332 BD46     		mov	sp, r7
 672              		@ sp needed
 673 0334 80BD     		pop	{r7, pc}
 674              		.cfi_endproc
 675              	.LFE9:
 677 0336 00BF     		.align	2
 678              		.global	GPIOPortIntUnregister
 679              		.thumb
 680              		.thumb_func
 682              	GPIOPortIntUnregister:
 683              	.LFB10:
 523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Removes an interrupt handler for a GPIO port
 527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function unregisters the interrupt handler for the specified
 531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port.  This function also disables the corresponding
 532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port interrupt in the interrupt controller; individual GPIO interrupts
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! and interrupt sources must be disabled with GPIOPinIntDisable().
 534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \sa IntRegister() for important information about registering interrupt
 536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! handlers.
 537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPortIntUnregister(uint32_t ui32Port)
 543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 684              		.loc 1 543 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 8
 687              		@ frame_needed = 1, uses_anonymous_args = 0
 688 0338 80B5     		push	{r7, lr}
 689              		.cfi_def_cfa_offset 8
 690              		.cfi_offset 7, -8
 691              		.cfi_offset 14, -4
 692 033a 82B0     		sub	sp, sp, #8
 693              		.cfi_def_cfa_offset 16
 694 033c 00AF     		add	r7, sp, #0
 695              		.cfi_def_cfa_register 7
 696 033e 7860     		str	r0, [r7, #4]
 544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Get the interrupt number associated with the specified GPIO.
 551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32Port = GPIOGetIntNumber(ui32Port);
 697              		.loc 1 552 0
 698 0340 7868     		ldr	r0, [r7, #4]
 699 0342 FFF7FEFF 		bl	GPIOGetIntNumber
 700 0346 7860     		str	r0, [r7, #4]
 553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Disable the GPIO interrupt.
 556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IntDisable(ui32Port);
 701              		.loc 1 557 0
 702 0348 7868     		ldr	r0, [r7, #4]
 703 034a FFF7FEFF 		bl	IntDisable
 558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Unregister the interrupt handler.
 561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IntUnregister(ui32Port);
 704              		.loc 1 562 0
 705 034e 7868     		ldr	r0, [r7, #4]
 706 0350 FFF7FEFF 		bl	IntUnregister
 563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 707              		.loc 1 563 0
 708 0354 0837     		adds	r7, r7, #8
 709 0356 BD46     		mov	sp, r7
 710              		@ sp needed
 711 0358 80BD     		pop	{r7, pc}
 712              		.cfi_endproc
 713              	.LFE10:
 715 035a 00BF     		.align	2
 716              		.global	GPIOPinRead
 717              		.thumb
 718              		.thumb_func
 720              	GPIOPinRead:
 721              	.LFB11:
 564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Reads the values present of the specified pin(s)
 568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The values at the specified pin(s) are read, as specified by \e ui8Pins.
 573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Values are returned for both input and output pin(s), and the value
 574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! for pin(s) that are not specified by \e ui8Pins are set to 0.
 575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns a bit-packed byte providing the state of the specified
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin, where bit 0 of the byte represents GPIO port pin 0, bit 1 represents
 582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port pin 1, and so on.  Any bit that is not specified by \e ui8Pins
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! is returned as a 0.  Bits 31:8 should be ignored.
 584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
 587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinRead(uint32_t ui32Port, uint8_t ui8Pins)
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 722              		.loc 1 588 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 8
 725              		@ frame_needed = 1, uses_anonymous_args = 0
 726              		@ link register save eliminated.
 727 035c 80B4     		push	{r7}
 728              		.cfi_def_cfa_offset 4
 729              		.cfi_offset 7, -4
 730 035e 83B0     		sub	sp, sp, #12
 731              		.cfi_def_cfa_offset 16
 732 0360 00AF     		add	r7, sp, #0
 733              		.cfi_def_cfa_register 7
 734 0362 7860     		str	r0, [r7, #4]
 735 0364 0B46     		mov	r3, r1
 736 0366 FB70     		strb	r3, [r7, #3]
 589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the pin value(s).
 596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(HWREG(ui32Port + (GPIO_O_DATA + (ui8Pins << 2))));
 737              		.loc 1 597 0
 738 0368 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 739 036a 9B00     		lsls	r3, r3, #2
 740 036c 1A46     		mov	r2, r3
 741 036e 7B68     		ldr	r3, [r7, #4]
 742 0370 1344     		add	r3, r3, r2
 743 0372 1B68     		ldr	r3, [r3]
 598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 744              		.loc 1 598 0
 745 0374 1846     		mov	r0, r3
 746 0376 0C37     		adds	r7, r7, #12
 747 0378 BD46     		mov	sp, r7
 748              		@ sp needed
 749 037a 5DF8047B 		ldr	r7, [sp], #4
 750 037e 7047     		bx	lr
 751              		.cfi_endproc
 752              	.LFE11:
 754              		.align	2
 755              		.global	GPIOPinWrite
 756              		.thumb
 757              		.thumb_func
 759              	GPIOPinWrite:
 760              	.LFB12:
 599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Writes a value to the specified pin(s)
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Val is the value to write to the pin(s).
 607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Writes the corresponding bit values to the output pin(s) specified by
 609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \e ui8Pins.  Writing to a pin configured as an input pin has no effect.
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinWrite(uint32_t ui32Port, uint8_t ui8Pins, uint8_t ui8Val)
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 761              		.loc 1 620 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 8
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 766 0380 80B4     		push	{r7}
 767              		.cfi_def_cfa_offset 4
 768              		.cfi_offset 7, -4
 769 0382 83B0     		sub	sp, sp, #12
 770              		.cfi_def_cfa_offset 16
 771 0384 00AF     		add	r7, sp, #0
 772              		.cfi_def_cfa_register 7
 773 0386 7860     		str	r0, [r7, #4]
 774 0388 1346     		mov	r3, r2
 775 038a 0A46     		mov	r2, r1
 776 038c FA70     		strb	r2, [r7, #3]
 777 038e BB70     		strb	r3, [r7, #2]
 621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Write the pins.
 628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + (GPIO_O_DATA + (ui8Pins << 2))) = ui8Val;
 778              		.loc 1 629 0
 779 0390 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 780 0392 9B00     		lsls	r3, r3, #2
 781 0394 1A46     		mov	r2, r3
 782 0396 7B68     		ldr	r3, [r7, #4]
 783 0398 1344     		add	r3, r3, r2
 784 039a BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 785 039c 1A60     		str	r2, [r3]
 630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 786              		.loc 1 630 0
 787 039e 0C37     		adds	r7, r7, #12
 788 03a0 BD46     		mov	sp, r7
 789              		@ sp needed
 790 03a2 5DF8047B 		ldr	r7, [sp], #4
 791 03a6 7047     		bx	lr
 792              		.cfi_endproc
 793              	.LFE12:
 795              		.align	2
 796              		.global	GPIOPinTypeGPIOInput
 797              		.thumb
 798              		.thumb_func
 800              	GPIOPinTypeGPIOInput:
 801              	.LFB13:
 631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use as GPIO inputs
 635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The GPIO pins must be properly configured in order to function correctly as
 640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO inputs.  This function provides the proper configuration for those
 641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin(s).
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeGPIOInput(uint32_t ui32Port, uint8_t ui8Pins)
 652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 802              		.loc 1 652 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 8
 805              		@ frame_needed = 1, uses_anonymous_args = 0
 806 03a8 80B5     		push	{r7, lr}
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 7, -8
 809              		.cfi_offset 14, -4
 810 03aa 82B0     		sub	sp, sp, #8
 811              		.cfi_def_cfa_offset 16
 812 03ac 00AF     		add	r7, sp, #0
 813              		.cfi_def_cfa_register 7
 814 03ae 7860     		str	r0, [r7, #4]
 815 03b0 0B46     		mov	r3, r1
 816 03b2 FB70     		strb	r3, [r7, #3]
 653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be inputs.
 660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_IN);
 817              		.loc 1 661 0
 818 03b4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 819 03b6 7868     		ldr	r0, [r7, #4]
 820 03b8 1946     		mov	r1, r3
 821 03ba 0022     		movs	r2, #0
 822 03bc FFF7FEFF 		bl	GPIODirModeSet
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to no override of the drive type.
 665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 823              		.loc 1 666 0
 824 03c0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 825 03c2 7868     		ldr	r0, [r7, #4]
 826 03c4 1946     		mov	r1, r3
 827 03c6 0022     		movs	r2, #0
 828 03c8 FFF7FEFF 		bl	IOCPadConfigSet
 667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 829              		.loc 1 667 0
 830 03cc 0837     		adds	r7, r7, #8
 831 03ce BD46     		mov	sp, r7
 832              		@ sp needed
 833 03d0 80BD     		pop	{r7, pc}
 834              		.cfi_endproc
 835              	.LFE13:
 837 03d2 00BF     		.align	2
 838              		.global	GPIOPinTypeGPIOOutput
 839              		.thumb
 840              		.thumb_func
 842              	GPIOPinTypeGPIOOutput:
 843              	.LFB14:
 668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use as GPIO outputs
 672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The GPIO pins must be properly configured to function correctly as
 677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO outputs.  This function provides the proper configuration for those
 678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin(s).
 679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeGPIOOutput(uint32_t ui32Port, uint8_t ui8Pins)
 689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 844              		.loc 1 689 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 8
 847              		@ frame_needed = 1, uses_anonymous_args = 0
 848 03d4 80B5     		push	{r7, lr}
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 03d6 82B0     		sub	sp, sp, #8
 853              		.cfi_def_cfa_offset 16
 854 03d8 00AF     		add	r7, sp, #0
 855              		.cfi_def_cfa_register 7
 856 03da 7860     		str	r0, [r7, #4]
 857 03dc 0B46     		mov	r3, r1
 858 03de FB70     		strb	r3, [r7, #3]
 690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be outputs.
 697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_OUT);
 859              		.loc 1 698 0
 860 03e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 861 03e2 7868     		ldr	r0, [r7, #4]
 862 03e4 1946     		mov	r1, r3
 863 03e6 0122     		movs	r2, #1
 864 03e8 FFF7FEFF 		bl	GPIODirModeSet
 699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) no override of the drive type.
 702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 865              		.loc 1 703 0
 866 03ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 867 03ee 7868     		ldr	r0, [r7, #4]
 868 03f0 1946     		mov	r1, r3
 869 03f2 0022     		movs	r2, #0
 870 03f4 FFF7FEFF 		bl	IOCPadConfigSet
 704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 871              		.loc 1 704 0
 872 03f8 0837     		adds	r7, r7, #8
 873 03fa BD46     		mov	sp, r7
 874              		@ sp needed
 875 03fc 80BD     		pop	{r7, pc}
 876              		.cfi_endproc
 877              	.LFE14:
 879 03fe 00BF     		.align	2
 880              		.global	GPIOPinTypeI2C
 881              		.thumb
 882              		.thumb_func
 884              	GPIOPinTypeI2C:
 885              	.LFB15:
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use by the I2C peripheral
 709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The I2C pins must be properly configured for the I2C peripheral to function
 714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! correctly.  This function provides the proper configuration for those
 715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin(s).
 716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into an I2C pin; it only
 722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures an I2C pin for proper operation.
 723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeI2C(uint32_t ui32Port, uint8_t ui8Pins)
 729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 886              		.loc 1 729 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 8
 889              		@ frame_needed = 1, uses_anonymous_args = 0
 890 0400 80B5     		push	{r7, lr}
 891              		.cfi_def_cfa_offset 8
 892              		.cfi_offset 7, -8
 893              		.cfi_offset 14, -4
 894 0402 82B0     		sub	sp, sp, #8
 895              		.cfi_def_cfa_offset 16
 896 0404 00AF     		add	r7, sp, #0
 897              		.cfi_def_cfa_register 7
 898 0406 7860     		str	r0, [r7, #4]
 899 0408 0B46     		mov	r3, r1
 900 040a FB70     		strb	r3, [r7, #3]
 730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 901              		.loc 1 738 0
 902 040c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 903 040e 7868     		ldr	r0, [r7, #4]
 904 0410 1946     		mov	r1, r3
 905 0412 0222     		movs	r2, #2
 906 0414 FFF7FEFF 		bl	GPIODirModeSet
 739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to no drive type.
 742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 907              		.loc 1 743 0
 908 0418 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 909 041a 7868     		ldr	r0, [r7, #4]
 910 041c 1946     		mov	r1, r3
 911 041e 0022     		movs	r2, #0
 912 0420 FFF7FEFF 		bl	IOCPadConfigSet
 744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 913              		.loc 1 744 0
 914 0424 0837     		adds	r7, r7, #8
 915 0426 BD46     		mov	sp, r7
 916              		@ sp needed
 917 0428 80BD     		pop	{r7, pc}
 918              		.cfi_endproc
 919              	.LFE15:
 921 042a 00BF     		.align	2
 922              		.global	GPIOPinTypeSSI
 923              		.thumb
 924              		.thumb_func
 926              	GPIOPinTypeSSI:
 927              	.LFB16:
 745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use by the SSI peripheral
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The SSI pins must be properly configured for the SSI peripheral to function
 754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! correctly.  This function provides a typical configuration for those
 755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin(s); other configurations might work as well depending upon the board
 756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! setup (for example, using the on-chip pull-ups).
 757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a SSI pin; but only
 763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures an SSI pin for proper operation.
 764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeSSI(uint32_t ui32Port, uint8_t ui8Pins)
 770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 928              		.loc 1 770 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 8
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932 042c 80B5     		push	{r7, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 042e 82B0     		sub	sp, sp, #8
 937              		.cfi_def_cfa_offset 16
 938 0430 00AF     		add	r7, sp, #0
 939              		.cfi_def_cfa_register 7
 940 0432 7860     		str	r0, [r7, #4]
 941 0434 0B46     		mov	r3, r1
 942 0436 FB70     		strb	r3, [r7, #3]
 771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 943              		.loc 1 779 0
 944 0438 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 945 043a 7868     		ldr	r0, [r7, #4]
 946 043c 1946     		mov	r1, r3
 947 043e 0222     		movs	r2, #2
 948 0440 FFF7FEFF 		bl	GPIODirModeSet
 780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to no drive type.
 783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 949              		.loc 1 784 0
 950 0444 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 951 0446 7868     		ldr	r0, [r7, #4]
 952 0448 1946     		mov	r1, r3
 953 044a 0022     		movs	r2, #0
 954 044c FFF7FEFF 		bl	IOCPadConfigSet
 785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 955              		.loc 1 785 0
 956 0450 0837     		adds	r7, r7, #8
 957 0452 BD46     		mov	sp, r7
 958              		@ sp needed
 959 0454 80BD     		pop	{r7, pc}
 960              		.cfi_endproc
 961              	.LFE16:
 963 0456 00BF     		.align	2
 964              		.global	GPIOPinTypeTimer
 965              		.thumb
 966              		.thumb_func
 968              	GPIOPinTypeTimer:
 969              	.LFB17:
 786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use by the Timer peripheral
 790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The CCP pins must be properly configured for the timer peripheral to
 795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a timer pin but only
 804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures a timer pin for proper operation.
 805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeTimer(uint32_t ui32Port, uint8_t ui8Pins)
 811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 970              		.loc 1 811 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 8
 973              		@ frame_needed = 1, uses_anonymous_args = 0
 974 0458 80B5     		push	{r7, lr}
 975              		.cfi_def_cfa_offset 8
 976              		.cfi_offset 7, -8
 977              		.cfi_offset 14, -4
 978 045a 82B0     		sub	sp, sp, #8
 979              		.cfi_def_cfa_offset 16
 980 045c 00AF     		add	r7, sp, #0
 981              		.cfi_def_cfa_register 7
 982 045e 7860     		str	r0, [r7, #4]
 983 0460 0B46     		mov	r3, r1
 984 0462 FB70     		strb	r3, [r7, #3]
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 985              		.loc 1 820 0
 986 0464 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 987 0466 7868     		ldr	r0, [r7, #4]
 988 0468 1946     		mov	r1, r3
 989 046a 0222     		movs	r2, #2
 990 046c FFF7FEFF 		bl	GPIODirModeSet
 821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 823:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to no drive type.
 824:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 825:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 991              		.loc 1 825 0
 992 0470 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 993 0472 7868     		ldr	r0, [r7, #4]
 994 0474 1946     		mov	r1, r3
 995 0476 0022     		movs	r2, #0
 996 0478 FFF7FEFF 		bl	IOCPadConfigSet
 826:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 997              		.loc 1 826 0
 998 047c 0837     		adds	r7, r7, #8
 999 047e BD46     		mov	sp, r7
 1000              		@ sp needed
 1001 0480 80BD     		pop	{r7, pc}
 1002              		.cfi_endproc
 1003              	.LFE17:
 1005 0482 00BF     		.align	2
 1006              		.global	GPIOPinTypeUARTInput
 1007              		.thumb
 1008              		.thumb_func
 1010              	GPIOPinTypeUARTInput:
 1011              	.LFB18:
 827:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 828:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 829:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 830:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures input pin(s) for use by the UART peripheral
 831:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 833:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 834:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 835:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The UART input pins must be properly configured for the UART peripheral to
 836:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 837:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 838:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 840:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note For PC0 through PC3 the function GPIOPinTypeUARTHiDrive() should
 841:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! be used to configure these high drive pins.
 842:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 843:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 844:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 845:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 846:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 847:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a UART pin; but only
 848:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures a UART pin for proper operation.
 849:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 850:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 851:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 853:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 854:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeUARTInput(uint32_t ui32Port, uint8_t ui8Pins)
 855:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1012              		.loc 1 855 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 8
 1015              		@ frame_needed = 1, uses_anonymous_args = 0
 1016 0484 80B5     		push	{r7, lr}
 1017              		.cfi_def_cfa_offset 8
 1018              		.cfi_offset 7, -8
 1019              		.cfi_offset 14, -4
 1020 0486 82B0     		sub	sp, sp, #8
 1021              		.cfi_def_cfa_offset 16
 1022 0488 00AF     		add	r7, sp, #0
 1023              		.cfi_def_cfa_register 7
 1024 048a 7860     		str	r0, [r7, #4]
 1025 048c 0B46     		mov	r3, r1
 1026 048e FB70     		strb	r3, [r7, #3]
 856:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 857:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 858:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 859:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 860:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(!((ui32Port == GPIO_C_BASE) && ((ui8Pins & 0xf) > 0)));
 861:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 862:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 863:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 864:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 865:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1027              		.loc 1 865 0
 1028 0490 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1029 0492 7868     		ldr	r0, [r7, #4]
 1030 0494 1946     		mov	r1, r3
 1031 0496 0222     		movs	r2, #2
 1032 0498 FFF7FEFF 		bl	GPIODirModeSet
 866:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 867:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 868:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to override disable.
 869:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 870:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1033              		.loc 1 870 0
 1034 049c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1035 049e 7868     		ldr	r0, [r7, #4]
 1036 04a0 1946     		mov	r1, r3
 1037 04a2 0022     		movs	r2, #0
 1038 04a4 FFF7FEFF 		bl	IOCPadConfigSet
 871:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1039              		.loc 1 871 0
 1040 04a8 0837     		adds	r7, r7, #8
 1041 04aa BD46     		mov	sp, r7
 1042              		@ sp needed
 1043 04ac 80BD     		pop	{r7, pc}
 1044              		.cfi_endproc
 1045              	.LFE18:
 1047 04ae 00BF     		.align	2
 1048              		.global	GPIOPinTypeUARTOutput
 1049              		.thumb
 1050              		.thumb_func
 1052              	GPIOPinTypeUARTOutput:
 1053              	.LFB19:
 872:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 873:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 874:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 875:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures output pin(s) for use by the UART peripheral
 876:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 877:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 878:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 879:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 880:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The UART output pins must be properly configured for the UART peripheral to
 881:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 882:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 883:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 884:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 885:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 886:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 887:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 888:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 889:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a UART pin; but only
 890:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures a UART pin for proper operation.
 891:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 892:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 894:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 896:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeUARTOutput(uint32_t ui32Port, uint8_t ui8Pins)
 897:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1054              		.loc 1 897 0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 8
 1057              		@ frame_needed = 1, uses_anonymous_args = 0
 1058 04b0 80B5     		push	{r7, lr}
 1059              		.cfi_def_cfa_offset 8
 1060              		.cfi_offset 7, -8
 1061              		.cfi_offset 14, -4
 1062 04b2 82B0     		sub	sp, sp, #8
 1063              		.cfi_def_cfa_offset 16
 1064 04b4 00AF     		add	r7, sp, #0
 1065              		.cfi_def_cfa_register 7
 1066 04b6 7860     		str	r0, [r7, #4]
 1067 04b8 0B46     		mov	r3, r1
 1068 04ba FB70     		strb	r3, [r7, #3]
 898:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 899:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 900:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 901:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 902:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(!((ui32Port == GPIO_C_BASE) && ((ui8Pins & 0xf) > 0)));
 903:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 904:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 905:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 906:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 907:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1069              		.loc 1 907 0
 1070 04bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1071 04be 7868     		ldr	r0, [r7, #4]
 1072 04c0 1946     		mov	r1, r3
 1073 04c2 0222     		movs	r2, #2
 1074 04c4 FFF7FEFF 		bl	GPIODirModeSet
 908:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 909:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 910:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to output enable.
 911:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 912:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_OE);
 1075              		.loc 1 912 0
 1076 04c8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1077 04ca 7868     		ldr	r0, [r7, #4]
 1078 04cc 1946     		mov	r1, r3
 1079 04ce 0822     		movs	r2, #8
 1080 04d0 FFF7FEFF 		bl	IOCPadConfigSet
 913:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1081              		.loc 1 913 0
 1082 04d4 0837     		adds	r7, r7, #8
 1083 04d6 BD46     		mov	sp, r7
 1084              		@ sp needed
 1085 04d8 80BD     		pop	{r7, pc}
 1086              		.cfi_endproc
 1087              	.LFE19:
 1089 04da 00BF     		.align	2
 1090              		.global	GPIOPowIntTypeSet
 1091              		.thumb
 1092              		.thumb_func
 1094              	GPIOPowIntTypeSet:
 1095              	.LFB20:
 914:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 915:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 916:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 917:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Sets the power-up interrupt type for the specified pin(s)
 918:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 919:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 920:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 921:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32IntType specifies type of power-up interrupt trigger mechanism.
 922:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 923:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function sets up the various interrupt trigger mechanisms for the
 924:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! specified pin(s) on the selected GPIO port.
 925:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 926:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The parameter \e ui32IntType is an enumerated data type that can be one of
 927:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
 928:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 929:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_POW_FALLING_EDGE
 930:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_POW_RISING_EDGE
 931:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 932:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 934:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 935:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 936:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note To avoid any spurious interrupts, the user must
 937:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! ensure that the GPIO inputs remain stable for the duration of
 938:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! this function.
 939:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 940:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 941:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 942:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 943:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 944:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
 945:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                   uint32_t ui32IntType)
 946:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1096              		.loc 1 946 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 24
 1099              		@ frame_needed = 1, uses_anonymous_args = 0
 1100              		@ link register save eliminated.
 1101 04dc 80B4     		push	{r7}
 1102              		.cfi_def_cfa_offset 4
 1103              		.cfi_offset 7, -4
 1104 04de 87B0     		sub	sp, sp, #28
 1105              		.cfi_def_cfa_offset 32
 1106 04e0 00AF     		add	r7, sp, #0
 1107              		.cfi_def_cfa_register 7
 1108 04e2 F860     		str	r0, [r7, #12]
 1109 04e4 0B46     		mov	r3, r1
 1110 04e6 7A60     		str	r2, [r7, #4]
 1111 04e8 FB72     		strb	r3, [r7, #11]
 947:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
 948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPins;
 949:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 950:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 951:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
 952:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1112              		.loc 1 953 0
 1113 04ea 0023     		movs	r3, #0
 1114 04ec 7B61     		str	r3, [r7, #20]
 954:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 955:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 956:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 958:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 959:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32IntType == GPIO_POW_FALLING_EDGE) ||
 960:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32IntType == GPIO_POW_RISING_EDGE));
 961:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 962:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 963:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
 964:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 965:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1115              		.loc 1 965 0
 1116 04ee FA68     		ldr	r2, [r7, #12]
 1117 04f0 4FF41043 		mov	r3, #36864
 1118 04f4 C4F20D03 		movt	r3, 16397
 1119 04f8 9A42     		cmp	r2, r3
 1120 04fa 01D1     		bne	.L51
 966:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 967:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1121              		.loc 1 967 0
 1122 04fc 0023     		movs	r3, #0
 1123 04fe 7B61     		str	r3, [r7, #20]
 1124              	.L51:
 968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 969:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1125              		.loc 1 969 0
 1126 0500 FA68     		ldr	r2, [r7, #12]
 1127 0502 4FF42043 		mov	r3, #40960
 1128 0506 C4F20D03 		movt	r3, 16397
 1129 050a 9A42     		cmp	r2, r3
 1130 050c 01D1     		bne	.L52
 970:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 971:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1131              		.loc 1 971 0
 1132 050e 0823     		movs	r3, #8
 1133 0510 7B61     		str	r3, [r7, #20]
 1134              	.L52:
 972:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 973:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1135              		.loc 1 973 0
 1136 0512 FA68     		ldr	r2, [r7, #12]
 1137 0514 4FF43043 		mov	r3, #45056
 1138 0518 C4F20D03 		movt	r3, 16397
 1139 051c 9A42     		cmp	r2, r3
 1140 051e 01D1     		bne	.L53
 974:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 975:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1141              		.loc 1 975 0
 1142 0520 1023     		movs	r3, #16
 1143 0522 7B61     		str	r3, [r7, #20]
 1144              	.L53:
 976:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 977:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1145              		.loc 1 977 0
 1146 0524 FA68     		ldr	r2, [r7, #12]
 1147 0526 4FF44043 		mov	r3, #49152
 1148 052a C4F20D03 		movt	r3, 16397
 1149 052e 9A42     		cmp	r2, r3
 1150 0530 01D1     		bne	.L54
 978:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 979:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1151              		.loc 1 979 0
 1152 0532 1823     		movs	r3, #24
 1153 0534 7B61     		str	r3, [r7, #20]
 1154              	.L54:
 980:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 981:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1155              		.loc 1 981 0
 1156 0536 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1157 0538 7B69     		ldr	r3, [r7, #20]
 1158 053a 02FA03F3 		lsl	r3, r2, r3
 1159 053e 3B61     		str	r3, [r7, #16]
 982:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 983:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 984:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pin interrupt type.
 985:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 986:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32IntType == GPIO_POW_FALLING_EDGE)
 1160              		.loc 1 986 0
 1161 0540 7B68     		ldr	r3, [r7, #4]
 1162 0542 012B     		cmp	r3, #1
 1163 0544 0AD1     		bne	.L55
 987:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 988:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) |= ui32IntPins;
 1164              		.loc 1 988 0
 1165 0546 FB68     		ldr	r3, [r7, #12]
 1166 0548 03F20473 		addw	r3, r3, #1796
 1167 054c FA68     		ldr	r2, [r7, #12]
 1168 054e 02F20472 		addw	r2, r2, #1796
 1169 0552 1168     		ldr	r1, [r2]
 1170 0554 3A69     		ldr	r2, [r7, #16]
 1171 0556 0A43     		orrs	r2, r2, r1
 1172 0558 1A60     		str	r2, [r3]
 1173 055a 0AE0     		b	.L50
 1174              	.L55:
 989:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 990:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     else  // GPIO_POW_RAISING_EDGE
 991:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 992:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) &= ~(ui32IntPins);
 1175              		.loc 1 992 0
 1176 055c FB68     		ldr	r3, [r7, #12]
 1177 055e 03F20473 		addw	r3, r3, #1796
 1178 0562 FA68     		ldr	r2, [r7, #12]
 1179 0564 02F20472 		addw	r2, r2, #1796
 1180 0568 1168     		ldr	r1, [r2]
 1181 056a 3A69     		ldr	r2, [r7, #16]
 1182 056c D243     		mvns	r2, r2
 1183 056e 0A40     		ands	r2, r2, r1
 1184 0570 1A60     		str	r2, [r3]
 1185              	.L50:
 993:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 994:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1186              		.loc 1 994 0
 1187 0572 1C37     		adds	r7, r7, #28
 1188 0574 BD46     		mov	sp, r7
 1189              		@ sp needed
 1190 0576 5DF8047B 		ldr	r7, [sp], #4
 1191 057a 7047     		bx	lr
 1192              		.cfi_endproc
 1193              	.LFE20:
 1195              		.align	2
 1196              		.global	GPIOPowIntTypeGet
 1197              		.thumb
 1198              		.thumb_func
 1200              	GPIOPowIntTypeGet:
 1201              	.LFB21:
 995:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 996:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 997:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 998:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets the power-up interrupt type for a pin
 999:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1000:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1001:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pin is the pin number.
1002:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1003:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function gets the interrupt type for a specified pin on the selected
1004:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port.  The pin can be configured as a falling edge, rising edge, or
1005:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! both edge detected interrupt, or it can be configured as a low level or
1006:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! high level detected interrupt.  The type of interrupt detection mechanism
1007:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! is returned as an enumerated data type.
1008:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1009:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns one of the enumerated data types described for
1010:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIOIntTypeSet().
1011:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1012:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1013:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
1014:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin)
1015:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1202              		.loc 1 1015 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 16
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206              		@ link register save eliminated.
 1207 057c 80B4     		push	{r7}
 1208              		.cfi_def_cfa_offset 4
 1209              		.cfi_offset 7, -4
 1210 057e 85B0     		sub	sp, sp, #20
 1211              		.cfi_def_cfa_offset 24
 1212 0580 00AF     		add	r7, sp, #0
 1213              		.cfi_def_cfa_register 7
 1214 0582 7860     		str	r0, [r7, #4]
 1215 0584 0B46     		mov	r3, r1
 1216 0586 FB70     		strb	r3, [r7, #3]
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1017:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPin;
1018:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1019:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1020:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1021:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1022:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1217              		.loc 1 1022 0
 1218 0588 0023     		movs	r3, #0
 1219 058a FB60     		str	r3, [r7, #12]
1023:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1024:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1025:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1026:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1027:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1028:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(ui8Pin < 8);
1029:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1030:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1031:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Convert from a port- pin number to a bit position.
1032:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1033:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1220              		.loc 1 1033 0
 1221 058c 7A68     		ldr	r2, [r7, #4]
 1222 058e 4FF41043 		mov	r3, #36864
 1223 0592 C4F20D03 		movt	r3, 16397
 1224 0596 9A42     		cmp	r2, r3
 1225 0598 01D1     		bne	.L58
1034:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1226              		.loc 1 1035 0
 1227 059a 0023     		movs	r3, #0
 1228 059c FB60     		str	r3, [r7, #12]
 1229              	.L58:
1036:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1037:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1230              		.loc 1 1037 0
 1231 059e 7A68     		ldr	r2, [r7, #4]
 1232 05a0 4FF42043 		mov	r3, #40960
 1233 05a4 C4F20D03 		movt	r3, 16397
 1234 05a8 9A42     		cmp	r2, r3
 1235 05aa 01D1     		bne	.L59
1038:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1039:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1236              		.loc 1 1039 0
 1237 05ac 0823     		movs	r3, #8
 1238 05ae FB60     		str	r3, [r7, #12]
 1239              	.L59:
1040:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1041:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1240              		.loc 1 1041 0
 1241 05b0 7A68     		ldr	r2, [r7, #4]
 1242 05b2 4FF43043 		mov	r3, #45056
 1243 05b6 C4F20D03 		movt	r3, 16397
 1244 05ba 9A42     		cmp	r2, r3
 1245 05bc 01D1     		bne	.L60
1042:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1043:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1246              		.loc 1 1043 0
 1247 05be 1023     		movs	r3, #16
 1248 05c0 FB60     		str	r3, [r7, #12]
 1249              	.L60:
1044:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1045:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1250              		.loc 1 1045 0
 1251 05c2 7A68     		ldr	r2, [r7, #4]
 1252 05c4 4FF44043 		mov	r3, #49152
 1253 05c8 C4F20D03 		movt	r3, 16397
 1254 05cc 9A42     		cmp	r2, r3
 1255 05ce 01D1     		bne	.L61
1046:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1047:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1256              		.loc 1 1047 0
 1257 05d0 1823     		movs	r3, #24
 1258 05d2 FB60     		str	r3, [r7, #12]
 1259              	.L61:
1048:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1049:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPin = 1 << (ui8Pin + ui32PortOffset);
 1260              		.loc 1 1049 0
 1261 05d4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1262 05d6 FB68     		ldr	r3, [r7, #12]
 1263 05d8 1344     		add	r3, r3, r2
 1264 05da 0122     		movs	r2, #1
 1265 05dc 02FA03F3 		lsl	r3, r2, r3
 1266 05e0 BB60     		str	r3, [r7, #8]
1050:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1051:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1052:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the pin interrupt type.
1053:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1054:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) & ui32IntPin)
 1267              		.loc 1 1054 0
 1268 05e2 7B68     		ldr	r3, [r7, #4]
 1269 05e4 03F20473 		addw	r3, r3, #1796
 1270 05e8 1A68     		ldr	r2, [r3]
 1271 05ea BB68     		ldr	r3, [r7, #8]
 1272 05ec 1340     		ands	r3, r3, r2
 1273 05ee 002B     		cmp	r3, #0
 1274 05f0 01D0     		beq	.L62
1055:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1056:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(GPIO_POW_FALLING_EDGE);
 1275              		.loc 1 1056 0
 1276 05f2 0123     		movs	r3, #1
 1277 05f4 00E0     		b	.L63
 1278              	.L62:
1057:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1058:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     else
1059:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1060:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(GPIO_POW_RISING_EDGE);
 1279              		.loc 1 1060 0
 1280 05f6 0023     		movs	r3, #0
 1281              	.L63:
1061:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1062:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1282              		.loc 1 1062 0
 1283 05f8 1846     		mov	r0, r3
 1284 05fa 1437     		adds	r7, r7, #20
 1285 05fc BD46     		mov	sp, r7
 1286              		@ sp needed
 1287 05fe 5DF8047B 		ldr	r7, [sp], #4
 1288 0602 7047     		bx	lr
 1289              		.cfi_endproc
 1290              	.LFE21:
 1292              		.align	2
 1293              		.global	GPIOPowIntEnable
 1294              		.thumb
 1295              		.thumb_func
 1297              	GPIOPowIntEnable:
 1298              	.LFB22:
1063:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1064:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1065:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1066:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Enables power-up interrupts for the specified pin(s)
1067:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1068:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1069:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1070:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1071:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Unmasks the interrupt for the specified pin(s).
1072:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1073:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1074:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1075:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1076:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1077:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1078:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1079:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1080:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1081:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntEnable(uint32_t ui32Port, uint8_t ui8Pins)
1082:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1299              		.loc 1 1082 0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 16
 1302              		@ frame_needed = 1, uses_anonymous_args = 0
 1303              		@ link register save eliminated.
 1304 0604 80B4     		push	{r7}
 1305              		.cfi_def_cfa_offset 4
 1306              		.cfi_offset 7, -4
 1307 0606 85B0     		sub	sp, sp, #20
 1308              		.cfi_def_cfa_offset 24
 1309 0608 00AF     		add	r7, sp, #0
 1310              		.cfi_def_cfa_register 7
 1311 060a 7860     		str	r0, [r7, #4]
 1312 060c 0B46     		mov	r3, r1
 1313 060e FB70     		strb	r3, [r7, #3]
1083:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1084:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPins;
1085:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1086:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1087:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1088:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1089:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1314              		.loc 1 1089 0
 1315 0610 0023     		movs	r3, #0
 1316 0612 FB60     		str	r3, [r7, #12]
1090:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1091:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1092:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1093:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1094:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1095:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1096:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1097:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1098:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1099:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1317              		.loc 1 1099 0
 1318 0614 7A68     		ldr	r2, [r7, #4]
 1319 0616 4FF41043 		mov	r3, #36864
 1320 061a C4F20D03 		movt	r3, 16397
 1321 061e 9A42     		cmp	r2, r3
 1322 0620 01D1     		bne	.L65
1100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1323              		.loc 1 1101 0
 1324 0622 0023     		movs	r3, #0
 1325 0624 FB60     		str	r3, [r7, #12]
 1326              	.L65:
1102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1327              		.loc 1 1103 0
 1328 0626 7A68     		ldr	r2, [r7, #4]
 1329 0628 4FF42043 		mov	r3, #40960
 1330 062c C4F20D03 		movt	r3, 16397
 1331 0630 9A42     		cmp	r2, r3
 1332 0632 01D1     		bne	.L66
1104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1333              		.loc 1 1105 0
 1334 0634 0823     		movs	r3, #8
 1335 0636 FB60     		str	r3, [r7, #12]
 1336              	.L66:
1106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1337              		.loc 1 1107 0
 1338 0638 7A68     		ldr	r2, [r7, #4]
 1339 063a 4FF43043 		mov	r3, #45056
 1340 063e C4F20D03 		movt	r3, 16397
 1341 0642 9A42     		cmp	r2, r3
 1342 0644 01D1     		bne	.L67
1108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1343              		.loc 1 1109 0
 1344 0646 1023     		movs	r3, #16
 1345 0648 FB60     		str	r3, [r7, #12]
 1346              	.L67:
1110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1347              		.loc 1 1111 0
 1348 064a 7A68     		ldr	r2, [r7, #4]
 1349 064c 4FF44043 		mov	r3, #49152
 1350 0650 C4F20D03 		movt	r3, 16397
 1351 0654 9A42     		cmp	r2, r3
 1352 0656 01D1     		bne	.L68
1112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1353              		.loc 1 1113 0
 1354 0658 1823     		movs	r3, #24
 1355 065a FB60     		str	r3, [r7, #12]
 1356              	.L68:
1114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1357              		.loc 1 1115 0
 1358 065c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1359 065e FB68     		ldr	r3, [r7, #12]
 1360 0660 02FA03F3 		lsl	r3, r2, r3
 1361 0664 BB60     		str	r3, [r7, #8]
1116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Enable the interrupts.
1119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_PI_IEN) |= ui32IntPins;
 1362              		.loc 1 1120 0
 1363 0666 7B68     		ldr	r3, [r7, #4]
 1364 0668 03F5E263 		add	r3, r3, #1808
 1365 066c 7A68     		ldr	r2, [r7, #4]
 1366 066e 02F5E262 		add	r2, r2, #1808
 1367 0672 1168     		ldr	r1, [r2]
 1368 0674 BA68     		ldr	r2, [r7, #8]
 1369 0676 0A43     		orrs	r2, r2, r1
 1370 0678 1A60     		str	r2, [r3]
1121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1371              		.loc 1 1121 0
 1372 067a 1437     		adds	r7, r7, #20
 1373 067c BD46     		mov	sp, r7
 1374              		@ sp needed
 1375 067e 5DF8047B 		ldr	r7, [sp], #4
 1376 0682 7047     		bx	lr
 1377              		.cfi_endproc
 1378              	.LFE22:
 1380              		.align	2
 1381              		.global	GPIOPowIntDisable
 1382              		.thumb
 1383              		.thumb_func
 1385              	GPIOPowIntDisable:
 1386              	.LFB23:
1122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Disables power-up interrupts for the specified pin(s)
1126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Masks the interrupt for the specified pin(s).
1131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntDisable(uint32_t ui32Port, uint8_t ui8Pins)
1141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1387              		.loc 1 1141 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 16
 1390              		@ frame_needed = 1, uses_anonymous_args = 0
 1391              		@ link register save eliminated.
 1392 0684 80B4     		push	{r7}
 1393              		.cfi_def_cfa_offset 4
 1394              		.cfi_offset 7, -4
 1395 0686 85B0     		sub	sp, sp, #20
 1396              		.cfi_def_cfa_offset 24
 1397 0688 00AF     		add	r7, sp, #0
 1398              		.cfi_def_cfa_register 7
 1399 068a 7860     		str	r0, [r7, #4]
 1400 068c 0B46     		mov	r3, r1
 1401 068e FB70     		strb	r3, [r7, #3]
1142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPins;
1144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1402              		.loc 1 1148 0
 1403 0690 0023     		movs	r3, #0
 1404 0692 FB60     		str	r3, [r7, #12]
1149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1405              		.loc 1 1158 0
 1406 0694 7A68     		ldr	r2, [r7, #4]
 1407 0696 4FF41043 		mov	r3, #36864
 1408 069a C4F20D03 		movt	r3, 16397
 1409 069e 9A42     		cmp	r2, r3
 1410 06a0 01D1     		bne	.L70
1159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1411              		.loc 1 1160 0
 1412 06a2 0023     		movs	r3, #0
 1413 06a4 FB60     		str	r3, [r7, #12]
 1414              	.L70:
1161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1415              		.loc 1 1162 0
 1416 06a6 7A68     		ldr	r2, [r7, #4]
 1417 06a8 4FF42043 		mov	r3, #40960
 1418 06ac C4F20D03 		movt	r3, 16397
 1419 06b0 9A42     		cmp	r2, r3
 1420 06b2 01D1     		bne	.L71
1163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1421              		.loc 1 1164 0
 1422 06b4 0823     		movs	r3, #8
 1423 06b6 FB60     		str	r3, [r7, #12]
 1424              	.L71:
1165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1425              		.loc 1 1166 0
 1426 06b8 7A68     		ldr	r2, [r7, #4]
 1427 06ba 4FF43043 		mov	r3, #45056
 1428 06be C4F20D03 		movt	r3, 16397
 1429 06c2 9A42     		cmp	r2, r3
 1430 06c4 01D1     		bne	.L72
1167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1431              		.loc 1 1168 0
 1432 06c6 1023     		movs	r3, #16
 1433 06c8 FB60     		str	r3, [r7, #12]
 1434              	.L72:
1169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1435              		.loc 1 1170 0
 1436 06ca 7A68     		ldr	r2, [r7, #4]
 1437 06cc 4FF44043 		mov	r3, #49152
 1438 06d0 C4F20D03 		movt	r3, 16397
 1439 06d4 9A42     		cmp	r2, r3
 1440 06d6 01D1     		bne	.L73
1171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1441              		.loc 1 1172 0
 1442 06d8 1823     		movs	r3, #24
 1443 06da FB60     		str	r3, [r7, #12]
 1444              	.L73:
1173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1445              		.loc 1 1174 0
 1446 06dc FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1447 06de FB68     		ldr	r3, [r7, #12]
 1448 06e0 02FA03F3 		lsl	r3, r2, r3
 1449 06e4 BB60     		str	r3, [r7, #8]
1175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Disable the interrupts.
1178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_PI_IEN) &= ~(ui32IntPins);
 1450              		.loc 1 1179 0
 1451 06e6 7B68     		ldr	r3, [r7, #4]
 1452 06e8 03F5E263 		add	r3, r3, #1808
 1453 06ec 7A68     		ldr	r2, [r7, #4]
 1454 06ee 02F5E262 		add	r2, r2, #1808
 1455 06f2 1168     		ldr	r1, [r2]
 1456 06f4 BA68     		ldr	r2, [r7, #8]
 1457 06f6 D243     		mvns	r2, r2
 1458 06f8 0A40     		ands	r2, r2, r1
 1459 06fa 1A60     		str	r2, [r3]
1180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1460              		.loc 1 1180 0
 1461 06fc 1437     		adds	r7, r7, #20
 1462 06fe BD46     		mov	sp, r7
 1463              		@ sp needed
 1464 0700 5DF8047B 		ldr	r7, [sp], #4
 1465 0704 7047     		bx	lr
 1466              		.cfi_endproc
 1467              	.LFE23:
 1469 0706 00BF     		.align	2
 1470              		.global	GPIOPowIntStatus
 1471              		.thumb
 1472              		.thumb_func
 1474              	GPIOPowIntStatus:
 1475              	.LFB24:
1181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets power-up interrupt status for the specified GPIO port
1185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param bMasked specifies whether masked or raw interrupt status is
1188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returned.
1189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! If \e bMasked is set as \b true, then the masked interrupt status is
1191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returned; otherwise, the raw interrupt status is returned.
1192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns a bit-packed byte, where each bit that is set identifies
1194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! an active masked or raw interrupt, and where bit 0 of the byte
1195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Bits 31:8 should be ignored.
1197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
1200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntStatus(uint32_t ui32Port, bool bMasked)
1201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1476              		.loc 1 1201 0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 16
 1479              		@ frame_needed = 1, uses_anonymous_args = 0
 1480              		@ link register save eliminated.
 1481 0708 80B4     		push	{r7}
 1482              		.cfi_def_cfa_offset 4
 1483              		.cfi_offset 7, -4
 1484 070a 85B0     		sub	sp, sp, #20
 1485              		.cfi_def_cfa_offset 24
 1486 070c 00AF     		add	r7, sp, #0
 1487              		.cfi_def_cfa_register 7
 1488 070e 7860     		str	r0, [r7, #4]
 1489 0710 0B46     		mov	r3, r1
 1490 0712 FB70     		strb	r3, [r7, #3]
1202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1491              		.loc 1 1207 0
 1492 0714 0023     		movs	r3, #0
 1493 0716 FB60     		str	r3, [r7, #12]
1208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1494              		.loc 1 1215 0
 1495 0718 7A68     		ldr	r2, [r7, #4]
 1496 071a 4FF41043 		mov	r3, #36864
 1497 071e C4F20D03 		movt	r3, 16397
 1498 0722 9A42     		cmp	r2, r3
 1499 0724 01D1     		bne	.L75
1216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1500              		.loc 1 1217 0
 1501 0726 0023     		movs	r3, #0
 1502 0728 FB60     		str	r3, [r7, #12]
 1503              	.L75:
1218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1504              		.loc 1 1219 0
 1505 072a 7A68     		ldr	r2, [r7, #4]
 1506 072c 4FF42043 		mov	r3, #40960
 1507 0730 C4F20D03 		movt	r3, 16397
 1508 0734 9A42     		cmp	r2, r3
 1509 0736 01D1     		bne	.L76
1220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1510              		.loc 1 1221 0
 1511 0738 0823     		movs	r3, #8
 1512 073a FB60     		str	r3, [r7, #12]
 1513              	.L76:
1222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1514              		.loc 1 1223 0
 1515 073c 7A68     		ldr	r2, [r7, #4]
 1516 073e 4FF43043 		mov	r3, #45056
 1517 0742 C4F20D03 		movt	r3, 16397
 1518 0746 9A42     		cmp	r2, r3
 1519 0748 01D1     		bne	.L77
1224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1520              		.loc 1 1225 0
 1521 074a 1023     		movs	r3, #16
 1522 074c FB60     		str	r3, [r7, #12]
 1523              	.L77:
1226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1524              		.loc 1 1227 0
 1525 074e 7A68     		ldr	r2, [r7, #4]
 1526 0750 4FF44043 		mov	r3, #49152
 1527 0754 C4F20D03 		movt	r3, 16397
 1528 0758 9A42     		cmp	r2, r3
 1529 075a 01D1     		bne	.L78
1228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1530              		.loc 1 1229 0
 1531 075c 1823     		movs	r3, #24
 1532 075e FB60     		str	r3, [r7, #12]
 1533              	.L78:
1230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the interrupt status.
1233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(bMasked)
 1534              		.loc 1 1233 0
 1535 0760 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1536 0762 002B     		cmp	r3, #0
 1537 0764 08D0     		beq	.L79
1234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return((HWREG(ui32Port + GPIO_O_IRQ_DETECT_ACK) >> ui32PortOffset) &
 1538              		.loc 1 1235 0
 1539 0766 7B68     		ldr	r3, [r7, #4]
 1540 0768 03F5E363 		add	r3, r3, #1816
 1541 076c 1A68     		ldr	r2, [r3]
 1542 076e FB68     		ldr	r3, [r7, #12]
 1543 0770 22FA03F3 		lsr	r3, r2, r3
 1544 0774 DBB2     		uxtb	r3, r3
 1545 0776 07E0     		b	.L80
 1546              	.L79:
1236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                0xFF);
1237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     else
1239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return((HWREG(ui32Port + GPIO_O_IRQ_DETECT_UNMASK) >> ui32PortOffset) &
 1547              		.loc 1 1240 0
 1548 0778 7B68     		ldr	r3, [r7, #4]
 1549 077a 03F5E463 		add	r3, r3, #1824
 1550 077e 1A68     		ldr	r2, [r3]
 1551 0780 FB68     		ldr	r3, [r7, #12]
 1552 0782 22FA03F3 		lsr	r3, r2, r3
 1553 0786 DBB2     		uxtb	r3, r3
 1554              	.L80:
1241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                0xFF);
1242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1555              		.loc 1 1243 0
 1556 0788 1846     		mov	r0, r3
 1557 078a 1437     		adds	r7, r7, #20
 1558 078c BD46     		mov	sp, r7
 1559              		@ sp needed
 1560 078e 5DF8047B 		ldr	r7, [sp], #4
 1561 0792 7047     		bx	lr
 1562              		.cfi_endproc
 1563              	.LFE24:
 1565              		.align	2
 1566              		.global	GPIOPowIntClear
 1567              		.thumb
 1568              		.thumb_func
 1570              	GPIOPowIntClear:
 1571              	.LFB25:
1244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Clears the power-up interrupt for the specified pin(s)
1248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Clears the interrupt for the specified pin(s).
1253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntClear(uint32_t ui32Port, uint8_t ui8Pins)
1263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1572              		.loc 1 1263 0
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 16
 1575              		@ frame_needed = 1, uses_anonymous_args = 0
 1576              		@ link register save eliminated.
 1577 0794 80B4     		push	{r7}
 1578              		.cfi_def_cfa_offset 4
 1579              		.cfi_offset 7, -4
 1580 0796 85B0     		sub	sp, sp, #20
 1581              		.cfi_def_cfa_offset 24
 1582 0798 00AF     		add	r7, sp, #0
 1583              		.cfi_def_cfa_register 7
 1584 079a 7860     		str	r0, [r7, #4]
 1585 079c 0B46     		mov	r3, r1
 1586 079e FB70     		strb	r3, [r7, #3]
1264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPins;
1266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1587              		.loc 1 1270 0
 1588 07a0 0023     		movs	r3, #0
 1589 07a2 FB60     		str	r3, [r7, #12]
1271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1590              		.loc 1 1280 0
 1591 07a4 7A68     		ldr	r2, [r7, #4]
 1592 07a6 4FF41043 		mov	r3, #36864
 1593 07aa C4F20D03 		movt	r3, 16397
 1594 07ae 9A42     		cmp	r2, r3
 1595 07b0 01D1     		bne	.L82
1281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1596              		.loc 1 1282 0
 1597 07b2 0023     		movs	r3, #0
 1598 07b4 FB60     		str	r3, [r7, #12]
 1599              	.L82:
1283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1600              		.loc 1 1284 0
 1601 07b6 7A68     		ldr	r2, [r7, #4]
 1602 07b8 4FF42043 		mov	r3, #40960
 1603 07bc C4F20D03 		movt	r3, 16397
 1604 07c0 9A42     		cmp	r2, r3
 1605 07c2 01D1     		bne	.L83
1285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1606              		.loc 1 1286 0
 1607 07c4 0823     		movs	r3, #8
 1608 07c6 FB60     		str	r3, [r7, #12]
 1609              	.L83:
1287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1610              		.loc 1 1288 0
 1611 07c8 7A68     		ldr	r2, [r7, #4]
 1612 07ca 4FF43043 		mov	r3, #45056
 1613 07ce C4F20D03 		movt	r3, 16397
 1614 07d2 9A42     		cmp	r2, r3
 1615 07d4 01D1     		bne	.L84
1289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1616              		.loc 1 1290 0
 1617 07d6 1023     		movs	r3, #16
 1618 07d8 FB60     		str	r3, [r7, #12]
 1619              	.L84:
1291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1620              		.loc 1 1292 0
 1621 07da 7A68     		ldr	r2, [r7, #4]
 1622 07dc 4FF44043 		mov	r3, #49152
 1623 07e0 C4F20D03 		movt	r3, 16397
 1624 07e4 9A42     		cmp	r2, r3
 1625 07e6 01D1     		bne	.L85
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1626              		.loc 1 1294 0
 1627 07e8 1823     		movs	r3, #24
 1628 07ea FB60     		str	r3, [r7, #12]
 1629              	.L85:
1295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1630              		.loc 1 1296 0
 1631 07ec FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1632 07ee FB68     		ldr	r3, [r7, #12]
 1633 07f0 02FA03F3 		lsl	r3, r2, r3
 1634 07f4 BB60     		str	r3, [r7, #8]
1297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Clear the interrupts.
1300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IRQ_DETECT_ACK) |= ui32IntPins;
 1635              		.loc 1 1301 0
 1636 07f6 7B68     		ldr	r3, [r7, #4]
 1637 07f8 03F5E363 		add	r3, r3, #1816
 1638 07fc 7A68     		ldr	r2, [r7, #4]
 1639 07fe 02F5E362 		add	r2, r2, #1816
 1640 0802 1168     		ldr	r1, [r2]
 1641 0804 BA68     		ldr	r2, [r7, #8]
 1642 0806 0A43     		orrs	r2, r2, r1
 1643 0808 1A60     		str	r2, [r3]
1302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1644              		.loc 1 1302 0
 1645 080a 1437     		adds	r7, r7, #20
 1646 080c BD46     		mov	sp, r7
 1647              		@ sp needed
 1648 080e 5DF8047B 		ldr	r7, [sp], #4
 1649 0812 7047     		bx	lr
 1650              		.cfi_endproc
 1651              	.LFE25:
 1653              		.align	2
 1654              		.global	GPIOIntWakeupEnable
 1655              		.thumb
 1656              		.thumb_func
 1658              	GPIOIntWakeupEnable:
 1659              	.LFB26:
1303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Enable Wake Up Interrupt
1307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Config is the source to enable wake up on interrupt.
1309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function enables wake up on interrupt from the selected sources.
1311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The \e ui32Config argument must be one or the logical or of several of
1313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
1314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_PORT_A, \b GPIO_IWE_PORT_B, \b GPIO_IWE_PORT_C,
1316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_PORT_D, \b GPIO_IWE_USB,
1317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_SM_TIMER.
1318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOIntWakeupEnable(uint32_t ui32Config)
1324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1660              		.loc 1 1324 0
 1661              		.cfi_startproc
 1662              		@ args = 0, pretend = 0, frame = 8
 1663              		@ frame_needed = 1, uses_anonymous_args = 0
 1664              		@ link register save eliminated.
 1665 0814 80B4     		push	{r7}
 1666              		.cfi_def_cfa_offset 4
 1667              		.cfi_offset 7, -4
 1668 0816 83B0     		sub	sp, sp, #12
 1669              		.cfi_def_cfa_offset 16
 1670 0818 00AF     		add	r7, sp, #0
 1671              		.cfi_def_cfa_register 7
 1672 081a 7860     		str	r0, [r7, #4]
1325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32Config &
1326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****             (GPIO_IWE_PORT_A |
1327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_B |
1328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_C |
1329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_D |
1330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_USB |
1331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_SM_TIMER)) != 0);
1332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Enable Wakeup from selected Interrupt sources
1335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(SYS_CTRL_IWE) |= ui32Config;
 1673              		.loc 1 1336 0
 1674 081c 42F29403 		movw	r3, #8340
 1675 0820 C4F20D03 		movt	r3, 16397
 1676 0824 42F29402 		movw	r2, #8340
 1677 0828 C4F20D02 		movt	r2, 16397
 1678 082c 1168     		ldr	r1, [r2]
 1679 082e 7A68     		ldr	r2, [r7, #4]
 1680 0830 0A43     		orrs	r2, r2, r1
 1681 0832 1A60     		str	r2, [r3]
1337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1682              		.loc 1 1337 0
 1683 0834 0C37     		adds	r7, r7, #12
 1684 0836 BD46     		mov	sp, r7
 1685              		@ sp needed
 1686 0838 5DF8047B 		ldr	r7, [sp], #4
 1687 083c 7047     		bx	lr
 1688              		.cfi_endproc
 1689              	.LFE26:
 1691 083e 00BF     		.align	2
 1692              		.global	GPIOIntWakeupDisable
 1693              		.thumb
 1694              		.thumb_func
 1696              	GPIOIntWakeupDisable:
 1697              	.LFB27:
1338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Disable Wake Up Interrupt
1342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Config is the source to disable wake on interrupt from.
1344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function disables Wake up on interrupt from the selected sources.
1346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The \e ui32Config argument must be one or the logical or of several of
1348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
1349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_PORT_A, \b GPIO_IWE_PORT_B, \b GPIO_IWE_PORT_C,
1351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_PORT_D, \b GPIO_IWE_USB,
1352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_SM_TIMER,
1353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOIntWakeupDisable(uint32_t ui32Config)
1359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1698              		.loc 1 1359 0
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 8
 1701              		@ frame_needed = 1, uses_anonymous_args = 0
 1702              		@ link register save eliminated.
 1703 0840 80B4     		push	{r7}
 1704              		.cfi_def_cfa_offset 4
 1705              		.cfi_offset 7, -4
 1706 0842 83B0     		sub	sp, sp, #12
 1707              		.cfi_def_cfa_offset 16
 1708 0844 00AF     		add	r7, sp, #0
 1709              		.cfi_def_cfa_register 7
 1710 0846 7860     		str	r0, [r7, #4]
1360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32Config &
1361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****             (GPIO_IWE_PORT_A |
1362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_B |
1363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_C |
1364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_D |
1365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_USB |
1366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_SM_TIMER)) != 0);
1367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Disable Wakeup from selected Interrupt sources
1370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(SYS_CTRL_IWE) &= ~ui32Config;
 1711              		.loc 1 1371 0
 1712 0848 42F29403 		movw	r3, #8340
 1713 084c C4F20D03 		movt	r3, 16397
 1714 0850 42F29402 		movw	r2, #8340
 1715 0854 C4F20D02 		movt	r2, 16397
 1716 0858 1168     		ldr	r1, [r2]
 1717 085a 7A68     		ldr	r2, [r7, #4]
 1718 085c D243     		mvns	r2, r2
 1719 085e 0A40     		ands	r2, r2, r1
 1720 0860 1A60     		str	r2, [r3]
1372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1721              		.loc 1 1372 0
 1722 0862 0C37     		adds	r7, r7, #12
 1723 0864 BD46     		mov	sp, r7
 1724              		@ sp needed
 1725 0866 5DF8047B 		ldr	r7, [sp], #4
 1726 086a 7047     		bx	lr
 1727              		.cfi_endproc
 1728              	.LFE27:
 1730              	.Letext0:
 1731              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1732              		.file 3 "/usr/include/newlib/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 gpio.c
     /tmp/cc7kt6fs.s:18     .text:0000000000000000 $t
     /tmp/cc7kt6fs.s:23     .text:0000000000000000 GPIOGetIntNumber
     /tmp/cc7kt6fs.s:111    .text:0000000000000074 GPIODirModeSet
     /tmp/cc7kt6fs.s:199    .text:00000000000000ec GPIODirModeGet
     /tmp/cc7kt6fs.s:271    .text:0000000000000148 GPIOIntTypeSet
     /tmp/cc7kt6fs.s:387    .text:00000000000001f0 GPIOIntTypeGet
     /tmp/cc7kt6fs.s:478    .text:0000000000000268 GPIOPinIntEnable
     /tmp/cc7kt6fs.s:518    .text:0000000000000294 GPIOPinIntDisable
     /tmp/cc7kt6fs.s:559    .text:00000000000002c0 GPIOPinIntStatus
     /tmp/cc7kt6fs.s:606    .text:00000000000002f0 GPIOPinIntClear
     /tmp/cc7kt6fs.s:642    .text:0000000000000310 GPIOPortIntRegister
     /tmp/cc7kt6fs.s:682    .text:0000000000000338 GPIOPortIntUnregister
     /tmp/cc7kt6fs.s:720    .text:000000000000035c GPIOPinRead
     /tmp/cc7kt6fs.s:759    .text:0000000000000380 GPIOPinWrite
     /tmp/cc7kt6fs.s:800    .text:00000000000003a8 GPIOPinTypeGPIOInput
     /tmp/cc7kt6fs.s:842    .text:00000000000003d4 GPIOPinTypeGPIOOutput
     /tmp/cc7kt6fs.s:884    .text:0000000000000400 GPIOPinTypeI2C
     /tmp/cc7kt6fs.s:926    .text:000000000000042c GPIOPinTypeSSI
     /tmp/cc7kt6fs.s:968    .text:0000000000000458 GPIOPinTypeTimer
     /tmp/cc7kt6fs.s:1010   .text:0000000000000484 GPIOPinTypeUARTInput
     /tmp/cc7kt6fs.s:1052   .text:00000000000004b0 GPIOPinTypeUARTOutput
     /tmp/cc7kt6fs.s:1094   .text:00000000000004dc GPIOPowIntTypeSet
     /tmp/cc7kt6fs.s:1200   .text:000000000000057c GPIOPowIntTypeGet
     /tmp/cc7kt6fs.s:1297   .text:0000000000000604 GPIOPowIntEnable
     /tmp/cc7kt6fs.s:1385   .text:0000000000000684 GPIOPowIntDisable
     /tmp/cc7kt6fs.s:1474   .text:0000000000000708 GPIOPowIntStatus
     /tmp/cc7kt6fs.s:1570   .text:0000000000000794 GPIOPowIntClear
     /tmp/cc7kt6fs.s:1658   .text:0000000000000814 GPIOIntWakeupEnable
     /tmp/cc7kt6fs.s:1696   .text:0000000000000840 GPIOIntWakeupDisable
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.08074afb2ccc9da754fae8e3ee0f577b
                           .group:0000000000000000 wm4.hw_gpio.h.39.abbe53cff9a4c1fb5f1c34960fe1e7aa
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.gpio.h.41.604fa3d9f70fb140a75ada50bffeaeff
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.ioc.h.41.7444fe7016a1d045dd9fea497d615b28

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
IOCPadConfigSet
