   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"pka.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	PKAEnableInt
  20              		.thumb
  21              		.thumb_func
  23              	PKAEnableInt:
  24              	.LFB0:
  25              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Filename:       pka.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Revised:        $Date: 2012-10-01 11:15:04 -0700 (Mon, 01 Oct 2012) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Revision:       $Revision: 31660 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Description:    Driver for the PKA HW module.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Copyright (C) 2013 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \addtogroup pka_driver
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include <headers/hw_ints.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include <headers/hw_memmap.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include <headers/hw_pka.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include <headers/hw_types.h>
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include "interrupt.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include "pka.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include "sys_ctrl.h"
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include "debug.h"
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // Macro definition for NULL
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #ifndef NULL
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #define NULL                    ((void*)0)
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #endif
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // Define for the maximum curve size supported by the PKA module in 32 bit
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // word.
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // \note PKA hardware module can support upto 384 bit curve size due to the
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //       2K of PKA RAM.
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #define PKA_MAX_CURVE_SIZE_32_BIT_WORD \
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                                 12
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // Define for the maximum length of the big number supported by the PKA module
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // in 32 bit word.
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #define PKA_MAX_LEN_IN_32_BIT_WORD \
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                                 PKA_MAX_CURVE_SIZE_32_BIT_WORD
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // Define for the PKA RAM size.
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //****************************************************************************
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #define PKA_RAM_SIZE            2000
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Enables the PKA interrupt.
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function enables the PKA interrupt.
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAEnableInt(void)
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
  26              		.loc 1 105 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Enable the PKA interrupt.
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntEnable(INT_PKA);
  36              		.loc 1 109 0
  37 0004 A020     		movs	r0, #160
  38 0006 FFF7FEFF 		bl	IntEnable
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
  39              		.loc 1 110 0
  40 000a 80BD     		pop	{r7, pc}
  41              		.cfi_endproc
  42              	.LFE0:
  44              		.align	2
  45              		.global	PKADisableInt
  46              		.thumb
  47              		.thumb_func
  49              	PKADisableInt:
  50              	.LFB1:
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Disables the PKA interrupt.
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function disables the PKA interrupt.
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKADisableInt( void )
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
  51              		.loc 1 123 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55 000c 80B5     		push	{r7, lr}
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 000e 00AF     		add	r7, sp, #0
  60              		.cfi_def_cfa_register 7
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Disables the PKA interrupt.
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntDisable(INT_PKA);
  61              		.loc 1 127 0
  62 0010 A020     		movs	r0, #160
  63 0012 FFF7FEFF 		bl	IntDisable
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
  64              		.loc 1 128 0
  65 0016 80BD     		pop	{r7, pc}
  66              		.cfi_endproc
  67              	.LFE1:
  69              		.align	2
  70              		.global	PKAClearInt
  71              		.thumb
  72              		.thumb_func
  74              	PKAClearInt:
  75              	.LFB2:
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Clears the PKA interrupt.
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function unpends PKA interrupt.  This will cause any previously
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! generated PKA interrupts that have not been handled yet to be discarded.
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAClearInt(void)
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
  76              		.loc 1 142 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0018 80B5     		push	{r7, lr}
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 7, -8
  83              		.cfi_offset 14, -4
  84 001a 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // UnPends the PKA interrupt.
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntPendClear(INT_PKA);
  86              		.loc 1 146 0
  87 001c A020     		movs	r0, #160
  88 001e FFF7FEFF 		bl	IntPendClear
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
  89              		.loc 1 147 0
  90 0022 80BD     		pop	{r7, pc}
  91              		.cfi_endproc
  92              	.LFE2:
  94              		.align	2
  95              		.global	PKARegInt
  96              		.thumb
  97              		.thumb_func
  99              	PKARegInt:
 100              	.LFB3:
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Registers an interrupt handler for PKA interrupt.
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pfnHandler is a pointer to the function to be called when the
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! PKA interrupt occurs.
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function does the actual registering of the interrupt handler.  This
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! will not enable the PKA interrupt in the interrupt controller, a call to
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the function \sa PKAEnableInt() is needed to enable the PKA interrupt.
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \sa IntRegister() for important information about registering interrupt
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! handlers.
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKARegInt(void (*pfnHandler)(void))
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 101              		.loc 1 168 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 8
 104              		@ frame_needed = 1, uses_anonymous_args = 0
 105 0024 80B5     		push	{r7, lr}
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 7, -8
 108              		.cfi_offset 14, -4
 109 0026 82B0     		sub	sp, sp, #8
 110              		.cfi_def_cfa_offset 16
 111 0028 00AF     		add	r7, sp, #0
 112              		.cfi_def_cfa_register 7
 113 002a 7860     		str	r0, [r7, #4]
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Register the interrupt handler.
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntRegister(INT_PKA, pfnHandler);
 114              		.loc 1 172 0
 115 002c A020     		movs	r0, #160
 116 002e 7968     		ldr	r1, [r7, #4]
 117 0030 FFF7FEFF 		bl	IntRegister
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 118              		.loc 1 173 0
 119 0034 0837     		adds	r7, r7, #8
 120 0036 BD46     		mov	sp, r7
 121              		@ sp needed
 122 0038 80BD     		pop	{r7, pc}
 123              		.cfi_endproc
 124              	.LFE3:
 126 003a 00BF     		.align	2
 127              		.global	PKAUnRegInt
 128              		.thumb
 129              		.thumb_func
 131              	PKAUnRegInt:
 132              	.LFB4:
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Unregisters an interrupt handler for the PKA interrupt.
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function deregisters the interrupt service routine.  This function
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! will not disable the interrupt and an explicit call to \sa PKADisableInt()
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! is needed.
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAUnRegInt(void)
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 133              		.loc 1 188 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 137 003c 80B5     		push	{r7, lr}
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 7, -8
 140              		.cfi_offset 14, -4
 141 003e 00AF     		add	r7, sp, #0
 142              		.cfi_def_cfa_register 7
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Unregister the interrupt handler.
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntUnregister(INT_PKA);
 143              		.loc 1 192 0
 144 0040 A020     		movs	r0, #160
 145 0042 FFF7FEFF 		bl	IntUnregister
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 146              		.loc 1 193 0
 147 0046 80BD     		pop	{r7, pc}
 148              		.cfi_endproc
 149              	.LFE4:
 151              		.align	2
 152              		.global	PKAGetOpsStatus
 153              		.thumb
 154              		.thumb_func
 156              	PKAGetOpsStatus:
 157              	.LFB5:
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Provides the PKA operation status.
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function provides information on whether any PKA operation is in
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! progress or not. This function allows to check the PKA operation status
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! before starting any new PKA operation.
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns: 
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_INPRG if the PKA operation is in progress.
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_NOT_INPRG if the PKA operation is not in progress.
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAGetOpsStatus(void)
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 158              		.loc 1 210 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163 0048 80B4     		push	{r7}
 164              		.cfi_def_cfa_offset 4
 165              		.cfi_offset 7, -4
 166 004a 00AF     		add	r7, sp, #0
 167              		.cfi_def_cfa_register 7
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 168              		.loc 1 211 0
 169 004c 44F21C03 		movw	r3, #16412
 170 0050 C4F20043 		movt	r3, 17408
 171 0054 1B68     		ldr	r3, [r3]
 172 0056 03F40043 		and	r3, r3, #32768
 173 005a 002B     		cmp	r3, #0
 174 005c 01D0     		beq	.L7
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 175              		.loc 1 213 0
 176 005e 0723     		movs	r3, #7
 177 0060 00E0     		b	.L8
 178              	.L7:
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     else
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_NOT_INPRG);
 179              		.loc 1 217 0
 180 0062 0823     		movs	r3, #8
 181              	.L8:
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 182              		.loc 1 219 0
 183 0064 1846     		mov	r0, r3
 184 0066 BD46     		mov	sp, r7
 185              		@ sp needed
 186 0068 5DF8047B 		ldr	r7, [sp], #4
 187 006c 7047     		bx	lr
 188              		.cfi_endproc
 189              	.LFE5:
 191 006e 00BF     		.align	2
 192              		.global	PKABigNumModStart
 193              		.thumb
 194              		.thumb_func
 196              	PKABigNumModStart:
 197              	.LFB6:
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the big number modulus operation.
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BNum is the pointer to the big number on which modulo operation
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! needs to be carried out.
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8BNSize is the size of the big number \sa pui32BNum in 32-bit
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! word.
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Modulus is the pointer to the divisor.
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8ModSize is the size of the divisor \sa pui32Modulus.
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the modulo operation on the big num \sa pui32BNum
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! using the divisor \sa pui32Modulus.  The PKA RAM location where the result
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! will be available is stored in \sa pui32ResultVector.
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumModStart(uint32_t* pui32BNum, uint8_t ui8BNSize,
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                   uint32_t* pui32Modulus, uint8_t ui8ModSize,
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                   uint32_t* pui32ResultVector)
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 198              		.loc 1 248 0
 199              		.cfi_startproc
 200              		@ args = 4, pretend = 0, frame = 32
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 203 0070 80B4     		push	{r7}
 204              		.cfi_def_cfa_offset 4
 205              		.cfi_offset 7, -4
 206 0072 89B0     		sub	sp, sp, #36
 207              		.cfi_def_cfa_offset 40
 208 0074 00AF     		add	r7, sp, #0
 209              		.cfi_def_cfa_register 7
 210 0076 F860     		str	r0, [r7, #12]
 211 0078 7A60     		str	r2, [r7, #4]
 212 007a 0A46     		mov	r2, r1
 213 007c FA72     		strb	r2, [r7, #11]
 214 007e BB72     		strb	r3, [r7, #10]
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint8_t extraBuf;
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BNum);
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Modulus);
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // make sure no operation is in progress.
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 215              		.loc 1 263 0
 216 0080 44F21C03 		movw	r3, #16412
 217 0084 C4F20043 		movt	r3, 17408
 218 0088 1B68     		ldr	r3, [r3]
 219 008a 03F40043 		and	r3, r3, #32768
 220 008e 002B     		cmp	r3, #0
 221 0090 01D0     		beq	.L10
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 222              		.loc 1 265 0
 223 0092 0723     		movs	r3, #7
 224 0094 79E0     		b	.L11
 225              	.L10:
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // calculate the extra buffer requirement.
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     extraBuf = 2 + ui8ModSize % 2;
 226              		.loc 1 271 0
 227 0096 BB7A     		ldrb	r3, [r7, #10]
 228 0098 03F00103 		and	r3, r3, #1
 229 009c DBB2     		uxtb	r3, r3
 230 009e 0233     		adds	r3, r3, #2
 231 00a0 FB76     		strb	r3, [r7, #27]
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 232              		.loc 1 273 0
 233 00a2 0023     		movs	r3, #0
 234 00a4 7B61     		str	r3, [r7, #20]
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the number will be stored.
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >>2;
 235              		.loc 1 279 0
 236 00a6 4FF48043 		mov	r3, #16384
 237 00aa C4F20043 		movt	r3, 17408
 238 00ae 7A69     		ldr	r2, [r7, #20]
 239 00b0 9208     		lsrs	r2, r2, #2
 240 00b2 1A60     		str	r2, [r3]
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the number in PKA RAM
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8BNSize; i++)
 241              		.loc 1 284 0
 242 00b4 0023     		movs	r3, #0
 243 00b6 FB61     		str	r3, [r7, #28]
 244 00b8 11E0     		b	.L12
 245              	.L13:
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BNum[i];
 246              		.loc 1 286 0 discriminator 2
 247 00ba FB69     		ldr	r3, [r7, #28]
 248 00bc 9B00     		lsls	r3, r3, #2
 249 00be 1A46     		mov	r2, r3
 250 00c0 7B69     		ldr	r3, [r7, #20]
 251 00c2 1344     		add	r3, r3, r2
 252 00c4 03F18843 		add	r3, r3, #1140850688
 253 00c8 03F5C043 		add	r3, r3, #24576
 254 00cc FA69     		ldr	r2, [r7, #28]
 255 00ce 9200     		lsls	r2, r2, #2
 256 00d0 F968     		ldr	r1, [r7, #12]
 257 00d2 0A44     		add	r2, r2, r1
 258 00d4 1268     		ldr	r2, [r2]
 259 00d6 1A60     		str	r2, [r3]
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 260              		.loc 1 284 0 discriminator 2
 261 00d8 FB69     		ldr	r3, [r7, #28]
 262 00da 0133     		adds	r3, r3, #1
 263 00dc FB61     		str	r3, [r7, #28]
 264              	.L12:
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 265              		.loc 1 284 0 is_stmt 0 discriminator 1
 266 00de FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 267 00e0 FB69     		ldr	r3, [r7, #28]
 268 00e2 9A42     		cmp	r2, r3
 269 00e4 E9DC     		bgt	.L13
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // determine the offset for the next data input.
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + ui8BNSize % 2);
 270              		.loc 1 292 0 is_stmt 1
 271 00e6 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 272 00e8 03F00102 		and	r2, r3, #1
 273 00ec FB69     		ldr	r3, [r7, #28]
 274 00ee 1344     		add	r3, r3, r2
 275 00f0 9B00     		lsls	r3, r3, #2
 276 00f2 7A69     		ldr	r2, [r7, #20]
 277 00f4 1344     		add	r3, r3, r2
 278 00f6 7B61     		str	r3, [r7, #20]
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the divisor will be stored.
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 279              		.loc 1 298 0
 280 00f8 44F20403 		movw	r3, #16388
 281 00fc C4F20043 		movt	r3, 17408
 282 0100 7A69     		ldr	r2, [r7, #20]
 283 0102 9208     		lsrs	r2, r2, #2
 284 0104 1A60     		str	r2, [r3]
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the divisor in PKA RAM.
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8ModSize;  i++)
 285              		.loc 1 303 0
 286 0106 0023     		movs	r3, #0
 287 0108 FB61     		str	r3, [r7, #28]
 288 010a 11E0     		b	.L14
 289              	.L15:
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32Modulus[i];
 290              		.loc 1 305 0 discriminator 2
 291 010c FB69     		ldr	r3, [r7, #28]
 292 010e 9B00     		lsls	r3, r3, #2
 293 0110 1A46     		mov	r2, r3
 294 0112 7B69     		ldr	r3, [r7, #20]
 295 0114 1344     		add	r3, r3, r2
 296 0116 03F18843 		add	r3, r3, #1140850688
 297 011a 03F5C043 		add	r3, r3, #24576
 298 011e FA69     		ldr	r2, [r7, #28]
 299 0120 9200     		lsls	r2, r2, #2
 300 0122 7968     		ldr	r1, [r7, #4]
 301 0124 0A44     		add	r2, r2, r1
 302 0126 1268     		ldr	r2, [r2]
 303 0128 1A60     		str	r2, [r3]
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 304              		.loc 1 303 0 discriminator 2
 305 012a FB69     		ldr	r3, [r7, #28]
 306 012c 0133     		adds	r3, r3, #1
 307 012e FB61     		str	r3, [r7, #28]
 308              	.L14:
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 309              		.loc 1 303 0 is_stmt 0 discriminator 1
 310 0130 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 311 0132 FB69     		ldr	r3, [r7, #28]
 312 0134 9A42     		cmp	r2, r3
 313 0136 E9DC     		bgt	.L15
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // determine the offset for the next data.
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 314              		.loc 1 311 0 is_stmt 1
 315 0138 FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 316 013a FB69     		ldr	r3, [r7, #28]
 317 013c 1344     		add	r3, r3, r2
 318 013e 9B00     		lsls	r3, r3, #2
 319 0140 7A69     		ldr	r2, [r7, #20]
 320 0142 1344     		add	r3, r3, r2
 321 0144 7B61     		str	r3, [r7, #20]
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector address location.
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 322              		.loc 1 316 0
 323 0146 7B69     		ldr	r3, [r7, #20]
 324 0148 03F18843 		add	r3, r3, #1140850688
 325 014c 03F5C043 		add	r3, r3, #24576
 326 0150 BA6A     		ldr	r2, [r7, #40]
 327 0152 1360     		str	r3, [r2]
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load C ptr with the result location in PKA RAM
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 328              		.loc 1 321 0
 329 0154 44F20803 		movw	r3, #16392
 330 0158 C4F20043 		movt	r3, 17408
 331 015c 7A69     		ldr	r2, [r7, #20]
 332 015e 9208     		lsrs	r2, r2, #2
 333 0160 1A60     		str	r2, [r3]
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load A length registers with Big number length in 32 bit words.
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BNSize;
 334              		.loc 1 326 0
 335 0162 44F21003 		movw	r3, #16400
 336 0166 C4F20043 		movt	r3, 17408
 337 016a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 338 016c 1A60     		str	r2, [r3]
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load B length registers  Divisor length in 32-bit words.
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8ModSize;
 339              		.loc 1 331 0
 340 016e 44F21403 		movw	r3, #16404
 341 0172 C4F20043 		movt	r3, 17408
 342 0176 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 343 0178 1A60     		str	r2, [r3]
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Start the PKCP modulo operation by setting the PKA Function register.
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_MODULO);
 344              		.loc 1 336 0
 345 017a 44F21C03 		movw	r3, #16412
 346 017e C4F20043 		movt	r3, 17408
 347 0182 4FF40242 		mov	r2, #33280
 348 0186 1A60     		str	r2, [r3]
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 349              		.loc 1 338 0
 350 0188 0023     		movs	r3, #0
 351              	.L11:
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 352              		.loc 1 339 0
 353 018a 1846     		mov	r0, r3
 354 018c 2437     		adds	r7, r7, #36
 355 018e BD46     		mov	sp, r7
 356              		@ sp needed
 357 0190 5DF8047B 		ldr	r7, [sp], #4
 358 0194 7047     		bx	lr
 359              		.cfi_endproc
 360              	.LFE6:
 362 0196 00BF     		.align	2
 363              		.global	PKABigNumModGetResult
 364              		.thumb
 365              		.thumb_func
 367              	PKABigNumModGetResult:
 368              	.LFB7:
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the big number modulus operation.
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! be stored.
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8Size is the size of the provided buffer in 32 bit size word.
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKABigNumModStart().
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of the big number modulus operation which was
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! previously started using the function \sa PKABigNumModStart().
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful.
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW, if the \e ui8Size is less than the length
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! of the result.
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumModGetResult(uint32_t* pui32ResultBuf,uint8_t ui8Size,
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                       uint32_t ui32ResVectorLoc)
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 369              		.loc 1 366 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 32
 372              		@ frame_needed = 1, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 374 0198 80B4     		push	{r7}
 375              		.cfi_def_cfa_offset 4
 376              		.cfi_offset 7, -4
 377 019a 89B0     		sub	sp, sp, #36
 378              		.cfi_def_cfa_offset 40
 379 019c 00AF     		add	r7, sp, #0
 380              		.cfi_def_cfa_register 7
 381 019e F860     		str	r0, [r7, #12]
 382 01a0 0B46     		mov	r3, r1
 383 01a2 7A60     		str	r2, [r7, #4]
 384 01a4 FB72     		strb	r3, [r7, #11]
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // verify that the operation is complete.
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 385              		.loc 1 381 0
 386 01a6 44F21C03 		movw	r3, #16412
 387 01aa C4F20043 		movt	r3, 17408
 388 01ae 1B68     		ldr	r3, [r3]
 389 01b0 03F40043 		and	r3, r3, #32768
 390 01b4 002B     		cmp	r3, #0
 391 01b6 01D0     		beq	.L17
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 392              		.loc 1 383 0
 393 01b8 0723     		movs	r3, #7
 394 01ba 34E0     		b	.L18
 395              	.L17:
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //  Get the MSW register value.
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     regMSWVal = HWREG(PKA_DIVMSW);
 396              		.loc 1 389 0
 397 01bc 44F22803 		movw	r3, #16424
 398 01c0 C4F20043 		movt	r3, 17408
 399 01c4 1B68     		ldr	r3, [r3]
 400 01c6 BB61     		str	r3, [r7, #24]
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(regMSWVal & PKA_DIVMSW_RESULT_IS_ZERO)
 401              		.loc 1 394 0
 402 01c8 BB69     		ldr	r3, [r7, #24]
 403 01ca 03F40043 		and	r3, r3, #32768
 404 01ce 002B     		cmp	r3, #0
 405 01d0 01D0     		beq	.L19
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 406              		.loc 1 396 0
 407 01d2 0423     		movs	r3, #4
 408 01d4 27E0     		b	.L18
 409              	.L19:
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the length of the result.
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     len = ((regMSWVal & PKA_DIVMSW_MSW_ADDRESS_M) + 1) -
 410              		.loc 1 402 0
 411 01d6 BB69     		ldr	r3, [r7, #24]
 412 01d8 C3F30A02 		ubfx	r2, r3, #0, #11
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 413              		.loc 1 403 0
 414 01dc 7B68     		ldr	r3, [r7, #4]
 415 01de 03F13C43 		add	r3, r3, #-1140850688
 416 01e2 A3F5C043 		sub	r3, r3, #24576
 417 01e6 9B08     		lsrs	r3, r3, #2
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 418              		.loc 1 402 0
 419 01e8 D31A     		subs	r3, r2, r3
 420 01ea 0133     		adds	r3, r3, #1
 421 01ec 7B61     		str	r3, [r7, #20]
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // If the size of the buffer provided is less than the result length than
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // return error.
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(ui8Size < len)
 422              		.loc 1 409 0
 423 01ee FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 424 01f0 7B69     		ldr	r3, [r7, #20]
 425 01f2 9A42     		cmp	r2, r3
 426 01f4 01D2     		bcs	.L20
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 427              		.loc 1 411 0
 428 01f6 0323     		movs	r3, #3
 429 01f8 15E0     		b	.L18
 430              	.L20:
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // copy the result from vector C into the pResult.
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < len; i++)
 431              		.loc 1 417 0
 432 01fa 0023     		movs	r3, #0
 433 01fc FB61     		str	r3, [r7, #28]
 434 01fe 0DE0     		b	.L21
 435              	.L22:
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 436              		.loc 1 419 0 discriminator 2
 437 0200 FB69     		ldr	r3, [r7, #28]
 438 0202 9B00     		lsls	r3, r3, #2
 439 0204 FA68     		ldr	r2, [r7, #12]
 440 0206 1344     		add	r3, r3, r2
 441 0208 FA69     		ldr	r2, [r7, #28]
 442 020a 9200     		lsls	r2, r2, #2
 443 020c 1146     		mov	r1, r2
 444 020e 7A68     		ldr	r2, [r7, #4]
 445 0210 0A44     		add	r2, r2, r1
 446 0212 1268     		ldr	r2, [r2]
 447 0214 1A60     		str	r2, [r3]
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 448              		.loc 1 417 0 discriminator 2
 449 0216 FB69     		ldr	r3, [r7, #28]
 450 0218 0133     		adds	r3, r3, #1
 451 021a FB61     		str	r3, [r7, #28]
 452              	.L21:
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 453              		.loc 1 417 0 is_stmt 0 discriminator 1
 454 021c FA69     		ldr	r2, [r7, #28]
 455 021e 7B69     		ldr	r3, [r7, #20]
 456 0220 9A42     		cmp	r2, r3
 457 0222 EDD3     		bcc	.L22
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 458              		.loc 1 422 0 is_stmt 1
 459 0224 0023     		movs	r3, #0
 460              	.L18:
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** } // PKABigNumModGetResult()
 461              		.loc 1 423 0
 462 0226 1846     		mov	r0, r3
 463 0228 2437     		adds	r7, r7, #36
 464 022a BD46     		mov	sp, r7
 465              		@ sp needed
 466 022c 5DF8047B 		ldr	r7, [sp], #4
 467 0230 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE7:
 471 0232 00BF     		.align	2
 472              		.global	PKABigNumCmpStart
 473              		.thumb
 474              		.thumb_func
 476              	PKABigNumCmpStart:
 477              	.LFB8:
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the comparison of two big numbers.
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BNum1 is the pointer to the first big number.
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BNum2 is the pointer to the second big number.
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8Size is the size of the big number in 32 bit size word.
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the comparison of two big numbers pointed by
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \e pui32BNum1 and \e pui32BNum2.
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Note this function expects the size of the two big numbers equal.
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumCmpStart(uint32_t* pui32BNum1, uint32_t* pui32BNum2, uint8_t ui8Size)
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 478              		.loc 1 445 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 24
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482              		@ link register save eliminated.
 483 0234 80B4     		push	{r7}
 484              		.cfi_def_cfa_offset 4
 485              		.cfi_offset 7, -4
 486 0236 87B0     		sub	sp, sp, #28
 487              		.cfi_def_cfa_offset 32
 488 0238 00AF     		add	r7, sp, #0
 489              		.cfi_def_cfa_register 7
 490 023a F860     		str	r0, [r7, #12]
 491 023c B960     		str	r1, [r7, #8]
 492 023e 1346     		mov	r3, r2
 493 0240 FB71     		strb	r3, [r7, #7]
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BNum1);
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BNum2);
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 494              		.loc 1 455 0
 495 0242 0023     		movs	r3, #0
 496 0244 3B61     		str	r3, [r7, #16]
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
 459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 497              		.loc 1 460 0
 498 0246 44F21C03 		movw	r3, #16412
 499 024a C4F20043 		movt	r3, 17408
 500 024e 1B68     		ldr	r3, [r3]
 501 0250 03F40043 		and	r3, r3, #32768
 502 0254 002B     		cmp	r3, #0
 503 0256 01D0     		beq	.L24
 461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 504              		.loc 1 462 0
 505 0258 0723     		movs	r3, #7
 506 025a 56E0     		b	.L25
 507              	.L24:
 463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the first big number will be stored.
 468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 508              		.loc 1 469 0
 509 025c 4FF48043 		mov	r3, #16384
 510 0260 C4F20043 		movt	r3, 17408
 511 0264 3A69     		ldr	r2, [r7, #16]
 512 0266 9208     		lsrs	r2, r2, #2
 513 0268 1A60     		str	r2, [r3]
 470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the first big number in PKA RAM.
 473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8Size; i++)
 514              		.loc 1 474 0
 515 026a 0023     		movs	r3, #0
 516 026c 7B61     		str	r3, [r7, #20]
 517 026e 11E0     		b	.L26
 518              	.L27:
 475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum1[i];
 519              		.loc 1 476 0 discriminator 2
 520 0270 7B69     		ldr	r3, [r7, #20]
 521 0272 9B00     		lsls	r3, r3, #2
 522 0274 1A46     		mov	r2, r3
 523 0276 3B69     		ldr	r3, [r7, #16]
 524 0278 1344     		add	r3, r3, r2
 525 027a 03F18843 		add	r3, r3, #1140850688
 526 027e 03F5C043 		add	r3, r3, #24576
 527 0282 7A69     		ldr	r2, [r7, #20]
 528 0284 9200     		lsls	r2, r2, #2
 529 0286 F968     		ldr	r1, [r7, #12]
 530 0288 0A44     		add	r2, r2, r1
 531 028a 1268     		ldr	r2, [r2]
 532 028c 1A60     		str	r2, [r3]
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 533              		.loc 1 474 0 discriminator 2
 534 028e 7B69     		ldr	r3, [r7, #20]
 535 0290 0133     		adds	r3, r3, #1
 536 0292 7B61     		str	r3, [r7, #20]
 537              	.L26:
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 538              		.loc 1 474 0 is_stmt 0 discriminator 1
 539 0294 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 540 0296 7B69     		ldr	r3, [r7, #20]
 541 0298 9A42     		cmp	r2, r3
 542 029a E9DC     		bgt	.L27
 477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next pointer.
 481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + ui8Size % 2);
 543              		.loc 1 482 0 is_stmt 1
 544 029c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 545 029e 03F00102 		and	r2, r3, #1
 546 02a2 7B69     		ldr	r3, [r7, #20]
 547 02a4 1344     		add	r3, r3, r2
 548 02a6 9B00     		lsls	r3, r3, #2
 549 02a8 3A69     		ldr	r2, [r7, #16]
 550 02aa 1344     		add	r3, r3, r2
 551 02ac 3B61     		str	r3, [r7, #16]
 483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the second big number will be stored.
 487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 552              		.loc 1 488 0
 553 02ae 44F20403 		movw	r3, #16388
 554 02b2 C4F20043 		movt	r3, 17408
 555 02b6 3A69     		ldr	r2, [r7, #16]
 556 02b8 9208     		lsrs	r2, r2, #2
 557 02ba 1A60     		str	r2, [r3]
 489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the second big number in PKA RAM.
 492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8Size;  i++)
 558              		.loc 1 493 0
 559 02bc 0023     		movs	r3, #0
 560 02be 7B61     		str	r3, [r7, #20]
 561 02c0 11E0     		b	.L28
 562              	.L29:
 494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum2[i];
 563              		.loc 1 495 0 discriminator 2
 564 02c2 7B69     		ldr	r3, [r7, #20]
 565 02c4 9B00     		lsls	r3, r3, #2
 566 02c6 1A46     		mov	r2, r3
 567 02c8 3B69     		ldr	r3, [r7, #16]
 568 02ca 1344     		add	r3, r3, r2
 569 02cc 03F18843 		add	r3, r3, #1140850688
 570 02d0 03F5C043 		add	r3, r3, #24576
 571 02d4 7A69     		ldr	r2, [r7, #20]
 572 02d6 9200     		lsls	r2, r2, #2
 573 02d8 B968     		ldr	r1, [r7, #8]
 574 02da 0A44     		add	r2, r2, r1
 575 02dc 1268     		ldr	r2, [r2]
 576 02de 1A60     		str	r2, [r3]
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 577              		.loc 1 493 0 discriminator 2
 578 02e0 7B69     		ldr	r3, [r7, #20]
 579 02e2 0133     		adds	r3, r3, #1
 580 02e4 7B61     		str	r3, [r7, #20]
 581              	.L28:
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 582              		.loc 1 493 0 is_stmt 0 discriminator 1
 583 02e6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 584 02e8 7B69     		ldr	r3, [r7, #20]
 585 02ea 9A42     		cmp	r2, r3
 586 02ec E9DC     		bgt	.L29
 496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load length registers in 32 bit word size.
 500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8Size;
 587              		.loc 1 501 0 is_stmt 1
 588 02ee 44F21003 		movw	r3, #16400
 589 02f2 C4F20043 		movt	r3, 17408
 590 02f6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 591 02f8 1A60     		str	r2, [r3]
 502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the PKA Function register for the Compare operation
 505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // and start the operation.
 506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_COMPARE);
 592              		.loc 1 507 0
 593 02fa 44F21C03 		movw	r3, #16412
 594 02fe C4F20043 		movt	r3, 17408
 595 0302 4FF40442 		mov	r2, #33792
 596 0306 1A60     		str	r2, [r3]
 508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 597              		.loc 1 509 0
 598 0308 0023     		movs	r3, #0
 599              	.L25:
 510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 600              		.loc 1 510 0
 601 030a 1846     		mov	r0, r3
 602 030c 1C37     		adds	r7, r7, #28
 603 030e BD46     		mov	sp, r7
 604              		@ sp needed
 605 0310 5DF8047B 		ldr	r7, [sp], #4
 606 0314 7047     		bx	lr
 607              		.cfi_endproc
 608              	.LFE8:
 610 0316 00BF     		.align	2
 611              		.global	PKABigNumCmpGetResult
 612              		.thumb
 613              		.thumb_func
 615              	PKABigNumCmpGetResult:
 616              	.LFB9:
 511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the comparison operation of two big numbers.
 515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function provides the results of the comparison of two big numbers
 517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which was started using the \sa PKABigNumCmpStart().
 518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
 520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG if the operation is in progress.
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the two big numbers are equal.
 522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_A_GR_B  if the first number is greater than the second.
 523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_A_LT_B if the first number is less than the second.
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumCmpGetResult(void)
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 617              		.loc 1 528 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 8
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 622 0318 80B4     		push	{r7}
 623              		.cfi_def_cfa_offset 4
 624              		.cfi_offset 7, -4
 625 031a 83B0     		sub	sp, sp, #12
 626              		.cfi_def_cfa_offset 16
 627 031c 00AF     		add	r7, sp, #0
 628              		.cfi_def_cfa_register 7
 529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     tPKAStatus status;
 530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // verify that the operation is complete.
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 629              		.loc 1 534 0
 630 031e 44F21C03 		movw	r3, #16412
 631 0322 C4F20043 		movt	r3, 17408
 632 0326 1B68     		ldr	r3, [r3]
 633 0328 03F40043 		and	r3, r3, #32768
 634 032c 002B     		cmp	r3, #0
 635 032e 03D0     		beq	.L31
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         status = PKA_STATUS_OPERATION_INPRG;
 636              		.loc 1 536 0
 637 0330 0723     		movs	r3, #7
 638 0332 FB71     		strb	r3, [r7, #7]
 537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (status);
 639              		.loc 1 537 0
 640 0334 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 641 0336 17E0     		b	.L32
 642              	.L31:
 538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the COMPARE register.
 542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     switch(HWREG(PKA_COMPARE))
 643              		.loc 1 543 0
 644 0338 44F22003 		movw	r3, #16416
 645 033c C4F20043 		movt	r3, 17408
 646 0340 1B68     		ldr	r3, [r3]
 647 0342 022B     		cmp	r3, #2
 648 0344 09D0     		beq	.L34
 649 0346 042B     		cmp	r3, #4
 650 0348 04D0     		beq	.L35
 651 034a 012B     		cmp	r3, #1
 652 034c 08D1     		bne	.L38
 544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         case PKA_COMPARE_A_EQUALS_B:
 546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             status = PKA_STATUS_SUCCESS;
 653              		.loc 1 546 0
 654 034e 0023     		movs	r3, #0
 655 0350 FB71     		strb	r3, [r7, #7]
 547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             break;
 656              		.loc 1 547 0
 657 0352 08E0     		b	.L37
 658              	.L35:
 548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         case PKA_COMPARE_A_GREATER_THAN_B:
 550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             status = PKA_STATUS_A_GR_B;
 659              		.loc 1 550 0
 660 0354 0523     		movs	r3, #5
 661 0356 FB71     		strb	r3, [r7, #7]
 551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             break;
 662              		.loc 1 551 0
 663 0358 05E0     		b	.L37
 664              	.L34:
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         case PKA_COMPARE_A_LESS_THAN_B:
 554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             status = PKA_STATUS_A_LT_B;
 665              		.loc 1 554 0
 666 035a 0623     		movs	r3, #6
 667 035c FB71     		strb	r3, [r7, #7]
 555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             break;
 668              		.loc 1 555 0
 669 035e 02E0     		b	.L37
 670              	.L38:
 556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         default:
 558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             status = PKA_STATUS_FAILURE;
 671              		.loc 1 558 0
 672 0360 0123     		movs	r3, #1
 673 0362 FB71     		strb	r3, [r7, #7]
 559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             break;
 674              		.loc 1 559 0
 675 0364 00BF     		nop
 676              	.L37:
 560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (status);
 677              		.loc 1 562 0
 678 0366 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 679              	.L32:
 563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 680              		.loc 1 563 0
 681 0368 1846     		mov	r0, r3
 682 036a 0C37     		adds	r7, r7, #12
 683 036c BD46     		mov	sp, r7
 684              		@ sp needed
 685 036e 5DF8047B 		ldr	r7, [sp], #4
 686 0372 7047     		bx	lr
 687              		.cfi_endproc
 688              	.LFE9:
 690              		.align	2
 691              		.global	PKABigNumInvModStart
 692              		.thumb
 693              		.thumb_func
 695              	PKABigNumInvModStart:
 696              	.LFB10:
 564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the big number inverse modulo operation.
 568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BNum is the pointer to the buffer containing the big number
 570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! (dividend).
 571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8BNSize is the size of the \e pui32BNum in 32 bit word.
 572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Modulus is the pointer to the buffer containing the divisor.
 573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8Size is the size of the divisor in 32 bit word.
 574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the the inverse modulo operation on \e pui32BNum
 578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! using the divisor \e pui32Modulus.
 579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumInvModStart(uint32_t* pui32BNum, uint8_t ui8BNSize,
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                      uint32_t* pui32Modulus, uint8_t ui8Size,
 589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                      uint32_t* pui32ResultVector)
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 697              		.loc 1 590 0
 698              		.cfi_startproc
 699              		@ args = 4, pretend = 0, frame = 24
 700              		@ frame_needed = 1, uses_anonymous_args = 0
 701              		@ link register save eliminated.
 702 0374 80B4     		push	{r7}
 703              		.cfi_def_cfa_offset 4
 704              		.cfi_offset 7, -4
 705 0376 87B0     		sub	sp, sp, #28
 706              		.cfi_def_cfa_offset 32
 707 0378 00AF     		add	r7, sp, #0
 708              		.cfi_def_cfa_register 7
 709 037a F860     		str	r0, [r7, #12]
 710 037c 7A60     		str	r2, [r7, #4]
 711 037e 0A46     		mov	r2, r1
 712 0380 FA72     		strb	r2, [r7, #11]
 713 0382 BB72     		strb	r3, [r7, #10]
 591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BNum);
 598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Modulus);
 599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 714              		.loc 1 601 0
 715 0384 0023     		movs	r3, #0
 716 0386 3B61     		str	r3, [r7, #16]
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
 605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 717              		.loc 1 606 0
 718 0388 44F21C03 		movw	r3, #16412
 719 038c C4F20043 		movt	r3, 17408
 720 0390 1B68     		ldr	r3, [r3]
 721 0392 03F40043 		and	r3, r3, #32768
 722 0396 002B     		cmp	r3, #0
 723 0398 01D0     		beq	.L40
 607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 724              		.loc 1 608 0
 725 039a 0723     		movs	r3, #7
 726 039c 73E0     		b	.L41
 727              	.L40:
 609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the number will be stored.
 614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >>2;
 728              		.loc 1 615 0
 729 039e 4FF48043 		mov	r3, #16384
 730 03a2 C4F20043 		movt	r3, 17408
 731 03a6 3A69     		ldr	r2, [r7, #16]
 732 03a8 9208     		lsrs	r2, r2, #2
 733 03aa 1A60     		str	r2, [r3]
 616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the \e pui32BNum number in PKA RAM.
 619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8BNSize; i++)
 734              		.loc 1 620 0
 735 03ac 0023     		movs	r3, #0
 736 03ae 7B61     		str	r3, [r7, #20]
 737 03b0 11E0     		b	.L42
 738              	.L43:
 621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum[i];
 739              		.loc 1 622 0 discriminator 2
 740 03b2 7B69     		ldr	r3, [r7, #20]
 741 03b4 9B00     		lsls	r3, r3, #2
 742 03b6 1A46     		mov	r2, r3
 743 03b8 3B69     		ldr	r3, [r7, #16]
 744 03ba 1344     		add	r3, r3, r2
 745 03bc 03F18843 		add	r3, r3, #1140850688
 746 03c0 03F5C043 		add	r3, r3, #24576
 747 03c4 7A69     		ldr	r2, [r7, #20]
 748 03c6 9200     		lsls	r2, r2, #2
 749 03c8 F968     		ldr	r1, [r7, #12]
 750 03ca 0A44     		add	r2, r2, r1
 751 03cc 1268     		ldr	r2, [r2]
 752 03ce 1A60     		str	r2, [r3]
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 753              		.loc 1 620 0 discriminator 2
 754 03d0 7B69     		ldr	r3, [r7, #20]
 755 03d2 0133     		adds	r3, r3, #1
 756 03d4 7B61     		str	r3, [r7, #20]
 757              	.L42:
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 758              		.loc 1 620 0 is_stmt 0 discriminator 1
 759 03d6 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 760 03d8 7B69     		ldr	r3, [r7, #20]
 761 03da 9A42     		cmp	r2, r3
 762 03dc E9DC     		bgt	.L43
 623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for next data.
 627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + ui8BNSize % 2);
 763              		.loc 1 628 0 is_stmt 1
 764 03de FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 765 03e0 03F00102 		and	r2, r3, #1
 766 03e4 7B69     		ldr	r3, [r7, #20]
 767 03e6 1344     		add	r3, r3, r2
 768 03e8 9B00     		lsls	r3, r3, #2
 769 03ea 3A69     		ldr	r2, [r7, #16]
 770 03ec 1344     		add	r3, r3, r2
 771 03ee 3B61     		str	r3, [r7, #16]
 629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the modulus will be stored.
 633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 772              		.loc 1 634 0
 773 03f0 44F20403 		movw	r3, #16388
 774 03f4 C4F20043 		movt	r3, 17408
 775 03f8 3A69     		ldr	r2, [r7, #16]
 776 03fa 9208     		lsrs	r2, r2, #2
 777 03fc 1A60     		str	r2, [r3]
 635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the \e pui32Modulus divisor in PKA RAM.
 638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8Size;  i++)
 778              		.loc 1 639 0
 779 03fe 0023     		movs	r3, #0
 780 0400 7B61     		str	r3, [r7, #20]
 781 0402 11E0     		b	.L44
 782              	.L45:
 640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32Modulus[i];
 783              		.loc 1 641 0 discriminator 2
 784 0404 7B69     		ldr	r3, [r7, #20]
 785 0406 9B00     		lsls	r3, r3, #2
 786 0408 1A46     		mov	r2, r3
 787 040a 3B69     		ldr	r3, [r7, #16]
 788 040c 1344     		add	r3, r3, r2
 789 040e 03F18843 		add	r3, r3, #1140850688
 790 0412 03F5C043 		add	r3, r3, #24576
 791 0416 7A69     		ldr	r2, [r7, #20]
 792 0418 9200     		lsls	r2, r2, #2
 793 041a 7968     		ldr	r1, [r7, #4]
 794 041c 0A44     		add	r2, r2, r1
 795 041e 1268     		ldr	r2, [r2]
 796 0420 1A60     		str	r2, [r3]
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 797              		.loc 1 639 0 discriminator 2
 798 0422 7B69     		ldr	r3, [r7, #20]
 799 0424 0133     		adds	r3, r3, #1
 800 0426 7B61     		str	r3, [r7, #20]
 801              	.L44:
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 802              		.loc 1 639 0 is_stmt 0 discriminator 1
 803 0428 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 804 042a 7B69     		ldr	r3, [r7, #20]
 805 042c 9A42     		cmp	r2, r3
 806 042e E9DC     		bgt	.L45
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for result data.
 646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + ui8Size % 2);
 807              		.loc 1 647 0 is_stmt 1
 808 0430 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 809 0432 03F00102 		and	r2, r3, #1
 810 0436 7B69     		ldr	r3, [r7, #20]
 811 0438 1344     		add	r3, r3, r2
 812 043a 9B00     		lsls	r3, r3, #2
 813 043c 3A69     		ldr	r2, [r7, #16]
 814 043e 1344     		add	r3, r3, r2
 815 0440 3B61     		str	r3, [r7, #16]
 648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector address location.
 651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 816              		.loc 1 652 0
 817 0442 3B69     		ldr	r3, [r7, #16]
 818 0444 03F18843 		add	r3, r3, #1140850688
 819 0448 03F5C043 		add	r3, r3, #24576
 820 044c 3A6A     		ldr	r2, [r7, #32]
 821 044e 1360     		str	r3, [r2]
 653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_DPTR) ) = offset >> 2;
 822              		.loc 1 657 0
 823 0450 44F20C03 		movw	r3, #16396
 824 0454 C4F20043 		movt	r3, 17408
 825 0458 3A69     		ldr	r2, [r7, #16]
 826 045a 9208     		lsrs	r2, r2, #2
 827 045c 1A60     		str	r2, [r3]
 658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the respective length registers.
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BNSize;
 828              		.loc 1 662 0
 829 045e 44F21003 		movw	r3, #16400
 830 0462 C4F20043 		movt	r3, 17408
 831 0466 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 832 0468 1A60     		str	r2, [r3]
 663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8Size;
 833              		.loc 1 663 0
 834 046a 44F21403 		movw	r3, #16404
 835 046e C4F20043 		movt	r3, 17408
 836 0472 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 837 0474 1A60     		str	r2, [r3]
 664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // set the PKA function to InvMod operation and the start the operation.
 667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000F000;
 838              		.loc 1 668 0
 839 0476 44F21C03 		movw	r3, #16412
 840 047a C4F20043 		movt	r3, 17408
 841 047e 4FF47042 		mov	r2, #61440
 842 0482 1A60     		str	r2, [r3]
 669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 843              		.loc 1 670 0
 844 0484 0023     		movs	r3, #0
 845              	.L41:
 671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 846              		.loc 1 671 0
 847 0486 1846     		mov	r0, r3
 848 0488 1C37     		adds	r7, r7, #28
 849 048a BD46     		mov	sp, r7
 850              		@ sp needed
 851 048c 5DF8047B 		ldr	r7, [sp], #4
 852 0490 7047     		bx	lr
 853              		.cfi_endproc
 854              	.LFE10:
 856 0492 00BF     		.align	2
 857              		.global	PKABigNumInvModGetResult
 858              		.thumb
 859              		.thumb_func
 861              	PKABigNumInvModGetResult:
 862              	.LFB11:
 672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the big number inverse modulo operation.
 676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to be
 678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! stored.
 679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8Size is the size of the provided buffer in 32 bit ui8Size
 680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! word.
 681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKABigNumInvModStart().
 683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of the big number inverse modulo operation
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! previously started using the function \sa PKABigNumInvModStart().
 686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
 688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
 689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
 690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
 691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
 693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! then the result. 
 694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumInvModGetResult(uint32_t* pui32ResultBuf, uint8_t ui8Size,
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                          uint32_t ui32ResVectorLoc)
 699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 863              		.loc 1 699 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 32
 866              		@ frame_needed = 1, uses_anonymous_args = 0
 867              		@ link register save eliminated.
 868 0494 80B4     		push	{r7}
 869              		.cfi_def_cfa_offset 4
 870              		.cfi_offset 7, -4
 871 0496 89B0     		sub	sp, sp, #36
 872              		.cfi_def_cfa_offset 40
 873 0498 00AF     		add	r7, sp, #0
 874              		.cfi_def_cfa_register 7
 875 049a F860     		str	r0, [r7, #12]
 876 049c 0B46     		mov	r3, r1
 877 049e 7A60     		str	r2, [r7, #4]
 878 04a0 FB72     		strb	r3, [r7, #11]
 700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
 701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
 702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is complete.
 713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 879              		.loc 1 714 0
 880 04a2 44F21C03 		movw	r3, #16412
 881 04a6 C4F20043 		movt	r3, 17408
 882 04aa 1B68     		ldr	r3, [r3]
 883 04ac 03F40043 		and	r3, r3, #32768
 884 04b0 002B     		cmp	r3, #0
 885 04b2 01D0     		beq	.L47
 715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 886              		.loc 1 716 0
 887 04b4 0723     		movs	r3, #7
 888 04b6 34E0     		b	.L48
 889              	.L47:
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the MSW register value.
 721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 890              		.loc 1 722 0
 891 04b8 44F22403 		movw	r3, #16420
 892 04bc C4F20043 		movt	r3, 17408
 893 04c0 1B68     		ldr	r3, [r3]
 894 04c2 BB61     		str	r3, [r7, #24]
 723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 895              		.loc 1 727 0
 896 04c4 BB69     		ldr	r3, [r7, #24]
 897 04c6 03F40043 		and	r3, r3, #32768
 898 04ca 002B     		cmp	r3, #0
 899 04cc 01D0     		beq	.L49
 728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 900              		.loc 1 729 0
 901 04ce 0423     		movs	r3, #4
 902 04d0 27E0     		b	.L48
 903              	.L49:
 730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the length of the result
 734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 904              		.loc 1 735 0
 905 04d2 BB69     		ldr	r3, [r7, #24]
 906 04d4 C3F30A02 		ubfx	r2, r3, #0, #11
 736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 907              		.loc 1 736 0
 908 04d8 7B68     		ldr	r3, [r7, #4]
 909 04da 03F13C43 		add	r3, r3, #-1140850688
 910 04de A3F5C043 		sub	r3, r3, #24576
 911 04e2 9B08     		lsrs	r3, r3, #2
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 912              		.loc 1 735 0
 913 04e4 D31A     		subs	r3, r2, r3
 914 04e6 0133     		adds	r3, r3, #1
 915 04e8 7B61     		str	r3, [r7, #20]
 737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check if the provided buffer length is adequate to store the result
 740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // data.
 741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(ui8Size < len)
 916              		.loc 1 742 0
 917 04ea FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 918 04ec 7B69     		ldr	r3, [r7, #20]
 919 04ee 9A42     		cmp	r2, r3
 920 04f0 01D2     		bcs	.L50
 743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 921              		.loc 1 744 0
 922 04f2 0323     		movs	r3, #3
 923 04f4 15E0     		b	.L48
 924              	.L50:
 745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result from vector C into the \e pui32ResultBuf.
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < len; i++)
 925              		.loc 1 749 0
 926 04f6 0023     		movs	r3, #0
 927 04f8 FB61     		str	r3, [r7, #28]
 928 04fa 0DE0     		b	.L51
 929              	.L52:
 750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 930              		.loc 1 751 0 discriminator 2
 931 04fc FB69     		ldr	r3, [r7, #28]
 932 04fe 9B00     		lsls	r3, r3, #2
 933 0500 FA68     		ldr	r2, [r7, #12]
 934 0502 1344     		add	r3, r3, r2
 935 0504 FA69     		ldr	r2, [r7, #28]
 936 0506 9200     		lsls	r2, r2, #2
 937 0508 1146     		mov	r1, r2
 938 050a 7A68     		ldr	r2, [r7, #4]
 939 050c 0A44     		add	r2, r2, r1
 940 050e 1268     		ldr	r2, [r2]
 941 0510 1A60     		str	r2, [r3]
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 942              		.loc 1 749 0 discriminator 2
 943 0512 FB69     		ldr	r3, [r7, #28]
 944 0514 0133     		adds	r3, r3, #1
 945 0516 FB61     		str	r3, [r7, #28]
 946              	.L51:
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 947              		.loc 1 749 0 is_stmt 0 discriminator 1
 948 0518 FA69     		ldr	r2, [r7, #28]
 949 051a 7B69     		ldr	r3, [r7, #20]
 950 051c 9A42     		cmp	r2, r3
 951 051e EDD3     		bcc	.L52
 752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 952              		.loc 1 754 0 is_stmt 1
 953 0520 0023     		movs	r3, #0
 954              	.L48:
 755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 955              		.loc 1 755 0
 956 0522 1846     		mov	r0, r3
 957 0524 2437     		adds	r7, r7, #36
 958 0526 BD46     		mov	sp, r7
 959              		@ sp needed
 960 0528 5DF8047B 		ldr	r7, [sp], #4
 961 052c 7047     		bx	lr
 962              		.cfi_endproc
 963              	.LFE11:
 965 052e 00BF     		.align	2
 966              		.global	PKABigNumMultiplyStart
 967              		.thumb
 968              		.thumb_func
 970              	PKABigNumMultiplyStart:
 971              	.LFB12:
 756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the big number multiplication.
 760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Xplicand is the pointer to the buffer containing the big
 762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! number multiplicand.
 763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8XplicandSize is the size of the multiplicand in 32-bit word.
 764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Xplier is the pointer to the buffer containing the big
 765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! number multiplier.
 766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8XplierSize is the size of the multiplier in 32-bit word.
 767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
 769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the multiplication of the two big numbers.
 771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumMultiplyStart(uint32_t* pui32Xplicand, uint8_t ui8XplicandSize,
 780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                        uint32_t* pui32Xplier, uint8_t ui8XplierSize,
 781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                        uint32_t* pui32ResultVector)
 782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 972              		.loc 1 782 0
 973              		.cfi_startproc
 974              		@ args = 4, pretend = 0, frame = 24
 975              		@ frame_needed = 1, uses_anonymous_args = 0
 976              		@ link register save eliminated.
 977 0530 80B4     		push	{r7}
 978              		.cfi_def_cfa_offset 4
 979              		.cfi_offset 7, -4
 980 0532 87B0     		sub	sp, sp, #28
 981              		.cfi_def_cfa_offset 32
 982 0534 00AF     		add	r7, sp, #0
 983              		.cfi_def_cfa_register 7
 984 0536 F860     		str	r0, [r7, #12]
 985 0538 7A60     		str	r2, [r7, #4]
 986 053a 0A46     		mov	r2, r1
 987 053c FA72     		strb	r2, [r7, #11]
 988 053e BB72     		strb	r3, [r7, #10]
 783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
 788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Xplicand);
 790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Xplier);
 791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 989              		.loc 1 793 0
 990 0540 0023     		movs	r3, #0
 991 0542 3B61     		str	r3, [r7, #16]
 794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
 797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 992              		.loc 1 798 0
 993 0544 44F21C03 		movw	r3, #16412
 994 0548 C4F20043 		movt	r3, 17408
 995 054c 1B68     		ldr	r3, [r3]
 996 054e 03F40043 		and	r3, r3, #32768
 997 0552 002B     		cmp	r3, #0
 998 0554 01D0     		beq	.L54
 799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 999              		.loc 1 800 0
 1000 0556 0723     		movs	r3, #7
 1001 0558 73E0     		b	.L55
 1002              	.L54:
 801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the multiplicand will be stored.
 806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 1003              		.loc 1 807 0
 1004 055a 4FF48043 		mov	r3, #16384
 1005 055e C4F20043 		movt	r3, 17408
 1006 0562 3A69     		ldr	r2, [r7, #16]
 1007 0564 9208     		lsrs	r2, r2, #2
 1008 0566 1A60     		str	r2, [r3]
 808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the multiplicand in PKA RAM.
 811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8XplicandSize; i++)
 1009              		.loc 1 812 0
 1010 0568 0023     		movs	r3, #0
 1011 056a 7B61     		str	r3, [r7, #20]
 1012 056c 11E0     		b	.L56
 1013              	.L57:
 813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Xplicand;
 1014              		.loc 1 814 0 discriminator 2
 1015 056e 7B69     		ldr	r3, [r7, #20]
 1016 0570 9B00     		lsls	r3, r3, #2
 1017 0572 1A46     		mov	r2, r3
 1018 0574 3B69     		ldr	r3, [r7, #16]
 1019 0576 1344     		add	r3, r3, r2
 1020 0578 03F18843 		add	r3, r3, #1140850688
 1021 057c 03F5C043 		add	r3, r3, #24576
 1022 0580 FA68     		ldr	r2, [r7, #12]
 1023 0582 1268     		ldr	r2, [r2]
 1024 0584 1A60     		str	r2, [r3]
 815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32Xplicand++;
 1025              		.loc 1 815 0 discriminator 2
 1026 0586 FB68     		ldr	r3, [r7, #12]
 1027 0588 0433     		adds	r3, r3, #4
 1028 058a FB60     		str	r3, [r7, #12]
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1029              		.loc 1 812 0 discriminator 2
 1030 058c 7B69     		ldr	r3, [r7, #20]
 1031 058e 0133     		adds	r3, r3, #1
 1032 0590 7B61     		str	r3, [r7, #20]
 1033              	.L56:
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1034              		.loc 1 812 0 is_stmt 0 discriminator 1
 1035 0592 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1036 0594 7B69     		ldr	r3, [r7, #20]
 1037 0596 9A42     		cmp	r2, r3
 1038 0598 E9DC     		bgt	.L57
 816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
 820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ui8XplicandSize % 2));
 1039              		.loc 1 821 0 is_stmt 1
 1040 059a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1041 059c 03F00102 		and	r2, r3, #1
 1042 05a0 7B69     		ldr	r3, [r7, #20]
 1043 05a2 1344     		add	r3, r3, r2
 1044 05a4 9B00     		lsls	r3, r3, #2
 1045 05a6 3A69     		ldr	r2, [r7, #16]
 1046 05a8 1344     		add	r3, r3, r2
 1047 05aa 3B61     		str	r3, [r7, #16]
 822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 823:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 824:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 825:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the multiplier will be stored.
 826:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 827:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 1048              		.loc 1 827 0
 1049 05ac 44F20403 		movw	r3, #16388
 1050 05b0 C4F20043 		movt	r3, 17408
 1051 05b4 3A69     		ldr	r2, [r7, #16]
 1052 05b6 9208     		lsrs	r2, r2, #2
 1053 05b8 1A60     		str	r2, [r3]
 828:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 829:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 830:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the multiplier in PKA RAM.
 831:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8XplierSize; i++)
 1054              		.loc 1 832 0
 1055 05ba 0023     		movs	r3, #0
 1056 05bc 7B61     		str	r3, [r7, #20]
 1057 05be 11E0     		b	.L58
 1058              	.L59:
 833:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 834:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = *pui32Xplier;
 1059              		.loc 1 834 0 discriminator 2
 1060 05c0 7B69     		ldr	r3, [r7, #20]
 1061 05c2 9B00     		lsls	r3, r3, #2
 1062 05c4 1A46     		mov	r2, r3
 1063 05c6 3B69     		ldr	r3, [r7, #16]
 1064 05c8 1344     		add	r3, r3, r2
 1065 05ca 03F18843 		add	r3, r3, #1140850688
 1066 05ce 03F5C043 		add	r3, r3, #24576
 1067 05d2 7A68     		ldr	r2, [r7, #4]
 1068 05d4 1268     		ldr	r2, [r2]
 1069 05d6 1A60     		str	r2, [r3]
 835:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32Xplier++;
 1070              		.loc 1 835 0 discriminator 2
 1071 05d8 7B68     		ldr	r3, [r7, #4]
 1072 05da 0433     		adds	r3, r3, #4
 1073 05dc 7B60     		str	r3, [r7, #4]
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1074              		.loc 1 832 0 discriminator 2
 1075 05de 7B69     		ldr	r3, [r7, #20]
 1076 05e0 0133     		adds	r3, r3, #1
 1077 05e2 7B61     		str	r3, [r7, #20]
 1078              	.L58:
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1079              		.loc 1 832 0 is_stmt 0 discriminator 1
 1080 05e4 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1081 05e6 7B69     		ldr	r3, [r7, #20]
 1082 05e8 9A42     		cmp	r2, r3
 1083 05ea E9DC     		bgt	.L59
 836:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 837:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 838:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
 840:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 841:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ui8XplierSize % 2));
 1084              		.loc 1 841 0 is_stmt 1
 1085 05ec BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1086 05ee 03F00102 		and	r2, r3, #1
 1087 05f2 7B69     		ldr	r3, [r7, #20]
 1088 05f4 1344     		add	r3, r3, r2
 1089 05f6 9B00     		lsls	r3, r3, #2
 1090 05f8 3A69     		ldr	r2, [r7, #16]
 1091 05fa 1344     		add	r3, r3, r2
 1092 05fc 3B61     		str	r3, [r7, #16]
 842:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 843:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 844:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector address location.
 845:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 846:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 1093              		.loc 1 846 0
 1094 05fe 3B69     		ldr	r3, [r7, #16]
 1095 0600 03F18843 		add	r3, r3, #1140850688
 1096 0604 03F5C043 		add	r3, r3, #24576
 1097 0608 3A6A     		ldr	r2, [r7, #32]
 1098 060a 1360     		str	r3, [r2]
 847:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 848:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 849:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load C ptr with the result location in PKA RAM.
 850:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 851:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 1099              		.loc 1 851 0
 1100 060c 44F20803 		movw	r3, #16392
 1101 0610 C4F20043 		movt	r3, 17408
 1102 0614 3A69     		ldr	r2, [r7, #16]
 1103 0616 9208     		lsrs	r2, r2, #2
 1104 0618 1A60     		str	r2, [r3]
 852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 853:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 854:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the respective length registers.
 855:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 856:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8XplicandSize;
 1105              		.loc 1 856 0
 1106 061a 44F21003 		movw	r3, #16400
 1107 061e C4F20043 		movt	r3, 17408
 1108 0622 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1109 0624 1A60     		str	r2, [r3]
 857:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8XplierSize;
 1110              		.loc 1 857 0
 1111 0626 44F21403 		movw	r3, #16404
 1112 062a C4F20043 		movt	r3, 17408
 1113 062e BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1114 0630 1A60     		str	r2, [r3]
 858:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 859:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 860:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the PKA function to the multiplication and start it.
 861:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 862:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_MULTIPLY);
 1115              		.loc 1 862 0
 1116 0632 44F21C03 		movw	r3, #16412
 1117 0636 C4F20043 		movt	r3, 17408
 1118 063a 48F20102 		movw	r2, #32769
 1119 063e 1A60     		str	r2, [r3]
 863:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 864:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1120              		.loc 1 864 0
 1121 0640 0023     		movs	r3, #0
 1122              	.L55:
 865:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1123              		.loc 1 865 0
 1124 0642 1846     		mov	r0, r3
 1125 0644 1C37     		adds	r7, r7, #28
 1126 0646 BD46     		mov	sp, r7
 1127              		@ sp needed
 1128 0648 5DF8047B 		ldr	r7, [sp], #4
 1129 064c 7047     		bx	lr
 1130              		.cfi_endproc
 1131              	.LFE12:
 1133 064e 00BF     		.align	2
 1134              		.global	PKABigNumMultGetResult
 1135              		.thumb
 1136              		.thumb_func
 1138              	PKABigNumMultGetResult:
 1139              	.LFB13:
 866:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 867:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 868:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 869:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the results of the big number multiplication.
 870:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 871:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to be
 872:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! stored.
 873:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Len is the address of the variable containing the length of the
 874:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! buffer.  After the operation, the actual length of the resultant is stored
 875:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! at this address.
 876:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 877:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKABigNumMultiplyStart().
 878:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 879:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of the multiplication of two big numbers
 880:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! operation previously started using the function \sa
 881:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! PKABigNumMultiplyStart().
 882:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 883:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
 884:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
 885:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
 886:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
 887:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 888:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
 889:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
 890:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! then the length of the result. 
 891:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 892:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 894:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumMultGetResult(uint32_t* pui32ResultBuf, uint32_t* pui32Len,
 895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                        uint32_t ui32ResVectorLoc)
 896:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1140              		.loc 1 896 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 32
 1143              		@ frame_needed = 1, uses_anonymous_args = 0
 1144              		@ link register save eliminated.
 1145 0650 80B4     		push	{r7}
 1146              		.cfi_def_cfa_offset 4
 1147              		.cfi_offset 7, -4
 1148 0652 89B0     		sub	sp, sp, #36
 1149              		.cfi_def_cfa_offset 40
 1150 0654 00AF     		add	r7, sp, #0
 1151              		.cfi_def_cfa_register 7
 1152 0656 F860     		str	r0, [r7, #12]
 1153 0658 B960     		str	r1, [r7, #8]
 1154 065a 7A60     		str	r2, [r7, #4]
 897:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
 898:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
 899:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 900:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 901:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 902:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for arguments.
 903:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 904:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 905:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Len);
 906:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 907:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 908:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 909:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 910:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is complete.
 911:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 912:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1155              		.loc 1 912 0
 1156 065c 44F21C03 		movw	r3, #16412
 1157 0660 C4F20043 		movt	r3, 17408
 1158 0664 1B68     		ldr	r3, [r3]
 1159 0666 03F40043 		and	r3, r3, #32768
 1160 066a 002B     		cmp	r3, #0
 1161 066c 01D0     		beq	.L61
 913:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 914:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1162              		.loc 1 914 0
 1163 066e 0723     		movs	r3, #7
 1164 0670 39E0     		b	.L62
 1165              	.L61:
 915:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 916:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 917:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 918:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the MSW register value.
 919:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 920:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 1166              		.loc 1 920 0
 1167 0672 44F22403 		movw	r3, #16420
 1168 0676 C4F20043 		movt	r3, 17408
 1169 067a 1B68     		ldr	r3, [r3]
 1170 067c BB61     		str	r3, [r7, #24]
 921:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 922:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 923:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 924:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 925:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 1171              		.loc 1 925 0
 1172 067e BB69     		ldr	r3, [r7, #24]
 1173 0680 03F40043 		and	r3, r3, #32768
 1174 0684 002B     		cmp	r3, #0
 1175 0686 01D0     		beq	.L63
 926:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 927:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 1176              		.loc 1 927 0
 1177 0688 0423     		movs	r3, #4
 1178 068a 2CE0     		b	.L62
 1179              	.L63:
 928:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 929:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 930:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 931:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the length of the result.
 932:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 1180              		.loc 1 933 0
 1181 068c BB69     		ldr	r3, [r7, #24]
 1182 068e C3F30A02 		ubfx	r2, r3, #0, #11
 934:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1183              		.loc 1 934 0
 1184 0692 7B68     		ldr	r3, [r7, #4]
 1185 0694 03F13C43 		add	r3, r3, #-1140850688
 1186 0698 A3F5C043 		sub	r3, r3, #24576
 1187 069c 9B08     		lsrs	r3, r3, #2
 933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1188              		.loc 1 933 0
 1189 069e D31A     		subs	r3, r2, r3
 1190 06a0 0133     		adds	r3, r3, #1
 1191 06a2 7B61     		str	r3, [r7, #20]
 935:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 936:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 937:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure that the length of the supplied result buffer is adequate
 938:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // to store the resultant.
 939:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 940:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(*pui32Len < len)
 1192              		.loc 1 940 0
 1193 06a4 BB68     		ldr	r3, [r7, #8]
 1194 06a6 1A68     		ldr	r2, [r3]
 1195 06a8 7B69     		ldr	r3, [r7, #20]
 1196 06aa 9A42     		cmp	r2, r3
 1197 06ac 01D2     		bcs	.L64
 941:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 942:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 1198              		.loc 1 942 0
 1199 06ae 0323     		movs	r3, #3
 1200 06b0 19E0     		b	.L62
 1201              	.L64:
 943:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 944:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 945:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 946:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the resultant length.
 947:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32Len = len;
 1202              		.loc 1 948 0
 1203 06b2 BB68     		ldr	r3, [r7, #8]
 1204 06b4 7A69     		ldr	r2, [r7, #20]
 1205 06b6 1A60     		str	r2, [r3]
 949:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 950:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 951:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result from vector C into the pResult.
 952:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < *pui32Len; i++)
 1206              		.loc 1 953 0
 1207 06b8 0023     		movs	r3, #0
 1208 06ba FB61     		str	r3, [r7, #28]
 1209 06bc 0DE0     		b	.L65
 1210              	.L66:
 954:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 955:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 1211              		.loc 1 955 0 discriminator 2
 1212 06be FB69     		ldr	r3, [r7, #28]
 1213 06c0 9B00     		lsls	r3, r3, #2
 1214 06c2 FA68     		ldr	r2, [r7, #12]
 1215 06c4 1344     		add	r3, r3, r2
 1216 06c6 FA69     		ldr	r2, [r7, #28]
 1217 06c8 9200     		lsls	r2, r2, #2
 1218 06ca 1146     		mov	r1, r2
 1219 06cc 7A68     		ldr	r2, [r7, #4]
 1220 06ce 0A44     		add	r2, r2, r1
 1221 06d0 1268     		ldr	r2, [r2]
 1222 06d2 1A60     		str	r2, [r3]
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1223              		.loc 1 953 0 discriminator 2
 1224 06d4 FB69     		ldr	r3, [r7, #28]
 1225 06d6 0133     		adds	r3, r3, #1
 1226 06d8 FB61     		str	r3, [r7, #28]
 1227              	.L65:
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1228              		.loc 1 953 0 is_stmt 0 discriminator 1
 1229 06da FA69     		ldr	r2, [r7, #28]
 1230 06dc BB68     		ldr	r3, [r7, #8]
 1231 06de 1B68     		ldr	r3, [r3]
 1232 06e0 9A42     		cmp	r2, r3
 1233 06e2 ECD3     		bcc	.L66
 956:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 958:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1234              		.loc 1 958 0 is_stmt 1
 1235 06e4 0023     		movs	r3, #0
 1236              	.L62:
 959:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1237              		.loc 1 959 0
 1238 06e6 1846     		mov	r0, r3
 1239 06e8 2437     		adds	r7, r7, #36
 1240 06ea BD46     		mov	sp, r7
 1241              		@ sp needed
 1242 06ec 5DF8047B 		ldr	r7, [sp], #4
 1243 06f0 7047     		bx	lr
 1244              		.cfi_endproc
 1245              	.LFE13:
 1247 06f2 00BF     		.align	2
 1248              		.global	PKABigNumAddStart
 1249              		.thumb
 1250              		.thumb_func
 1252              	PKABigNumAddStart:
 1253              	.LFB14:
 960:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 961:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 962:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 963:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the addition of two big number.
 964:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 965:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BN1 is the pointer to the buffer containing the first
 966:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! big mumber.
 967:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8BN1Size is the size of the first big number in 32-bit word.
 968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BN2 is the pointer to the buffer containing the second
 969:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! big number.
 970:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8BN2Size is the size of the second big number in 32-bit word.
 971:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 972:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
 973:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 974:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the addition of the two big numbers.
 975:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 976:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 977:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 978:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 979:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 980:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 981:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 982:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 983:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumAddStart(uint32_t* pui32BN1, uint8_t ui8BN1Size,
 984:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                   uint32_t* pui32BN2, uint8_t ui8BN2Size,
 985:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                   uint32_t* pui32ResultVector)
 986:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1254              		.loc 1 986 0
 1255              		.cfi_startproc
 1256              		@ args = 4, pretend = 0, frame = 24
 1257              		@ frame_needed = 1, uses_anonymous_args = 0
 1258              		@ link register save eliminated.
 1259 06f4 80B4     		push	{r7}
 1260              		.cfi_def_cfa_offset 4
 1261              		.cfi_offset 7, -4
 1262 06f6 87B0     		sub	sp, sp, #28
 1263              		.cfi_def_cfa_offset 32
 1264 06f8 00AF     		add	r7, sp, #0
 1265              		.cfi_def_cfa_register 7
 1266 06fa F860     		str	r0, [r7, #12]
 1267 06fc 7A60     		str	r2, [r7, #4]
 1268 06fe 0A46     		mov	r2, r1
 1269 0700 FA72     		strb	r2, [r7, #11]
 1270 0702 BB72     		strb	r3, [r7, #10]
 987:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 988:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 989:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 990:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 991:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for arguments.
 992:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 993:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BN1);
 994:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BN2);
 995:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 996:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 997:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 1271              		.loc 1 997 0
 1272 0704 0023     		movs	r3, #0
 1273 0706 3B61     		str	r3, [r7, #16]
 998:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 999:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1000:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
1001:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1002:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1274              		.loc 1 1002 0
 1275 0708 44F21C03 		movw	r3, #16412
 1276 070c C4F20043 		movt	r3, 17408
 1277 0710 1B68     		ldr	r3, [r3]
 1278 0712 03F40043 		and	r3, r3, #32768
 1279 0716 002B     		cmp	r3, #0
 1280 0718 01D0     		beq	.L68
1003:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1004:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1281              		.loc 1 1004 0
 1282 071a 0723     		movs	r3, #7
 1283 071c 73E0     		b	.L69
 1284              	.L68:
1005:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1006:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1007:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1008:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1009:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the big number 1 will be stored.
1010:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1011:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 1285              		.loc 1 1011 0
 1286 071e 4FF48043 		mov	r3, #16384
 1287 0722 C4F20043 		movt	r3, 17408
 1288 0726 3A69     		ldr	r2, [r7, #16]
 1289 0728 9208     		lsrs	r2, r2, #2
 1290 072a 1A60     		str	r2, [r3]
1012:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1013:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1014:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the big number 1 in PKA RAM.
1015:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8BN1Size; i++)
 1291              		.loc 1 1016 0
 1292 072c 0023     		movs	r3, #0
 1293 072e 7B61     		str	r3, [r7, #20]
 1294 0730 11E0     		b	.L70
 1295              	.L71:
1017:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1018:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BN1[i];
 1296              		.loc 1 1018 0 discriminator 2
 1297 0732 7B69     		ldr	r3, [r7, #20]
 1298 0734 9B00     		lsls	r3, r3, #2
 1299 0736 1A46     		mov	r2, r3
 1300 0738 3B69     		ldr	r3, [r7, #16]
 1301 073a 1344     		add	r3, r3, r2
 1302 073c 03F18843 		add	r3, r3, #1140850688
 1303 0740 03F5C043 		add	r3, r3, #24576
 1304 0744 7A69     		ldr	r2, [r7, #20]
 1305 0746 9200     		lsls	r2, r2, #2
 1306 0748 F968     		ldr	r1, [r7, #12]
 1307 074a 0A44     		add	r2, r2, r1
 1308 074c 1268     		ldr	r2, [r2]
 1309 074e 1A60     		str	r2, [r3]
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1310              		.loc 1 1016 0 discriminator 2
 1311 0750 7B69     		ldr	r3, [r7, #20]
 1312 0752 0133     		adds	r3, r3, #1
 1313 0754 7B61     		str	r3, [r7, #20]
 1314              	.L70:
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1315              		.loc 1 1016 0 is_stmt 0 discriminator 1
 1316 0756 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1317 0758 7B69     		ldr	r3, [r7, #20]
 1318 075a 9A42     		cmp	r2, r3
 1319 075c E9DC     		bgt	.L71
1019:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1020:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1021:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1022:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1023:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1024:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ui8BN1Size % 2));
 1320              		.loc 1 1024 0 is_stmt 1
 1321 075e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1322 0760 03F00102 		and	r2, r3, #1
 1323 0764 7B69     		ldr	r3, [r7, #20]
 1324 0766 1344     		add	r3, r3, r2
 1325 0768 9B00     		lsls	r3, r3, #2
 1326 076a 3A69     		ldr	r2, [r7, #16]
 1327 076c 1344     		add	r3, r3, r2
 1328 076e 3B61     		str	r3, [r7, #16]
1025:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1026:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1027:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1028:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the big number 2 will be stored.
1029:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1030:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 1329              		.loc 1 1030 0
 1330 0770 44F20403 		movw	r3, #16388
 1331 0774 C4F20043 		movt	r3, 17408
 1332 0778 3A69     		ldr	r2, [r7, #16]
 1333 077a 9208     		lsrs	r2, r2, #2
 1334 077c 1A60     		str	r2, [r3]
1031:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1032:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1033:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the big number 2 in PKA RAM.
1034:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8BN2Size; i++)
 1335              		.loc 1 1035 0
 1336 077e 0023     		movs	r3, #0
 1337 0780 7B61     		str	r3, [r7, #20]
 1338 0782 11E0     		b	.L72
 1339              	.L73:
1036:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1037:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BN2[i];
 1340              		.loc 1 1037 0 discriminator 2
 1341 0784 7B69     		ldr	r3, [r7, #20]
 1342 0786 9B00     		lsls	r3, r3, #2
 1343 0788 1A46     		mov	r2, r3
 1344 078a 3B69     		ldr	r3, [r7, #16]
 1345 078c 1344     		add	r3, r3, r2
 1346 078e 03F18843 		add	r3, r3, #1140850688
 1347 0792 03F5C043 		add	r3, r3, #24576
 1348 0796 7A69     		ldr	r2, [r7, #20]
 1349 0798 9200     		lsls	r2, r2, #2
 1350 079a 7968     		ldr	r1, [r7, #4]
 1351 079c 0A44     		add	r2, r2, r1
 1352 079e 1268     		ldr	r2, [r2]
 1353 07a0 1A60     		str	r2, [r3]
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1354              		.loc 1 1035 0 discriminator 2
 1355 07a2 7B69     		ldr	r3, [r7, #20]
 1356 07a4 0133     		adds	r3, r3, #1
 1357 07a6 7B61     		str	r3, [r7, #20]
 1358              	.L72:
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1359              		.loc 1 1035 0 is_stmt 0 discriminator 1
 1360 07a8 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1361 07aa 7B69     		ldr	r3, [r7, #20]
 1362 07ac 9A42     		cmp	r2, r3
 1363 07ae E9DC     		bgt	.L73
1038:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1039:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1040:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1041:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1042:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1043:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ui8BN2Size % 2));
 1364              		.loc 1 1043 0 is_stmt 1
 1365 07b0 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1366 07b2 03F00102 		and	r2, r3, #1
 1367 07b6 7B69     		ldr	r3, [r7, #20]
 1368 07b8 1344     		add	r3, r3, r2
 1369 07ba 9B00     		lsls	r3, r3, #2
 1370 07bc 3A69     		ldr	r2, [r7, #16]
 1371 07be 1344     		add	r3, r3, r2
 1372 07c0 3B61     		str	r3, [r7, #16]
1044:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1045:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1046:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector address location.
1047:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1048:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 1373              		.loc 1 1048 0
 1374 07c2 3B69     		ldr	r3, [r7, #16]
 1375 07c4 03F18843 		add	r3, r3, #1140850688
 1376 07c8 03F5C043 		add	r3, r3, #24576
 1377 07cc 3A6A     		ldr	r2, [r7, #32]
 1378 07ce 1360     		str	r3, [r2]
1049:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1050:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1051:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load C ptr with the result location in PKA RAM.
1052:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1053:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 1379              		.loc 1 1053 0
 1380 07d0 44F20803 		movw	r3, #16392
 1381 07d4 C4F20043 		movt	r3, 17408
 1382 07d8 3A69     		ldr	r2, [r7, #16]
 1383 07da 9208     		lsrs	r2, r2, #2
 1384 07dc 1A60     		str	r2, [r3]
1054:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1055:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1056:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load respective length registers.
1057:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1058:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BN1Size;
 1385              		.loc 1 1058 0
 1386 07de 44F21003 		movw	r3, #16400
 1387 07e2 C4F20043 		movt	r3, 17408
 1388 07e6 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1389 07e8 1A60     		str	r2, [r3]
1059:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8BN2Size;
 1390              		.loc 1 1059 0
 1391 07ea 44F21403 		movw	r3, #16404
 1392 07ee C4F20043 		movt	r3, 17408
 1393 07f2 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1394 07f4 1A60     		str	r2, [r3]
1060:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1061:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1062:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the function for the add operation and start the operation.
1063:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1064:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_ADD);
 1395              		.loc 1 1064 0
 1396 07f6 44F21C03 		movw	r3, #16412
 1397 07fa C4F20043 		movt	r3, 17408
 1398 07fe 48F21002 		movw	r2, #32784
 1399 0802 1A60     		str	r2, [r3]
1065:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1066:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1400              		.loc 1 1066 0
 1401 0804 0023     		movs	r3, #0
 1402              	.L69:
1067:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1403              		.loc 1 1067 0
 1404 0806 1846     		mov	r0, r3
 1405 0808 1C37     		adds	r7, r7, #28
 1406 080a BD46     		mov	sp, r7
 1407              		@ sp needed
 1408 080c 5DF8047B 		ldr	r7, [sp], #4
 1409 0810 7047     		bx	lr
 1410              		.cfi_endproc
 1411              	.LFE14:
 1413 0812 00BF     		.align	2
 1414              		.global	PKABigNumAddGetResult
 1415              		.thumb
 1416              		.thumb_func
 1418              	PKABigNumAddGetResult:
 1419              	.LFB15:
1068:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1069:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1070:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1071:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the addition operation on two big number.
1072:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1073:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result
1074:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! needs to be stored.
1075:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Len is the address of the variable containing the length of
1076:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the buffer.  After the operation the actual length of the resultant is
1077:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! stored at this address.
1078:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1079:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKABigNumAddStart().
1080:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1081:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of the addition operation on two big numbers,
1082:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! previously started using the function \sa PKABigNumAddStart().
1083:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1084:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
1085:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1086:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1087:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
1088:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1089:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1090:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
1091:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! then the length of the result. 
1092:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1093:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1094:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1095:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumAddGetResult(uint32_t* pui32ResultBuf, uint32_t* pui32Len,
1096:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                       uint32_t ui32ResVectorLoc)
1097:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1420              		.loc 1 1097 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 32
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424              		@ link register save eliminated.
 1425 0814 80B4     		push	{r7}
 1426              		.cfi_def_cfa_offset 4
 1427              		.cfi_offset 7, -4
 1428 0816 89B0     		sub	sp, sp, #36
 1429              		.cfi_def_cfa_offset 40
 1430 0818 00AF     		add	r7, sp, #0
 1431              		.cfi_def_cfa_register 7
 1432 081a F860     		str	r0, [r7, #12]
 1433 081c B960     		str	r1, [r7, #8]
 1434 081e 7A60     		str	r2, [r7, #4]
1098:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
1099:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
1100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
1106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Len);
1107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is complete.
1112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1435              		.loc 1 1113 0
 1436 0820 44F21C03 		movw	r3, #16412
 1437 0824 C4F20043 		movt	r3, 17408
 1438 0828 1B68     		ldr	r3, [r3]
 1439 082a 03F40043 		and	r3, r3, #32768
 1440 082e 002B     		cmp	r3, #0
 1441 0830 01D0     		beq	.L75
1114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1442              		.loc 1 1115 0
 1443 0832 0723     		movs	r3, #7
 1444 0834 39E0     		b	.L76
 1445              	.L75:
1116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the MSW register value.
1120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 1446              		.loc 1 1121 0
 1447 0836 44F22403 		movw	r3, #16420
 1448 083a C4F20043 		movt	r3, 17408
 1449 083e 1B68     		ldr	r3, [r3]
 1450 0840 BB61     		str	r3, [r7, #24]
1122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
1125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 1451              		.loc 1 1126 0
 1452 0842 BB69     		ldr	r3, [r7, #24]
 1453 0844 03F40043 		and	r3, r3, #32768
 1454 0848 002B     		cmp	r3, #0
 1455 084a 01D0     		beq	.L77
1127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 1456              		.loc 1 1128 0
 1457 084c 0423     		movs	r3, #4
 1458 084e 2CE0     		b	.L76
 1459              	.L77:
1129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the length of the result.
1133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 1460              		.loc 1 1134 0
 1461 0850 BB69     		ldr	r3, [r7, #24]
 1462 0852 C3F30A02 		ubfx	r2, r3, #0, #11
1135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1463              		.loc 1 1135 0
 1464 0856 7B68     		ldr	r3, [r7, #4]
 1465 0858 03F13C43 		add	r3, r3, #-1140850688
 1466 085c A3F5C043 		sub	r3, r3, #24576
 1467 0860 9B08     		lsrs	r3, r3, #2
1134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1468              		.loc 1 1134 0
 1469 0862 D31A     		subs	r3, r2, r3
 1470 0864 0133     		adds	r3, r3, #1
 1471 0866 7B61     		str	r3, [r7, #20]
1136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure that the supplied result buffer is adequate to store the
1139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // resultant data.
1140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(*pui32Len < len)
 1472              		.loc 1 1141 0
 1473 0868 BB68     		ldr	r3, [r7, #8]
 1474 086a 1A68     		ldr	r2, [r3]
 1475 086c 7B69     		ldr	r3, [r7, #20]
 1476 086e 9A42     		cmp	r2, r3
 1477 0870 01D2     		bcs	.L78
1142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 1478              		.loc 1 1143 0
 1479 0872 0323     		movs	r3, #3
 1480 0874 19E0     		b	.L76
 1481              	.L78:
1144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the length.
1148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32Len = len;
 1482              		.loc 1 1149 0
 1483 0876 BB68     		ldr	r3, [r7, #8]
 1484 0878 7A69     		ldr	r2, [r7, #20]
 1485 087a 1A60     		str	r2, [r3]
1150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result from vector C into the provided buffer.
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < *pui32Len; i++)
 1486              		.loc 1 1153 0
 1487 087c 0023     		movs	r3, #0
 1488 087e FB61     		str	r3, [r7, #28]
 1489 0880 0DE0     		b	.L79
 1490              	.L80:
1154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32ResultBuf[i] = HWREG( (ui32ResVectorLoc +  4*i) );
 1491              		.loc 1 1155 0 discriminator 2
 1492 0882 FB69     		ldr	r3, [r7, #28]
 1493 0884 9B00     		lsls	r3, r3, #2
 1494 0886 FA68     		ldr	r2, [r7, #12]
 1495 0888 1344     		add	r3, r3, r2
 1496 088a FA69     		ldr	r2, [r7, #28]
 1497 088c 9200     		lsls	r2, r2, #2
 1498 088e 1146     		mov	r1, r2
 1499 0890 7A68     		ldr	r2, [r7, #4]
 1500 0892 0A44     		add	r2, r2, r1
 1501 0894 1268     		ldr	r2, [r2]
 1502 0896 1A60     		str	r2, [r3]
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1503              		.loc 1 1153 0 discriminator 2
 1504 0898 FB69     		ldr	r3, [r7, #28]
 1505 089a 0133     		adds	r3, r3, #1
 1506 089c FB61     		str	r3, [r7, #28]
 1507              	.L79:
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1508              		.loc 1 1153 0 is_stmt 0 discriminator 1
 1509 089e FA69     		ldr	r2, [r7, #28]
 1510 08a0 BB68     		ldr	r3, [r7, #8]
 1511 08a2 1B68     		ldr	r3, [r3]
 1512 08a4 9A42     		cmp	r2, r3
 1513 08a6 ECD3     		bcc	.L80
1156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1514              		.loc 1 1158 0 is_stmt 1
 1515 08a8 0023     		movs	r3, #0
 1516              	.L76:
1159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1517              		.loc 1 1159 0
 1518 08aa 1846     		mov	r0, r3
 1519 08ac 2437     		adds	r7, r7, #36
 1520 08ae BD46     		mov	sp, r7
 1521              		@ sp needed
 1522 08b0 5DF8047B 		ldr	r7, [sp], #4
 1523 08b4 7047     		bx	lr
 1524              		.cfi_endproc
 1525              	.LFE15:
 1527 08b6 00BF     		.align	2
 1528              		.global	PKAECCMultiplyStart
 1529              		.thumb
 1530              		.thumb_func
 1532              	PKAECCMultiplyStart:
 1533              	.LFB16:
1160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts ECC Multiplication.
1164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Scalar is pointer to the buffer containing the scalar
1166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! value to be multiplied.
1167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptEcPt is the pointer to the structure containing the
1168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! elliptic curve point to be multiplied.  The point should be on the given
1169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! curve.
1170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! info.
1172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
1174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the Elliptical curve cryptography (ECC) point
1176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! multiplication operation on the EC point and the scalar value.
1177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
1179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
1182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCMultiplyStart(uint32_t* pui32Scalar, tECPt* ptEcPt,
1186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                     tECCCurveInfo* ptCurve, uint32_t* pui32ResultVector)
1187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1534              		.loc 1 1187 0
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 32
 1537              		@ frame_needed = 1, uses_anonymous_args = 0
 1538              		@ link register save eliminated.
 1539 08b8 80B4     		push	{r7}
 1540              		.cfi_def_cfa_offset 4
 1541              		.cfi_offset 7, -4
 1542 08ba 89B0     		sub	sp, sp, #36
 1543              		.cfi_def_cfa_offset 40
 1544 08bc 00AF     		add	r7, sp, #0
 1545              		.cfi_def_cfa_register 7
 1546 08be F860     		str	r0, [r7, #12]
 1547 08c0 B960     		str	r1, [r7, #8]
 1548 08c2 7A60     		str	r2, [r7, #4]
 1549 08c4 3B60     		str	r3, [r7]
1188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint8_t extraBuf;
1189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
1190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Scalar);
1196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt);
1197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt->pui32X);
1198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt->pui32Y);
1199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptCurve);
1200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(ptCurve->ui8Size <= PKA_MAX_CURVE_SIZE_32_BIT_WORD);
1201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 1550              		.loc 1 1203 0
 1551 08c6 0023     		movs	r3, #0
 1552 08c8 BB61     		str	r3, [r7, #24]
1204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no PKA operation is in progress.
1207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1553              		.loc 1 1208 0
 1554 08ca 44F21C03 		movw	r3, #16412
 1555 08ce C4F20043 		movt	r3, 17408
 1556 08d2 1B68     		ldr	r3, [r3]
 1557 08d4 03F40043 		and	r3, r3, #32768
 1558 08d8 002B     		cmp	r3, #0
 1559 08da 01D0     		beq	.L82
1209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1560              		.loc 1 1210 0
 1561 08dc 0723     		movs	r3, #7
 1562 08de 13E1     		b	.L83
 1563              	.L82:
1211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Calculate the extra buffer requirement.
1215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 1564              		.loc 1 1216 0
 1565 08e0 7B68     		ldr	r3, [r7, #4]
 1566 08e2 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1567 08e4 03F00103 		and	r3, r3, #1
 1568 08e8 DBB2     		uxtb	r3, r3
 1569 08ea 0233     		adds	r3, r3, #2
 1570 08ec FB75     		strb	r3, [r7, #23]
1217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the scalar will be stored.
1221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG((PKA_APTR)) = offset >> 2;
 1571              		.loc 1 1222 0
 1572 08ee 4FF48043 		mov	r3, #16384
 1573 08f2 C4F20043 		movt	r3, 17408
 1574 08f6 BA69     		ldr	r2, [r7, #24]
 1575 08f8 9208     		lsrs	r2, r2, #2
 1576 08fa 1A60     		str	r2, [r3]
1223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the scalar in PKA RAM.
1226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1577              		.loc 1 1227 0
 1578 08fc 0023     		movs	r3, #0
 1579 08fe FB61     		str	r3, [r7, #28]
 1580 0900 11E0     		b	.L84
 1581              	.L85:
1228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Scalar++;
 1582              		.loc 1 1229 0 discriminator 2
 1583 0902 FB69     		ldr	r3, [r7, #28]
 1584 0904 9B00     		lsls	r3, r3, #2
 1585 0906 1A46     		mov	r2, r3
 1586 0908 BB69     		ldr	r3, [r7, #24]
 1587 090a 1344     		add	r3, r3, r2
 1588 090c 03F18843 		add	r3, r3, #1140850688
 1589 0910 03F5C043 		add	r3, r3, #24576
 1590 0914 1A46     		mov	r2, r3
 1591 0916 FB68     		ldr	r3, [r7, #12]
 1592 0918 191D     		adds	r1, r3, #4
 1593 091a F960     		str	r1, [r7, #12]
 1594 091c 1B68     		ldr	r3, [r3]
 1595 091e 1360     		str	r3, [r2]
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1596              		.loc 1 1227 0 discriminator 2
 1597 0920 FB69     		ldr	r3, [r7, #28]
 1598 0922 0133     		adds	r3, r3, #1
 1599 0924 FB61     		str	r3, [r7, #28]
 1600              	.L84:
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1601              		.loc 1 1227 0 is_stmt 0 discriminator 1
 1602 0926 7B68     		ldr	r3, [r7, #4]
 1603 0928 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1604 092a 1A46     		mov	r2, r3
 1605 092c FB69     		ldr	r3, [r7, #28]
 1606 092e 9A42     		cmp	r2, r3
 1607 0930 E7DC     		bgt	.L85
1230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ptCurve->ui8Size % 2));
 1608              		.loc 1 1235 0 is_stmt 1
 1609 0932 7B68     		ldr	r3, [r7, #4]
 1610 0934 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1611 0936 03F00102 		and	r2, r3, #1
 1612 093a FB69     		ldr	r3, [r7, #28]
 1613 093c 1344     		add	r3, r3, r2
 1614 093e 9B00     		lsls	r3, r3, #2
 1615 0940 BA69     		ldr	r2, [r7, #24]
 1616 0942 1344     		add	r3, r3, r2
 1617 0944 BB61     		str	r3, [r7, #24]
1236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the curve parameters will be stored.
1240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG((PKA_BPTR)) = offset >> 2;
 1618              		.loc 1 1241 0
 1619 0946 44F20403 		movw	r3, #16388
 1620 094a C4F20043 		movt	r3, 17408
 1621 094e BA69     		ldr	r2, [r7, #24]
 1622 0950 9208     		lsrs	r2, r2, #2
 1623 0952 1A60     		str	r2, [r3]
1242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B immediately
1245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // following vector A at PKA RAM
1246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1624              		.loc 1 1247 0
 1625 0954 0023     		movs	r3, #0
 1626 0956 FB61     		str	r3, [r7, #28]
 1627 0958 12E0     		b	.L86
 1628              	.L87:
1248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
 1629              		.loc 1 1249 0 discriminator 2
 1630 095a FB69     		ldr	r3, [r7, #28]
 1631 095c 9B00     		lsls	r3, r3, #2
 1632 095e 1A46     		mov	r2, r3
 1633 0960 BB69     		ldr	r3, [r7, #24]
 1634 0962 1344     		add	r3, r3, r2
 1635 0964 03F18843 		add	r3, r3, #1140850688
 1636 0968 03F5C043 		add	r3, r3, #24576
1250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 1637              		.loc 1 1250 0 discriminator 2
 1638 096c 7A68     		ldr	r2, [r7, #4]
 1639 096e 9168     		ldr	r1, [r2, #8]
 1640 0970 FA69     		ldr	r2, [r7, #28]
 1641 0972 9200     		lsls	r2, r2, #2
 1642 0974 0A44     		add	r2, r2, r1
 1643 0976 1268     		ldr	r2, [r2]
1249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 1644              		.loc 1 1249 0 discriminator 2
 1645 0978 1A60     		str	r2, [r3]
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1646              		.loc 1 1247 0 discriminator 2
 1647 097a FB69     		ldr	r3, [r7, #28]
 1648 097c 0133     		adds	r3, r3, #1
 1649 097e FB61     		str	r3, [r7, #28]
 1650              	.L86:
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1651              		.loc 1 1247 0 is_stmt 0 discriminator 1
 1652 0980 7B68     		ldr	r3, [r7, #4]
 1653 0982 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1654 0984 1A46     		mov	r2, r3
 1655 0986 FB69     		ldr	r3, [r7, #28]
 1656 0988 9A42     		cmp	r2, r3
 1657 098a E6DC     		bgt	.L87
1251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1658              		.loc 1 1256 0 is_stmt 1
 1659 098c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1660 098e FB69     		ldr	r3, [r7, #28]
 1661 0990 1344     		add	r3, r3, r2
 1662 0992 9B00     		lsls	r3, r3, #2
 1663 0994 BA69     		ldr	r2, [r7, #24]
 1664 0996 1344     		add	r3, r3, r2
 1665 0998 BB61     		str	r3, [r7, #24]
1257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy curve parameter 'a' in PKA RAM.
1260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1666              		.loc 1 1261 0
 1667 099a 0023     		movs	r3, #0
 1668 099c FB61     		str	r3, [r7, #28]
 1669 099e 12E0     		b	.L88
 1670              	.L89:
1262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 1671              		.loc 1 1263 0 discriminator 2
 1672 09a0 FB69     		ldr	r3, [r7, #28]
 1673 09a2 9B00     		lsls	r3, r3, #2
 1674 09a4 1A46     		mov	r2, r3
 1675 09a6 BB69     		ldr	r3, [r7, #24]
 1676 09a8 1344     		add	r3, r3, r2
 1677 09aa 03F18843 		add	r3, r3, #1140850688
 1678 09ae 03F5C043 		add	r3, r3, #24576
 1679 09b2 7A68     		ldr	r2, [r7, #4]
 1680 09b4 1169     		ldr	r1, [r2, #16]
 1681 09b6 FA69     		ldr	r2, [r7, #28]
 1682 09b8 9200     		lsls	r2, r2, #2
 1683 09ba 0A44     		add	r2, r2, r1
 1684 09bc 1268     		ldr	r2, [r2]
 1685 09be 1A60     		str	r2, [r3]
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1686              		.loc 1 1261 0 discriminator 2
 1687 09c0 FB69     		ldr	r3, [r7, #28]
 1688 09c2 0133     		adds	r3, r3, #1
 1689 09c4 FB61     		str	r3, [r7, #28]
 1690              	.L88:
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1691              		.loc 1 1261 0 is_stmt 0 discriminator 1
 1692 09c6 7B68     		ldr	r3, [r7, #4]
 1693 09c8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1694 09ca 1A46     		mov	r2, r3
 1695 09cc FB69     		ldr	r3, [r7, #28]
 1696 09ce 9A42     		cmp	r2, r3
 1697 09d0 E6DC     		bgt	.L89
1264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1698              		.loc 1 1269 0 is_stmt 1
 1699 09d2 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1700 09d4 FB69     		ldr	r3, [r7, #28]
 1701 09d6 1344     		add	r3, r3, r2
 1702 09d8 9B00     		lsls	r3, r3, #2
 1703 09da BA69     		ldr	r2, [r7, #24]
 1704 09dc 1344     		add	r3, r3, r2
 1705 09de BB61     		str	r3, [r7, #24]
1270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy curve parameter 'b' in PKA RAM.
1273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1706              		.loc 1 1274 0
 1707 09e0 0023     		movs	r3, #0
 1708 09e2 FB61     		str	r3, [r7, #28]
 1709 09e4 12E0     		b	.L90
 1710              	.L91:
1275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32B[i];
 1711              		.loc 1 1276 0 discriminator 2
 1712 09e6 FB69     		ldr	r3, [r7, #28]
 1713 09e8 9B00     		lsls	r3, r3, #2
 1714 09ea 1A46     		mov	r2, r3
 1715 09ec BB69     		ldr	r3, [r7, #24]
 1716 09ee 1344     		add	r3, r3, r2
 1717 09f0 03F18843 		add	r3, r3, #1140850688
 1718 09f4 03F5C043 		add	r3, r3, #24576
 1719 09f8 7A68     		ldr	r2, [r7, #4]
 1720 09fa 5169     		ldr	r1, [r2, #20]
 1721 09fc FA69     		ldr	r2, [r7, #28]
 1722 09fe 9200     		lsls	r2, r2, #2
 1723 0a00 0A44     		add	r2, r2, r1
 1724 0a02 1268     		ldr	r2, [r2]
 1725 0a04 1A60     		str	r2, [r3]
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1726              		.loc 1 1274 0 discriminator 2
 1727 0a06 FB69     		ldr	r3, [r7, #28]
 1728 0a08 0133     		adds	r3, r3, #1
 1729 0a0a FB61     		str	r3, [r7, #28]
 1730              	.L90:
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1731              		.loc 1 1274 0 is_stmt 0 discriminator 1
 1732 0a0c 7B68     		ldr	r3, [r7, #4]
 1733 0a0e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1734 0a10 1A46     		mov	r2, r3
 1735 0a12 FB69     		ldr	r3, [r7, #28]
 1736 0a14 9A42     		cmp	r2, r3
 1737 0a16 E6DC     		bgt	.L91
1277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1738              		.loc 1 1282 0 is_stmt 1
 1739 0a18 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1740 0a1a FB69     		ldr	r3, [r7, #28]
 1741 0a1c 1344     		add	r3, r3, r2
 1742 0a1e 9B00     		lsls	r3, r3, #2
 1743 0a20 BA69     		ldr	r2, [r7, #24]
 1744 0a22 1344     		add	r3, r3, r2
 1745 0a24 BB61     		str	r3, [r7, #24]
1283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the Gx, Gy will be stored.
1287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG((PKA_CPTR)) = offset >> 2;
 1746              		.loc 1 1288 0
 1747 0a26 44F20803 		movw	r3, #16392
 1748 0a2a C4F20043 		movt	r3, 17408
 1749 0a2e BA69     		ldr	r2, [r7, #24]
 1750 0a30 9208     		lsrs	r2, r2, #2
 1751 0a32 1A60     		str	r2, [r3]
1289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write elliptic curve point x co-ordinate value.
1292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1752              		.loc 1 1293 0
 1753 0a34 0023     		movs	r3, #0
 1754 0a36 FB61     		str	r3, [r7, #28]
 1755 0a38 12E0     		b	.L92
 1756              	.L93:
1294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt->pui32X[i];
 1757              		.loc 1 1295 0 discriminator 2
 1758 0a3a FB69     		ldr	r3, [r7, #28]
 1759 0a3c 9B00     		lsls	r3, r3, #2
 1760 0a3e 1A46     		mov	r2, r3
 1761 0a40 BB69     		ldr	r3, [r7, #24]
 1762 0a42 1344     		add	r3, r3, r2
 1763 0a44 03F18843 		add	r3, r3, #1140850688
 1764 0a48 03F5C043 		add	r3, r3, #24576
 1765 0a4c BA68     		ldr	r2, [r7, #8]
 1766 0a4e 1168     		ldr	r1, [r2]
 1767 0a50 FA69     		ldr	r2, [r7, #28]
 1768 0a52 9200     		lsls	r2, r2, #2
 1769 0a54 0A44     		add	r2, r2, r1
 1770 0a56 1268     		ldr	r2, [r2]
 1771 0a58 1A60     		str	r2, [r3]
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1772              		.loc 1 1293 0 discriminator 2
 1773 0a5a FB69     		ldr	r3, [r7, #28]
 1774 0a5c 0133     		adds	r3, r3, #1
 1775 0a5e FB61     		str	r3, [r7, #28]
 1776              	.L92:
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1777              		.loc 1 1293 0 is_stmt 0 discriminator 1
 1778 0a60 7B68     		ldr	r3, [r7, #4]
 1779 0a62 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1780 0a64 1A46     		mov	r2, r3
 1781 0a66 FB69     		ldr	r3, [r7, #28]
 1782 0a68 9A42     		cmp	r2, r3
 1783 0a6a E6DC     		bgt	.L93
1296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1784              		.loc 1 1301 0 is_stmt 1
 1785 0a6c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1786 0a6e FB69     		ldr	r3, [r7, #28]
 1787 0a70 1344     		add	r3, r3, r2
 1788 0a72 9B00     		lsls	r3, r3, #2
 1789 0a74 BA69     		ldr	r2, [r7, #24]
 1790 0a76 1344     		add	r3, r3, r2
 1791 0a78 BB61     		str	r3, [r7, #24]
1302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write elliptic curve point y co-ordinate value.
1305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1792              		.loc 1 1306 0
 1793 0a7a 0023     		movs	r3, #0
 1794 0a7c FB61     		str	r3, [r7, #28]
 1795 0a7e 12E0     		b	.L94
 1796              	.L95:
1307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt->pui32Y[i];
 1797              		.loc 1 1308 0 discriminator 2
 1798 0a80 FB69     		ldr	r3, [r7, #28]
 1799 0a82 9B00     		lsls	r3, r3, #2
 1800 0a84 1A46     		mov	r2, r3
 1801 0a86 BB69     		ldr	r3, [r7, #24]
 1802 0a88 1344     		add	r3, r3, r2
 1803 0a8a 03F18843 		add	r3, r3, #1140850688
 1804 0a8e 03F5C043 		add	r3, r3, #24576
 1805 0a92 BA68     		ldr	r2, [r7, #8]
 1806 0a94 5168     		ldr	r1, [r2, #4]
 1807 0a96 FA69     		ldr	r2, [r7, #28]
 1808 0a98 9200     		lsls	r2, r2, #2
 1809 0a9a 0A44     		add	r2, r2, r1
 1810 0a9c 1268     		ldr	r2, [r2]
 1811 0a9e 1A60     		str	r2, [r3]
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1812              		.loc 1 1306 0 discriminator 2
 1813 0aa0 FB69     		ldr	r3, [r7, #28]
 1814 0aa2 0133     		adds	r3, r3, #1
 1815 0aa4 FB61     		str	r3, [r7, #28]
 1816              	.L94:
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1817              		.loc 1 1306 0 is_stmt 0 discriminator 1
 1818 0aa6 7B68     		ldr	r3, [r7, #4]
 1819 0aa8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1820 0aaa 1A46     		mov	r2, r3
 1821 0aac FB69     		ldr	r3, [r7, #28]
 1822 0aae 9A42     		cmp	r2, r3
 1823 0ab0 E6DC     		bgt	.L95
1309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1824              		.loc 1 1314 0 is_stmt 1
 1825 0ab2 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1826 0ab4 FB69     		ldr	r3, [r7, #28]
 1827 0ab6 1344     		add	r3, r3, r2
 1828 0ab8 9B00     		lsls	r3, r3, #2
 1829 0aba BA69     		ldr	r2, [r7, #24]
 1830 0abc 1344     		add	r3, r3, r2
 1831 0abe BB61     		str	r3, [r7, #24]
1315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the result location.
1318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector =  PKA_RAM_BASE + offset;
 1832              		.loc 1 1319 0
 1833 0ac0 BB69     		ldr	r3, [r7, #24]
 1834 0ac2 03F18843 		add	r3, r3, #1140850688
 1835 0ac6 03F5C043 		add	r3, r3, #24576
 1836 0aca 3A68     		ldr	r2, [r7]
 1837 0acc 1360     		str	r3, [r2]
1320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 1838              		.loc 1 1324 0
 1839 0ace 44F20C03 		movw	r3, #16396
 1840 0ad2 C4F20043 		movt	r3, 17408
 1841 0ad6 BA69     		ldr	r2, [r7, #24]
 1842 0ad8 9208     		lsrs	r2, r2, #2
 1843 0ada 1A60     		str	r2, [r3]
1325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load length registers.
1328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_ALENGTH) = ptCurve->ui8Size;
 1844              		.loc 1 1329 0
 1845 0adc 44F21003 		movw	r3, #16400
 1846 0ae0 C4F20043 		movt	r3, 17408
 1847 0ae4 7A68     		ldr	r2, [r7, #4]
 1848 0ae6 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1849 0ae8 1A60     		str	r2, [r3]
1330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 1850              		.loc 1 1330 0
 1851 0aea 44F21403 		movw	r3, #16404
 1852 0aee C4F20043 		movt	r3, 17408
 1853 0af2 7A68     		ldr	r2, [r7, #4]
 1854 0af4 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1855 0af6 1A60     		str	r2, [r3]
1331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // set the PKA function to ECC-MULT and start the operation.
1334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_FUNCTION) = 0x0000D000;
 1856              		.loc 1 1335 0
 1857 0af8 44F21C03 		movw	r3, #16412
 1858 0afc C4F20043 		movt	r3, 17408
 1859 0b00 4FF45042 		mov	r2, #53248
 1860 0b04 1A60     		str	r2, [r3]
1336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1861              		.loc 1 1337 0
 1862 0b06 0023     		movs	r3, #0
 1863              	.L83:
1338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1864              		.loc 1 1338 0
 1865 0b08 1846     		mov	r0, r3
 1866 0b0a 2437     		adds	r7, r7, #36
 1867 0b0c BD46     		mov	sp, r7
 1868              		@ sp needed
 1869 0b0e 5DF8047B 		ldr	r7, [sp], #4
 1870 0b12 7047     		bx	lr
 1871              		.cfi_endproc
 1872              	.LFE16:
 1874              		.align	2
 1875              		.global	PKAECCMultiplyGetResult
 1876              		.thumb
 1877              		.thumb_func
 1879              	PKAECCMultiplyGetResult:
 1880              	.LFB17:
1339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of ECC Multiplication
1343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant EC
1345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! point will be stored.  The callee is responsible to allocate the space for
1346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the ec point structure and the x and y co-ordinate as well.
1347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKAECCMultiplyStart().
1349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of ecc point multiplication operation on the
1351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! ec point and the scalar value, previously started using the function
1352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \sa PKAECCMultiplyStart().
1353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
1355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
1358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCMultiplyGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1881              		.loc 1 1364 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 24
 1884              		@ frame_needed = 1, uses_anonymous_args = 0
 1885              		@ link register save eliminated.
 1886 0b14 80B4     		push	{r7}
 1887              		.cfi_def_cfa_offset 4
 1888              		.cfi_offset 7, -4
 1889 0b16 87B0     		sub	sp, sp, #28
 1890              		.cfi_def_cfa_offset 32
 1891 0b18 00AF     		add	r7, sp, #0
 1892              		.cfi_def_cfa_register 7
 1893 0b1a 7860     		str	r0, [r7, #4]
 1894 0b1c 3960     		str	r1, [r7]
1365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t addr;
1367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
1368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
1369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is completed.
1381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1895              		.loc 1 1382 0
 1896 0b1e 44F21C03 		movw	r3, #16412
 1897 0b22 C4F20043 		movt	r3, 17408
 1898 0b26 1B68     		ldr	r3, [r3]
 1899 0b28 03F40043 		and	r3, r3, #32768
 1900 0b2c 002B     		cmp	r3, #0
 1901 0b2e 01D0     		beq	.L97
1383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1902              		.loc 1 1384 0
 1903 0b30 0723     		movs	r3, #7
 1904 0b32 5AE0     		b	.L98
 1905              	.L97:
1385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 1906              		.loc 1 1387 0
 1907 0b34 44F21803 		movw	r3, #16408
 1908 0b38 C4F20043 		movt	r3, 17408
 1909 0b3c 1B68     		ldr	r3, [r3]
 1910 0b3e 002B     		cmp	r3, #0
 1911 0b40 52D1     		bne	.L99
1388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the MSW register value.
1391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 1912              		.loc 1 1392 0
 1913 0b42 44F22403 		movw	r3, #16420
 1914 0b46 C4F20043 		movt	r3, 17408
 1915 0b4a 1B68     		ldr	r3, [r3]
 1916 0b4c 3B61     		str	r3, [r7, #16]
1393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 1917              		.loc 1 1397 0
 1918 0b4e 3B69     		ldr	r3, [r7, #16]
 1919 0b50 03F40043 		and	r3, r3, #32768
 1920 0b54 002B     		cmp	r3, #0
 1921 0b56 01D0     		beq	.L100
1398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             return (PKA_STATUS_RESULT_0);
 1922              		.loc 1 1399 0
 1923 0b58 0423     		movs	r3, #4
 1924 0b5a 46E0     		b	.L98
 1925              	.L100:
1400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the length of the result
1404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 1926              		.loc 1 1405 0
 1927 0b5c 3B69     		ldr	r3, [r7, #16]
 1928 0b5e C3F30A02 		ubfx	r2, r3, #0, #11
1406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1929              		.loc 1 1406 0
 1930 0b62 3B68     		ldr	r3, [r7]
 1931 0b64 03F13C43 		add	r3, r3, #-1140850688
 1932 0b68 A3F5C043 		sub	r3, r3, #24576
 1933 0b6c 9B08     		lsrs	r3, r3, #2
1405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1934              		.loc 1 1405 0
 1935 0b6e D31A     		subs	r3, r2, r3
 1936 0b70 0133     		adds	r3, r3, #1
 1937 0b72 FB60     		str	r3, [r7, #12]
1407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr = ui32ResVectorLoc;
 1938              		.loc 1 1408 0
 1939 0b74 3B68     		ldr	r3, [r7]
 1940 0b76 BB60     		str	r3, [r7, #8]
1409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // copy the x co-ordinate value of the result from vector D into
1412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // the \e ptOutEcPt.
1413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 1941              		.loc 1 1414 0
 1942 0b78 0023     		movs	r3, #0
 1943 0b7a 7B61     		str	r3, [r7, #20]
 1944 0b7c 0EE0     		b	.L101
 1945              	.L102:
1415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG(addr + 4*i);
 1946              		.loc 1 1416 0 discriminator 2
 1947 0b7e 7B68     		ldr	r3, [r7, #4]
 1948 0b80 1A68     		ldr	r2, [r3]
 1949 0b82 7B69     		ldr	r3, [r7, #20]
 1950 0b84 9B00     		lsls	r3, r3, #2
 1951 0b86 1344     		add	r3, r3, r2
 1952 0b88 7A69     		ldr	r2, [r7, #20]
 1953 0b8a 9200     		lsls	r2, r2, #2
 1954 0b8c 1146     		mov	r1, r2
 1955 0b8e BA68     		ldr	r2, [r7, #8]
 1956 0b90 0A44     		add	r2, r2, r1
 1957 0b92 1268     		ldr	r2, [r2]
 1958 0b94 1A60     		str	r2, [r3]
1414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 1959              		.loc 1 1414 0 discriminator 2
 1960 0b96 7B69     		ldr	r3, [r7, #20]
 1961 0b98 0133     		adds	r3, r3, #1
 1962 0b9a 7B61     		str	r3, [r7, #20]
 1963              	.L101:
1414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 1964              		.loc 1 1414 0 is_stmt 0 discriminator 1
 1965 0b9c 7A69     		ldr	r2, [r7, #20]
 1966 0b9e FB68     		ldr	r3, [r7, #12]
 1967 0ba0 9A42     		cmp	r2, r3
 1968 0ba2 ECD3     		bcc	.L102
1417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 1969              		.loc 1 1419 0 is_stmt 1
 1970 0ba4 FB68     		ldr	r3, [r7, #12]
 1971 0ba6 03F00102 		and	r2, r3, #1
 1972 0baa 7B69     		ldr	r3, [r7, #20]
 1973 0bac 1344     		add	r3, r3, r2
 1974 0bae 0233     		adds	r3, r3, #2
 1975 0bb0 9B00     		lsls	r3, r3, #2
 1976 0bb2 BA68     		ldr	r2, [r7, #8]
 1977 0bb4 1344     		add	r3, r3, r2
 1978 0bb6 BB60     		str	r3, [r7, #8]
1420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // copy the y co-ordinate value of the result from vector D into
1423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // the \e ptOutEcPt.
1424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 1979              		.loc 1 1425 0
 1980 0bb8 0023     		movs	r3, #0
 1981 0bba 7B61     		str	r3, [r7, #20]
 1982 0bbc 0EE0     		b	.L103
 1983              	.L104:
1426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG(addr + 4*i);
 1984              		.loc 1 1427 0 discriminator 2
 1985 0bbe 7B68     		ldr	r3, [r7, #4]
 1986 0bc0 5A68     		ldr	r2, [r3, #4]
 1987 0bc2 7B69     		ldr	r3, [r7, #20]
 1988 0bc4 9B00     		lsls	r3, r3, #2
 1989 0bc6 1344     		add	r3, r3, r2
 1990 0bc8 7A69     		ldr	r2, [r7, #20]
 1991 0bca 9200     		lsls	r2, r2, #2
 1992 0bcc 1146     		mov	r1, r2
 1993 0bce BA68     		ldr	r2, [r7, #8]
 1994 0bd0 0A44     		add	r2, r2, r1
 1995 0bd2 1268     		ldr	r2, [r2]
 1996 0bd4 1A60     		str	r2, [r3]
1425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 1997              		.loc 1 1425 0 discriminator 2
 1998 0bd6 7B69     		ldr	r3, [r7, #20]
 1999 0bd8 0133     		adds	r3, r3, #1
 2000 0bda 7B61     		str	r3, [r7, #20]
 2001              	.L103:
1425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2002              		.loc 1 1425 0 is_stmt 0 discriminator 1
 2003 0bdc 7A69     		ldr	r2, [r7, #20]
 2004 0bde FB68     		ldr	r3, [r7, #12]
 2005 0be0 9A42     		cmp	r2, r3
 2006 0be2 ECD3     		bcc	.L104
1428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_SUCCESS);
 2007              		.loc 1 1430 0 is_stmt 1
 2008 0be4 0023     		movs	r3, #0
 2009 0be6 00E0     		b	.L98
 2010              	.L99:
1431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     else
1433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_FAILURE);
 2011              		.loc 1 1434 0
 2012 0be8 0123     		movs	r3, #1
 2013              	.L98:
1435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 2014              		.loc 1 1436 0
 2015 0bea 1846     		mov	r0, r3
 2016 0bec 1C37     		adds	r7, r7, #28
 2017 0bee BD46     		mov	sp, r7
 2018              		@ sp needed
 2019 0bf0 5DF8047B 		ldr	r7, [sp], #4
 2020 0bf4 7047     		bx	lr
 2021              		.cfi_endproc
 2022              	.LFE17:
 2024 0bf6 00BF     		.align	2
 2025              		.global	PKAECCMultGenPtStart
 2026              		.thumb
 2027              		.thumb_func
 2029              	PKAECCMultGenPtStart:
 2030              	.LFB18:
1437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the ECC Multiplication with Generator point.
1441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Scalar is the to pointer to the buffer containing the scalar
1443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! value.
1444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! info.
1446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
1448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the ecc point multiplication operation of the
1450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! scalar value with the well known generator point of the given curve.
1451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
1453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
1456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCMultGenPtStart(uint32_t* pui32Scalar, tECCCurveInfo* ptCurve,
1460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                      uint32_t* pui32ResultVector)
1461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 2031              		.loc 1 1461 0
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 32
 2034              		@ frame_needed = 1, uses_anonymous_args = 0
 2035              		@ link register save eliminated.
 2036 0bf8 80B4     		push	{r7}
 2037              		.cfi_def_cfa_offset 4
 2038              		.cfi_offset 7, -4
 2039 0bfa 89B0     		sub	sp, sp, #36
 2040              		.cfi_def_cfa_offset 40
 2041 0bfc 00AF     		add	r7, sp, #0
 2042              		.cfi_def_cfa_register 7
 2043 0bfe F860     		str	r0, [r7, #12]
 2044 0c00 B960     		str	r1, [r7, #8]
 2045 0c02 7A60     		str	r2, [r7, #4]
1462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint8_t extraBuf;
1463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
1464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // check for the arguments.
1468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Scalar);
1470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptCurve);
1471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(ptCurve->ui8Size <= PKA_MAX_CURVE_SIZE_32_BIT_WORD);
1472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 2046              		.loc 1 1474 0
 2047 0c04 0023     		movs	r3, #0
 2048 0c06 BB61     		str	r3, [r7, #24]
1475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
1478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2049              		.loc 1 1479 0
 2050 0c08 44F21C03 		movw	r3, #16412
 2051 0c0c C4F20043 		movt	r3, 17408
 2052 0c10 1B68     		ldr	r3, [r3]
 2053 0c12 03F40043 		and	r3, r3, #32768
 2054 0c16 002B     		cmp	r3, #0
 2055 0c18 01D0     		beq	.L106
1480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2056              		.loc 1 1481 0
 2057 0c1a 0723     		movs	r3, #7
 2058 0c1c 13E1     		b	.L107
 2059              	.L106:
1482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Calculate the extra buffer requirement.
1486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 2060              		.loc 1 1487 0
 2061 0c1e BB68     		ldr	r3, [r7, #8]
 2062 0c20 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2063 0c22 03F00103 		and	r3, r3, #1
 2064 0c26 DBB2     		uxtb	r3, r3
 2065 0c28 0233     		adds	r3, r3, #2
 2066 0c2a FB75     		strb	r3, [r7, #23]
1488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the scalar will be stored.
1492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_APTR) = offset >> 2;
 2067              		.loc 1 1493 0
 2068 0c2c 4FF48043 		mov	r3, #16384
 2069 0c30 C4F20043 		movt	r3, 17408
 2070 0c34 BA69     		ldr	r2, [r7, #24]
 2071 0c36 9208     		lsrs	r2, r2, #2
 2072 0c38 1A60     		str	r2, [r3]
1494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the scalar in PKA RAM.
1497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2073              		.loc 1 1498 0
 2074 0c3a 0023     		movs	r3, #0
 2075 0c3c FB61     		str	r3, [r7, #28]
 2076 0c3e 11E0     		b	.L108
 2077              	.L109:
1499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Scalar++;
 2078              		.loc 1 1500 0 discriminator 2
 2079 0c40 FB69     		ldr	r3, [r7, #28]
 2080 0c42 9B00     		lsls	r3, r3, #2
 2081 0c44 1A46     		mov	r2, r3
 2082 0c46 BB69     		ldr	r3, [r7, #24]
 2083 0c48 1344     		add	r3, r3, r2
 2084 0c4a 03F18843 		add	r3, r3, #1140850688
 2085 0c4e 03F5C043 		add	r3, r3, #24576
 2086 0c52 1A46     		mov	r2, r3
 2087 0c54 FB68     		ldr	r3, [r7, #12]
 2088 0c56 191D     		adds	r1, r3, #4
 2089 0c58 F960     		str	r1, [r7, #12]
 2090 0c5a 1B68     		ldr	r3, [r3]
 2091 0c5c 1360     		str	r3, [r2]
1498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2092              		.loc 1 1498 0 discriminator 2
 2093 0c5e FB69     		ldr	r3, [r7, #28]
 2094 0c60 0133     		adds	r3, r3, #1
 2095 0c62 FB61     		str	r3, [r7, #28]
 2096              	.L108:
1498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2097              		.loc 1 1498 0 is_stmt 0 discriminator 1
 2098 0c64 BB68     		ldr	r3, [r7, #8]
 2099 0c66 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2100 0c68 1A46     		mov	r2, r3
 2101 0c6a FB69     		ldr	r3, [r7, #28]
 2102 0c6c 9A42     		cmp	r2, r3
 2103 0c6e E7DC     		bgt	.L109
1501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ptCurve->ui8Size % 2));
 2104              		.loc 1 1506 0 is_stmt 1
 2105 0c70 BB68     		ldr	r3, [r7, #8]
 2106 0c72 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2107 0c74 03F00102 		and	r2, r3, #1
 2108 0c78 FB69     		ldr	r3, [r7, #28]
 2109 0c7a 1344     		add	r3, r3, r2
 2110 0c7c 9B00     		lsls	r3, r3, #2
 2111 0c7e BA69     		ldr	r2, [r7, #24]
 2112 0c80 1344     		add	r3, r3, r2
 2113 0c82 BB61     		str	r3, [r7, #24]
1507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the curve parameters will be stored.
1511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BPTR) = offset >> 2;
 2114              		.loc 1 1512 0
 2115 0c84 44F20403 		movw	r3, #16388
 2116 0c88 C4F20043 		movt	r3, 17408
 2117 0c8c BA69     		ldr	r2, [r7, #24]
 2118 0c8e 9208     		lsrs	r2, r2, #2
 2119 0c90 1A60     		str	r2, [r3]
1513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B.
1516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2120              		.loc 1 1517 0
 2121 0c92 0023     		movs	r3, #0
 2122 0c94 FB61     		str	r3, [r7, #28]
 2123 0c96 12E0     		b	.L110
 2124              	.L111:
1518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
 2125              		.loc 1 1519 0 discriminator 2
 2126 0c98 FB69     		ldr	r3, [r7, #28]
 2127 0c9a 9B00     		lsls	r3, r3, #2
 2128 0c9c 1A46     		mov	r2, r3
 2129 0c9e BB69     		ldr	r3, [r7, #24]
 2130 0ca0 1344     		add	r3, r3, r2
 2131 0ca2 03F18843 		add	r3, r3, #1140850688
 2132 0ca6 03F5C043 		add	r3, r3, #24576
1520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2133              		.loc 1 1520 0 discriminator 2
 2134 0caa BA68     		ldr	r2, [r7, #8]
 2135 0cac 9168     		ldr	r1, [r2, #8]
 2136 0cae FA69     		ldr	r2, [r7, #28]
 2137 0cb0 9200     		lsls	r2, r2, #2
 2138 0cb2 0A44     		add	r2, r2, r1
 2139 0cb4 1268     		ldr	r2, [r2]
1519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2140              		.loc 1 1519 0 discriminator 2
 2141 0cb6 1A60     		str	r2, [r3]
1517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2142              		.loc 1 1517 0 discriminator 2
 2143 0cb8 FB69     		ldr	r3, [r7, #28]
 2144 0cba 0133     		adds	r3, r3, #1
 2145 0cbc FB61     		str	r3, [r7, #28]
 2146              	.L110:
1517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2147              		.loc 1 1517 0 is_stmt 0 discriminator 1
 2148 0cbe BB68     		ldr	r3, [r7, #8]
 2149 0cc0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2150 0cc2 1A46     		mov	r2, r3
 2151 0cc4 FB69     		ldr	r3, [r7, #28]
 2152 0cc6 9A42     		cmp	r2, r3
 2153 0cc8 E6DC     		bgt	.L111
1521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2154              		.loc 1 1526 0 is_stmt 1
 2155 0cca FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2156 0ccc FB69     		ldr	r3, [r7, #28]
 2157 0cce 1344     		add	r3, r3, r2
 2158 0cd0 9B00     		lsls	r3, r3, #2
 2159 0cd2 BA69     		ldr	r2, [r7, #24]
 2160 0cd4 1344     		add	r3, r3, r2
 2161 0cd6 BB61     		str	r3, [r7, #24]
1527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'a' in PKA RAM.
1530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2162              		.loc 1 1531 0
 2163 0cd8 0023     		movs	r3, #0
 2164 0cda FB61     		str	r3, [r7, #28]
 2165 0cdc 12E0     		b	.L112
 2166              	.L113:
1532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 2167              		.loc 1 1533 0 discriminator 2
 2168 0cde FB69     		ldr	r3, [r7, #28]
 2169 0ce0 9B00     		lsls	r3, r3, #2
 2170 0ce2 1A46     		mov	r2, r3
 2171 0ce4 BB69     		ldr	r3, [r7, #24]
 2172 0ce6 1344     		add	r3, r3, r2
 2173 0ce8 03F18843 		add	r3, r3, #1140850688
 2174 0cec 03F5C043 		add	r3, r3, #24576
 2175 0cf0 BA68     		ldr	r2, [r7, #8]
 2176 0cf2 1169     		ldr	r1, [r2, #16]
 2177 0cf4 FA69     		ldr	r2, [r7, #28]
 2178 0cf6 9200     		lsls	r2, r2, #2
 2179 0cf8 0A44     		add	r2, r2, r1
 2180 0cfa 1268     		ldr	r2, [r2]
 2181 0cfc 1A60     		str	r2, [r3]
1531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2182              		.loc 1 1531 0 discriminator 2
 2183 0cfe FB69     		ldr	r3, [r7, #28]
 2184 0d00 0133     		adds	r3, r3, #1
 2185 0d02 FB61     		str	r3, [r7, #28]
 2186              	.L112:
1531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2187              		.loc 1 1531 0 is_stmt 0 discriminator 1
 2188 0d04 BB68     		ldr	r3, [r7, #8]
 2189 0d06 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2190 0d08 1A46     		mov	r2, r3
 2191 0d0a FB69     		ldr	r3, [r7, #28]
 2192 0d0c 9A42     		cmp	r2, r3
 2193 0d0e E6DC     		bgt	.L113
1534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2194              		.loc 1 1539 0 is_stmt 1
 2195 0d10 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2196 0d12 FB69     		ldr	r3, [r7, #28]
 2197 0d14 1344     		add	r3, r3, r2
 2198 0d16 9B00     		lsls	r3, r3, #2
 2199 0d18 BA69     		ldr	r2, [r7, #24]
 2200 0d1a 1344     		add	r3, r3, r2
 2201 0d1c BB61     		str	r3, [r7, #24]
1540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // write curve parameter 'b' in PKA RAM.
1543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2202              		.loc 1 1544 0
 2203 0d1e 0023     		movs	r3, #0
 2204 0d20 FB61     		str	r3, [r7, #28]
 2205 0d22 12E0     		b	.L114
 2206              	.L115:
1545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32B[i];
 2207              		.loc 1 1546 0 discriminator 2
 2208 0d24 FB69     		ldr	r3, [r7, #28]
 2209 0d26 9B00     		lsls	r3, r3, #2
 2210 0d28 1A46     		mov	r2, r3
 2211 0d2a BB69     		ldr	r3, [r7, #24]
 2212 0d2c 1344     		add	r3, r3, r2
 2213 0d2e 03F18843 		add	r3, r3, #1140850688
 2214 0d32 03F5C043 		add	r3, r3, #24576
 2215 0d36 BA68     		ldr	r2, [r7, #8]
 2216 0d38 5169     		ldr	r1, [r2, #20]
 2217 0d3a FA69     		ldr	r2, [r7, #28]
 2218 0d3c 9200     		lsls	r2, r2, #2
 2219 0d3e 0A44     		add	r2, r2, r1
 2220 0d40 1268     		ldr	r2, [r2]
 2221 0d42 1A60     		str	r2, [r3]
1544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2222              		.loc 1 1544 0 discriminator 2
 2223 0d44 FB69     		ldr	r3, [r7, #28]
 2224 0d46 0133     		adds	r3, r3, #1
 2225 0d48 FB61     		str	r3, [r7, #28]
 2226              	.L114:
1544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2227              		.loc 1 1544 0 is_stmt 0 discriminator 1
 2228 0d4a BB68     		ldr	r3, [r7, #8]
 2229 0d4c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2230 0d4e 1A46     		mov	r2, r3
 2231 0d50 FB69     		ldr	r3, [r7, #28]
 2232 0d52 9A42     		cmp	r2, r3
 2233 0d54 E6DC     		bgt	.L115
1547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2234              		.loc 1 1552 0 is_stmt 1
 2235 0d56 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2236 0d58 FB69     		ldr	r3, [r7, #28]
 2237 0d5a 1344     		add	r3, r3, r2
 2238 0d5c 9B00     		lsls	r3, r3, #2
 2239 0d5e BA69     		ldr	r2, [r7, #24]
 2240 0d60 1344     		add	r3, r3, r2
 2241 0d62 BB61     		str	r3, [r7, #24]
1553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the Gx, Gy will be stored.
1557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_CPTR) = offset >> 2;
 2242              		.loc 1 1558 0
 2243 0d64 44F20803 		movw	r3, #16392
 2244 0d68 C4F20043 		movt	r3, 17408
 2245 0d6c BA69     		ldr	r2, [r7, #24]
 2246 0d6e 9208     		lsrs	r2, r2, #2
 2247 0d70 1A60     		str	r2, [r3]
1559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write x co-ordinate value of the Generator point in PKA RAM.
1562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2248              		.loc 1 1563 0
 2249 0d72 0023     		movs	r3, #0
 2250 0d74 FB61     		str	r3, [r7, #28]
 2251 0d76 12E0     		b	.L116
 2252              	.L117:
1564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32Gx[i];
 2253              		.loc 1 1565 0 discriminator 2
 2254 0d78 FB69     		ldr	r3, [r7, #28]
 2255 0d7a 9B00     		lsls	r3, r3, #2
 2256 0d7c 1A46     		mov	r2, r3
 2257 0d7e BB69     		ldr	r3, [r7, #24]
 2258 0d80 1344     		add	r3, r3, r2
 2259 0d82 03F18843 		add	r3, r3, #1140850688
 2260 0d86 03F5C043 		add	r3, r3, #24576
 2261 0d8a BA68     		ldr	r2, [r7, #8]
 2262 0d8c 9169     		ldr	r1, [r2, #24]
 2263 0d8e FA69     		ldr	r2, [r7, #28]
 2264 0d90 9200     		lsls	r2, r2, #2
 2265 0d92 0A44     		add	r2, r2, r1
 2266 0d94 1268     		ldr	r2, [r2]
 2267 0d96 1A60     		str	r2, [r3]
1563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2268              		.loc 1 1563 0 discriminator 2
 2269 0d98 FB69     		ldr	r3, [r7, #28]
 2270 0d9a 0133     		adds	r3, r3, #1
 2271 0d9c FB61     		str	r3, [r7, #28]
 2272              	.L116:
1563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2273              		.loc 1 1563 0 is_stmt 0 discriminator 1
 2274 0d9e BB68     		ldr	r3, [r7, #8]
 2275 0da0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2276 0da2 1A46     		mov	r2, r3
 2277 0da4 FB69     		ldr	r3, [r7, #28]
 2278 0da6 9A42     		cmp	r2, r3
 2279 0da8 E6DC     		bgt	.L117
1566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2280              		.loc 1 1571 0 is_stmt 1
 2281 0daa FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2282 0dac FB69     		ldr	r3, [r7, #28]
 2283 0dae 1344     		add	r3, r3, r2
 2284 0db0 9B00     		lsls	r3, r3, #2
 2285 0db2 BA69     		ldr	r2, [r7, #24]
 2286 0db4 1344     		add	r3, r3, r2
 2287 0db6 BB61     		str	r3, [r7, #24]
1572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write y co-ordinate value of the Generator point in PKA RAM.
1575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2288              		.loc 1 1576 0
 2289 0db8 0023     		movs	r3, #0
 2290 0dba FB61     		str	r3, [r7, #28]
 2291 0dbc 12E0     		b	.L118
 2292              	.L119:
1577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32Gy[i];
 2293              		.loc 1 1578 0 discriminator 2
 2294 0dbe FB69     		ldr	r3, [r7, #28]
 2295 0dc0 9B00     		lsls	r3, r3, #2
 2296 0dc2 1A46     		mov	r2, r3
 2297 0dc4 BB69     		ldr	r3, [r7, #24]
 2298 0dc6 1344     		add	r3, r3, r2
 2299 0dc8 03F18843 		add	r3, r3, #1140850688
 2300 0dcc 03F5C043 		add	r3, r3, #24576
 2301 0dd0 BA68     		ldr	r2, [r7, #8]
 2302 0dd2 D169     		ldr	r1, [r2, #28]
 2303 0dd4 FA69     		ldr	r2, [r7, #28]
 2304 0dd6 9200     		lsls	r2, r2, #2
 2305 0dd8 0A44     		add	r2, r2, r1
 2306 0dda 1268     		ldr	r2, [r2]
 2307 0ddc 1A60     		str	r2, [r3]
1576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2308              		.loc 1 1576 0 discriminator 2
 2309 0dde FB69     		ldr	r3, [r7, #28]
 2310 0de0 0133     		adds	r3, r3, #1
 2311 0de2 FB61     		str	r3, [r7, #28]
 2312              	.L118:
1576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2313              		.loc 1 1576 0 is_stmt 0 discriminator 1
 2314 0de4 BB68     		ldr	r3, [r7, #8]
 2315 0de6 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2316 0de8 1A46     		mov	r2, r3
 2317 0dea FB69     		ldr	r3, [r7, #28]
 2318 0dec 9A42     		cmp	r2, r3
 2319 0dee E6DC     		bgt	.L119
1579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2320              		.loc 1 1584 0 is_stmt 1
 2321 0df0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2322 0df2 FB69     		ldr	r3, [r7, #28]
 2323 0df4 1344     		add	r3, r3, r2
 2324 0df6 9B00     		lsls	r3, r3, #2
 2325 0df8 BA69     		ldr	r2, [r7, #24]
 2326 0dfa 1344     		add	r3, r3, r2
 2327 0dfc BB61     		str	r3, [r7, #24]
1585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the result location.
1588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector =  PKA_RAM_BASE + offset;
 2328              		.loc 1 1589 0
 2329 0dfe BB69     		ldr	r3, [r7, #24]
 2330 0e00 03F18843 		add	r3, r3, #1140850688
 2331 0e04 03F5C043 		add	r3, r3, #24576
 2332 0e08 7A68     		ldr	r2, [r7, #4]
 2333 0e0a 1360     		str	r3, [r2]
1590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 2334              		.loc 1 1594 0
 2335 0e0c 44F20C03 		movw	r3, #16396
 2336 0e10 C4F20043 		movt	r3, 17408
 2337 0e14 BA69     		ldr	r2, [r7, #24]
 2338 0e16 9208     		lsrs	r2, r2, #2
 2339 0e18 1A60     		str	r2, [r3]
1595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load length registers.
1598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_ALENGTH) = ptCurve->ui8Size;
 2340              		.loc 1 1599 0
 2341 0e1a 44F21003 		movw	r3, #16400
 2342 0e1e C4F20043 		movt	r3, 17408
 2343 0e22 BA68     		ldr	r2, [r7, #8]
 2344 0e24 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2345 0e26 1A60     		str	r2, [r3]
1600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 2346              		.loc 1 1600 0
 2347 0e28 44F21403 		movw	r3, #16404
 2348 0e2c C4F20043 		movt	r3, 17408
 2349 0e30 BA68     		ldr	r2, [r7, #8]
 2350 0e32 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2351 0e34 1A60     		str	r2, [r3]
1601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the PKA function to ECC-MULT and start the operation.
1604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000D000;
 2352              		.loc 1 1605 0
 2353 0e36 44F21C03 		movw	r3, #16412
 2354 0e3a C4F20043 		movt	r3, 17408
 2355 0e3e 4FF45042 		mov	r2, #53248
 2356 0e42 1A60     		str	r2, [r3]
1606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 2357              		.loc 1 1607 0
 2358 0e44 0023     		movs	r3, #0
 2359              	.L107:
1608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 2360              		.loc 1 1608 0
 2361 0e46 1846     		mov	r0, r3
 2362 0e48 2437     		adds	r7, r7, #36
 2363 0e4a BD46     		mov	sp, r7
 2364              		@ sp needed
 2365 0e4c 5DF8047B 		ldr	r7, [sp], #4
 2366 0e50 7047     		bx	lr
 2367              		.cfi_endproc
 2368              	.LFE18:
 2370 0e52 00BF     		.align	2
 2371              		.global	PKAECCMultGenPtGetResult
 2372              		.thumb
 2373              		.thumb_func
 2375              	PKAECCMultGenPtGetResult:
 2376              	.LFB19:
1609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of ECC Multiplication with Generator point.
1613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant EC
1615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! point will be stored.  The callee is responsible to allocate the space for
1616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the ec point structure and the x and y co-ordinate as well.
1617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKAECCMultGenPtStart().
1619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of ecc point multiplication operation on the
1621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! scalar point and the known generator point on the curve, previously started
1622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! using the function \sa PKAECCMultGenPtStart().
1623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
1625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
1628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCMultGenPtGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 2377              		.loc 1 1634 0
 2378              		.cfi_startproc
 2379              		@ args = 0, pretend = 0, frame = 24
 2380              		@ frame_needed = 1, uses_anonymous_args = 0
 2381              		@ link register save eliminated.
 2382 0e54 80B4     		push	{r7}
 2383              		.cfi_def_cfa_offset 4
 2384              		.cfi_offset 7, -4
 2385 0e56 87B0     		sub	sp, sp, #28
 2386              		.cfi_def_cfa_offset 32
 2387 0e58 00AF     		add	r7, sp, #0
 2388              		.cfi_def_cfa_register 7
 2389 0e5a 7860     		str	r0, [r7, #4]
 2390 0e5c 3960     		str	r1, [r7]
1635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
1637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t addr;
1638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
1639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is completed.
1651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2391              		.loc 1 1652 0
 2392 0e5e 44F21C03 		movw	r3, #16412
 2393 0e62 C4F20043 		movt	r3, 17408
 2394 0e66 1B68     		ldr	r3, [r3]
 2395 0e68 03F40043 		and	r3, r3, #32768
 2396 0e6c 002B     		cmp	r3, #0
 2397 0e6e 01D0     		beq	.L121
1653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2398              		.loc 1 1654 0
 2399 0e70 0723     		movs	r3, #7
 2400 0e72 5AE0     		b	.L122
 2401              	.L121:
1655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 2402              		.loc 1 1657 0
 2403 0e74 44F21803 		movw	r3, #16408
 2404 0e78 C4F20043 		movt	r3, 17408
 2405 0e7c 1B68     		ldr	r3, [r3]
 2406 0e7e 002B     		cmp	r3, #0
 2407 0e80 52D1     		bne	.L123
1658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the MSW register value.
1661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 2408              		.loc 1 1662 0
 2409 0e82 44F22403 		movw	r3, #16420
 2410 0e86 C4F20043 		movt	r3, 17408
 2411 0e8a 1B68     		ldr	r3, [r3]
 2412 0e8c 3B61     		str	r3, [r7, #16]
1663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 2413              		.loc 1 1667 0
 2414 0e8e 3B69     		ldr	r3, [r7, #16]
 2415 0e90 03F40043 		and	r3, r3, #32768
 2416 0e94 002B     		cmp	r3, #0
 2417 0e96 01D0     		beq	.L124
1668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             return (PKA_STATUS_RESULT_0);
 2418              		.loc 1 1669 0
 2419 0e98 0423     		movs	r3, #4
 2420 0e9a 46E0     		b	.L122
 2421              	.L124:
1670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the length of the result.
1674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 2422              		.loc 1 1675 0
 2423 0e9c 3B69     		ldr	r3, [r7, #16]
 2424 0e9e C3F30A02 		ubfx	r2, r3, #0, #11
1676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2425              		.loc 1 1676 0
 2426 0ea2 3B68     		ldr	r3, [r7]
 2427 0ea4 03F13C43 		add	r3, r3, #-1140850688
 2428 0ea8 A3F5C043 		sub	r3, r3, #24576
 2429 0eac 9B08     		lsrs	r3, r3, #2
1675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2430              		.loc 1 1675 0
 2431 0eae D31A     		subs	r3, r2, r3
 2432 0eb0 0133     		adds	r3, r3, #1
 2433 0eb2 FB60     		str	r3, [r7, #12]
1677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr = ui32ResVectorLoc;
 2434              		.loc 1 1678 0
 2435 0eb4 3B68     		ldr	r3, [r7]
 2436 0eb6 BB60     		str	r3, [r7, #8]
1679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Copy the x co-ordinate value of the result from vector D into the
1682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // EC point.
1683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 2437              		.loc 1 1684 0
 2438 0eb8 0023     		movs	r3, #0
 2439 0eba 7B61     		str	r3, [r7, #20]
 2440 0ebc 0EE0     		b	.L125
 2441              	.L126:
1685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG( (addr + 4*i) );
 2442              		.loc 1 1686 0 discriminator 2
 2443 0ebe 7B68     		ldr	r3, [r7, #4]
 2444 0ec0 1A68     		ldr	r2, [r3]
 2445 0ec2 7B69     		ldr	r3, [r7, #20]
 2446 0ec4 9B00     		lsls	r3, r3, #2
 2447 0ec6 1344     		add	r3, r3, r2
 2448 0ec8 7A69     		ldr	r2, [r7, #20]
 2449 0eca 9200     		lsls	r2, r2, #2
 2450 0ecc 1146     		mov	r1, r2
 2451 0ece BA68     		ldr	r2, [r7, #8]
 2452 0ed0 0A44     		add	r2, r2, r1
 2453 0ed2 1268     		ldr	r2, [r2]
 2454 0ed4 1A60     		str	r2, [r3]
1684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2455              		.loc 1 1684 0 discriminator 2
 2456 0ed6 7B69     		ldr	r3, [r7, #20]
 2457 0ed8 0133     		adds	r3, r3, #1
 2458 0eda 7B61     		str	r3, [r7, #20]
 2459              	.L125:
1684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2460              		.loc 1 1684 0 is_stmt 0 discriminator 1
 2461 0edc 7A69     		ldr	r2, [r7, #20]
 2462 0ede FB68     		ldr	r3, [r7, #12]
 2463 0ee0 9A42     		cmp	r2, r3
 2464 0ee2 ECD3     		bcc	.L126
1687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 2465              		.loc 1 1689 0 is_stmt 1
 2466 0ee4 FB68     		ldr	r3, [r7, #12]
 2467 0ee6 03F00102 		and	r2, r3, #1
 2468 0eea 7B69     		ldr	r3, [r7, #20]
 2469 0eec 1344     		add	r3, r3, r2
 2470 0eee 0233     		adds	r3, r3, #2
 2471 0ef0 9B00     		lsls	r3, r3, #2
 2472 0ef2 BA68     		ldr	r2, [r7, #8]
 2473 0ef4 1344     		add	r3, r3, r2
 2474 0ef6 BB60     		str	r3, [r7, #8]
1690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Copy the y co-ordinate value of the result from vector D into the
1693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // EC point.
1694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 2475              		.loc 1 1695 0
 2476 0ef8 0023     		movs	r3, #0
 2477 0efa 7B61     		str	r3, [r7, #20]
 2478 0efc 0EE0     		b	.L127
 2479              	.L128:
1696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG( (addr + 4*i) );
 2480              		.loc 1 1697 0 discriminator 2
 2481 0efe 7B68     		ldr	r3, [r7, #4]
 2482 0f00 5A68     		ldr	r2, [r3, #4]
 2483 0f02 7B69     		ldr	r3, [r7, #20]
 2484 0f04 9B00     		lsls	r3, r3, #2
 2485 0f06 1344     		add	r3, r3, r2
 2486 0f08 7A69     		ldr	r2, [r7, #20]
 2487 0f0a 9200     		lsls	r2, r2, #2
 2488 0f0c 1146     		mov	r1, r2
 2489 0f0e BA68     		ldr	r2, [r7, #8]
 2490 0f10 0A44     		add	r2, r2, r1
 2491 0f12 1268     		ldr	r2, [r2]
 2492 0f14 1A60     		str	r2, [r3]
1695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2493              		.loc 1 1695 0 discriminator 2
 2494 0f16 7B69     		ldr	r3, [r7, #20]
 2495 0f18 0133     		adds	r3, r3, #1
 2496 0f1a 7B61     		str	r3, [r7, #20]
 2497              	.L127:
1695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2498              		.loc 1 1695 0 is_stmt 0 discriminator 1
 2499 0f1c 7A69     		ldr	r2, [r7, #20]
 2500 0f1e FB68     		ldr	r3, [r7, #12]
 2501 0f20 9A42     		cmp	r2, r3
 2502 0f22 ECD3     		bcc	.L128
1698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_SUCCESS);
 2503              		.loc 1 1700 0 is_stmt 1
 2504 0f24 0023     		movs	r3, #0
 2505 0f26 00E0     		b	.L122
 2506              	.L123:
1701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     else
1703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_FAILURE);
 2507              		.loc 1 1704 0
 2508 0f28 0123     		movs	r3, #1
 2509              	.L122:
1705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 2510              		.loc 1 1706 0
 2511 0f2a 1846     		mov	r0, r3
 2512 0f2c 1C37     		adds	r7, r7, #28
 2513 0f2e BD46     		mov	sp, r7
 2514              		@ sp needed
 2515 0f30 5DF8047B 		ldr	r7, [sp], #4
 2516 0f34 7047     		bx	lr
 2517              		.cfi_endproc
 2518              	.LFE19:
 2520 0f36 00BF     		.align	2
 2521              		.global	PKAECCAddStart
 2522              		.thumb
 2523              		.thumb_func
 2525              	PKAECCAddStart:
 2526              	.LFB20:
1707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the ECC Addition.
1711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptEcPt1 is the pointer to the structure containing the first
1713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! ecc point.
1714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptEcPt2 is the pointer to the structure containing the
1715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! second ecc point.
1716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! info.
1718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
1720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the ecc point addition operation on the
1722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! two given ec points and generates the resultant ecc point.
1723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
1725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
1728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCAddStart(tECPt* ptEcPt1, tECPt* ptEcPt2,tECCCurveInfo* ptCurve,
1732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                uint32_t* pui32ResultVector)
1733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 2527              		.loc 1 1733 0
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 32
 2530              		@ frame_needed = 1, uses_anonymous_args = 0
 2531              		@ link register save eliminated.
 2532 0f38 80B4     		push	{r7}
 2533              		.cfi_def_cfa_offset 4
 2534              		.cfi_offset 7, -4
 2535 0f3a 89B0     		sub	sp, sp, #36
 2536              		.cfi_def_cfa_offset 40
 2537 0f3c 00AF     		add	r7, sp, #0
 2538              		.cfi_def_cfa_register 7
 2539 0f3e F860     		str	r0, [r7, #12]
 2540 0f40 B960     		str	r1, [r7, #8]
 2541 0f42 7A60     		str	r2, [r7, #4]
 2542 0f44 3B60     		str	r3, [r7]
1734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint8_t extraBuf;
1735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
1736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt1);
1742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt1->pui32X);
1743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt1->pui32Y);
1744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt2);
1745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt2->pui32X);
1746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt2->pui32Y);
1747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptCurve);
1748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 2543              		.loc 1 1750 0
 2544 0f46 0023     		movs	r3, #0
 2545 0f48 BB61     		str	r3, [r7, #24]
1751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
1754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2546              		.loc 1 1755 0
 2547 0f4a 44F21C03 		movw	r3, #16412
 2548 0f4e C4F20043 		movt	r3, 17408
 2549 0f52 1B68     		ldr	r3, [r3]
 2550 0f54 03F40043 		and	r3, r3, #32768
 2551 0f58 002B     		cmp	r3, #0
 2552 0f5a 01D0     		beq	.L130
1756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2553              		.loc 1 1757 0
 2554 0f5c 0723     		movs	r3, #7
 2555 0f5e 0AE1     		b	.L131
 2556              	.L130:
1758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Calculate the extra buffer requirement.
1762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 2557              		.loc 1 1763 0
 2558 0f60 7B68     		ldr	r3, [r7, #4]
 2559 0f62 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2560 0f64 03F00103 		and	r3, r3, #1
 2561 0f68 DBB2     		uxtb	r3, r3
 2562 0f6a 0233     		adds	r3, r3, #2
 2563 0f6c FB75     		strb	r3, [r7, #23]
1764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the first ecPt will be stored.
1768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_APTR) = offset >> 2;
 2564              		.loc 1 1769 0
 2565 0f6e 4FF48043 		mov	r3, #16384
 2566 0f72 C4F20043 		movt	r3, 17408
 2567 0f76 BA69     		ldr	r2, [r7, #24]
 2568 0f78 9208     		lsrs	r2, r2, #2
 2569 0f7a 1A60     		str	r2, [r3]
1770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the x co-ordinate value of the first EC point in PKA RAM.
1773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2570              		.loc 1 1774 0
 2571 0f7c 0023     		movs	r3, #0
 2572 0f7e FB61     		str	r3, [r7, #28]
 2573 0f80 12E0     		b	.L132
 2574              	.L133:
1775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt1->pui32X[i];
 2575              		.loc 1 1776 0 discriminator 2
 2576 0f82 FB69     		ldr	r3, [r7, #28]
 2577 0f84 9B00     		lsls	r3, r3, #2
 2578 0f86 1A46     		mov	r2, r3
 2579 0f88 BB69     		ldr	r3, [r7, #24]
 2580 0f8a 1344     		add	r3, r3, r2
 2581 0f8c 03F18843 		add	r3, r3, #1140850688
 2582 0f90 03F5C043 		add	r3, r3, #24576
 2583 0f94 FA68     		ldr	r2, [r7, #12]
 2584 0f96 1168     		ldr	r1, [r2]
 2585 0f98 FA69     		ldr	r2, [r7, #28]
 2586 0f9a 9200     		lsls	r2, r2, #2
 2587 0f9c 0A44     		add	r2, r2, r1
 2588 0f9e 1268     		ldr	r2, [r2]
 2589 0fa0 1A60     		str	r2, [r3]
1774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2590              		.loc 1 1774 0 discriminator 2
 2591 0fa2 FB69     		ldr	r3, [r7, #28]
 2592 0fa4 0133     		adds	r3, r3, #1
 2593 0fa6 FB61     		str	r3, [r7, #28]
 2594              	.L132:
1774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2595              		.loc 1 1774 0 is_stmt 0 discriminator 1
 2596 0fa8 7B68     		ldr	r3, [r7, #4]
 2597 0faa 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2598 0fac 1A46     		mov	r2, r3
 2599 0fae FB69     		ldr	r3, [r7, #28]
 2600 0fb0 9A42     		cmp	r2, r3
 2601 0fb2 E6DC     		bgt	.L133
1777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2602              		.loc 1 1782 0 is_stmt 1
 2603 0fb4 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2604 0fb6 FB69     		ldr	r3, [r7, #28]
 2605 0fb8 1344     		add	r3, r3, r2
 2606 0fba 9B00     		lsls	r3, r3, #2
 2607 0fbc BA69     		ldr	r2, [r7, #24]
 2608 0fbe 1344     		add	r3, r3, r2
 2609 0fc0 BB61     		str	r3, [r7, #24]
1783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the y co-ordinate value of the first EC point in PKA RAM.
1786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2610              		.loc 1 1787 0
 2611 0fc2 0023     		movs	r3, #0
 2612 0fc4 FB61     		str	r3, [r7, #28]
 2613 0fc6 12E0     		b	.L134
 2614              	.L135:
1788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt1->pui32Y[i];
 2615              		.loc 1 1789 0 discriminator 2
 2616 0fc8 FB69     		ldr	r3, [r7, #28]
 2617 0fca 9B00     		lsls	r3, r3, #2
 2618 0fcc 1A46     		mov	r2, r3
 2619 0fce BB69     		ldr	r3, [r7, #24]
 2620 0fd0 1344     		add	r3, r3, r2
 2621 0fd2 03F18843 		add	r3, r3, #1140850688
 2622 0fd6 03F5C043 		add	r3, r3, #24576
 2623 0fda FA68     		ldr	r2, [r7, #12]
 2624 0fdc 5168     		ldr	r1, [r2, #4]
 2625 0fde FA69     		ldr	r2, [r7, #28]
 2626 0fe0 9200     		lsls	r2, r2, #2
 2627 0fe2 0A44     		add	r2, r2, r1
 2628 0fe4 1268     		ldr	r2, [r2]
 2629 0fe6 1A60     		str	r2, [r3]
1787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2630              		.loc 1 1787 0 discriminator 2
 2631 0fe8 FB69     		ldr	r3, [r7, #28]
 2632 0fea 0133     		adds	r3, r3, #1
 2633 0fec FB61     		str	r3, [r7, #28]
 2634              	.L134:
1787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2635              		.loc 1 1787 0 is_stmt 0 discriminator 1
 2636 0fee 7B68     		ldr	r3, [r7, #4]
 2637 0ff0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2638 0ff2 1A46     		mov	r2, r3
 2639 0ff4 FB69     		ldr	r3, [r7, #28]
 2640 0ff6 9A42     		cmp	r2, r3
 2641 0ff8 E6DC     		bgt	.L135
1790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2642              		.loc 1 1795 0 is_stmt 1
 2643 0ffa FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2644 0ffc FB69     		ldr	r3, [r7, #28]
 2645 0ffe 1344     		add	r3, r3, r2
 2646 1000 9B00     		lsls	r3, r3, #2
 2647 1002 BA69     		ldr	r2, [r7, #24]
 2648 1004 1344     		add	r3, r3, r2
 2649 1006 BB61     		str	r3, [r7, #24]
1796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the curve parameters will be stored.
1800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BPTR) = offset >> 2;
 2650              		.loc 1 1801 0
 2651 1008 44F20403 		movw	r3, #16388
 2652 100c C4F20043 		movt	r3, 17408
 2653 1010 BA69     		ldr	r2, [r7, #24]
 2654 1012 9208     		lsrs	r2, r2, #2
 2655 1014 1A60     		str	r2, [r3]
1802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B
1805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2656              		.loc 1 1806 0
 2657 1016 0023     		movs	r3, #0
 2658 1018 FB61     		str	r3, [r7, #28]
 2659 101a 12E0     		b	.L136
 2660              	.L137:
1807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
 2661              		.loc 1 1808 0 discriminator 2
 2662 101c FB69     		ldr	r3, [r7, #28]
 2663 101e 9B00     		lsls	r3, r3, #2
 2664 1020 1A46     		mov	r2, r3
 2665 1022 BB69     		ldr	r3, [r7, #24]
 2666 1024 1344     		add	r3, r3, r2
 2667 1026 03F18843 		add	r3, r3, #1140850688
 2668 102a 03F5C043 		add	r3, r3, #24576
1809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2669              		.loc 1 1809 0 discriminator 2
 2670 102e 7A68     		ldr	r2, [r7, #4]
 2671 1030 9168     		ldr	r1, [r2, #8]
 2672 1032 FA69     		ldr	r2, [r7, #28]
 2673 1034 9200     		lsls	r2, r2, #2
 2674 1036 0A44     		add	r2, r2, r1
 2675 1038 1268     		ldr	r2, [r2]
1808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2676              		.loc 1 1808 0 discriminator 2
 2677 103a 1A60     		str	r2, [r3]
1806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2678              		.loc 1 1806 0 discriminator 2
 2679 103c FB69     		ldr	r3, [r7, #28]
 2680 103e 0133     		adds	r3, r3, #1
 2681 1040 FB61     		str	r3, [r7, #28]
 2682              	.L136:
1806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2683              		.loc 1 1806 0 is_stmt 0 discriminator 1
 2684 1042 7B68     		ldr	r3, [r7, #4]
 2685 1044 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2686 1046 1A46     		mov	r2, r3
 2687 1048 FB69     		ldr	r3, [r7, #28]
 2688 104a 9A42     		cmp	r2, r3
 2689 104c E6DC     		bgt	.L137
1810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2690              		.loc 1 1815 0 is_stmt 1
 2691 104e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2692 1050 FB69     		ldr	r3, [r7, #28]
 2693 1052 1344     		add	r3, r3, r2
 2694 1054 9B00     		lsls	r3, r3, #2
 2695 1056 BA69     		ldr	r2, [r7, #24]
 2696 1058 1344     		add	r3, r3, r2
 2697 105a BB61     		str	r3, [r7, #24]
1816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'a'.
1819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2698              		.loc 1 1820 0
 2699 105c 0023     		movs	r3, #0
 2700 105e FB61     		str	r3, [r7, #28]
 2701 1060 12E0     		b	.L138
 2702              	.L139:
1821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 2703              		.loc 1 1822 0 discriminator 2
 2704 1062 FB69     		ldr	r3, [r7, #28]
 2705 1064 9B00     		lsls	r3, r3, #2
 2706 1066 1A46     		mov	r2, r3
 2707 1068 BB69     		ldr	r3, [r7, #24]
 2708 106a 1344     		add	r3, r3, r2
 2709 106c 03F18843 		add	r3, r3, #1140850688
 2710 1070 03F5C043 		add	r3, r3, #24576
 2711 1074 7A68     		ldr	r2, [r7, #4]
 2712 1076 1169     		ldr	r1, [r2, #16]
 2713 1078 FA69     		ldr	r2, [r7, #28]
 2714 107a 9200     		lsls	r2, r2, #2
 2715 107c 0A44     		add	r2, r2, r1
 2716 107e 1268     		ldr	r2, [r2]
 2717 1080 1A60     		str	r2, [r3]
1820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2718              		.loc 1 1820 0 discriminator 2
 2719 1082 FB69     		ldr	r3, [r7, #28]
 2720 1084 0133     		adds	r3, r3, #1
 2721 1086 FB61     		str	r3, [r7, #28]
 2722              	.L138:
1820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2723              		.loc 1 1820 0 is_stmt 0 discriminator 1
 2724 1088 7B68     		ldr	r3, [r7, #4]
 2725 108a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2726 108c 1A46     		mov	r2, r3
 2727 108e FB69     		ldr	r3, [r7, #28]
 2728 1090 9A42     		cmp	r2, r3
 2729 1092 E6DC     		bgt	.L139
1823:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1824:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1825:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1826:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1827:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1828:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2730              		.loc 1 1828 0 is_stmt 1
 2731 1094 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2732 1096 FB69     		ldr	r3, [r7, #28]
 2733 1098 1344     		add	r3, r3, r2
 2734 109a 9B00     		lsls	r3, r3, #2
 2735 109c BA69     		ldr	r2, [r7, #24]
 2736 109e 1344     		add	r3, r3, r2
 2737 10a0 BB61     		str	r3, [r7, #24]
1829:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1830:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1831:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the ecPt2 will be stored.
1833:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1834:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_CPTR) = offset >> 2;
 2738              		.loc 1 1834 0
 2739 10a2 44F20803 		movw	r3, #16392
 2740 10a6 C4F20043 		movt	r3, 17408
 2741 10aa BA69     		ldr	r2, [r7, #24]
 2742 10ac 9208     		lsrs	r2, r2, #2
 2743 10ae 1A60     		str	r2, [r3]
1835:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1836:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1837:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the x co-ordinate value of the second EC point in PKA RAM.
1838:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2744              		.loc 1 1839 0
 2745 10b0 0023     		movs	r3, #0
 2746 10b2 FB61     		str	r3, [r7, #28]
 2747 10b4 12E0     		b	.L140
 2748              	.L141:
1840:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1841:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt2->pui32X[i];
 2749              		.loc 1 1841 0 discriminator 2
 2750 10b6 FB69     		ldr	r3, [r7, #28]
 2751 10b8 9B00     		lsls	r3, r3, #2
 2752 10ba 1A46     		mov	r2, r3
 2753 10bc BB69     		ldr	r3, [r7, #24]
 2754 10be 1344     		add	r3, r3, r2
 2755 10c0 03F18843 		add	r3, r3, #1140850688
 2756 10c4 03F5C043 		add	r3, r3, #24576
 2757 10c8 BA68     		ldr	r2, [r7, #8]
 2758 10ca 1168     		ldr	r1, [r2]
 2759 10cc FA69     		ldr	r2, [r7, #28]
 2760 10ce 9200     		lsls	r2, r2, #2
 2761 10d0 0A44     		add	r2, r2, r1
 2762 10d2 1268     		ldr	r2, [r2]
 2763 10d4 1A60     		str	r2, [r3]
1839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2764              		.loc 1 1839 0 discriminator 2
 2765 10d6 FB69     		ldr	r3, [r7, #28]
 2766 10d8 0133     		adds	r3, r3, #1
 2767 10da FB61     		str	r3, [r7, #28]
 2768              	.L140:
1839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2769              		.loc 1 1839 0 is_stmt 0 discriminator 1
 2770 10dc 7B68     		ldr	r3, [r7, #4]
 2771 10de 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2772 10e0 1A46     		mov	r2, r3
 2773 10e2 FB69     		ldr	r3, [r7, #28]
 2774 10e4 9A42     		cmp	r2, r3
 2775 10e6 E6DC     		bgt	.L141
1842:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1843:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1844:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1845:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1846:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1847:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2776              		.loc 1 1847 0 is_stmt 1
 2777 10e8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2778 10ea FB69     		ldr	r3, [r7, #28]
 2779 10ec 1344     		add	r3, r3, r2
 2780 10ee 9B00     		lsls	r3, r3, #2
 2781 10f0 BA69     		ldr	r2, [r7, #24]
 2782 10f2 1344     		add	r3, r3, r2
 2783 10f4 BB61     		str	r3, [r7, #24]
1848:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1849:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1850:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the y co-ordinate value of the second EC point in PKA RAM.
1851:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2784              		.loc 1 1852 0
 2785 10f6 0023     		movs	r3, #0
 2786 10f8 FB61     		str	r3, [r7, #28]
 2787 10fa 12E0     		b	.L142
 2788              	.L143:
1853:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1854:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt2->pui32Y[i];
 2789              		.loc 1 1854 0 discriminator 2
 2790 10fc FB69     		ldr	r3, [r7, #28]
 2791 10fe 9B00     		lsls	r3, r3, #2
 2792 1100 1A46     		mov	r2, r3
 2793 1102 BB69     		ldr	r3, [r7, #24]
 2794 1104 1344     		add	r3, r3, r2
 2795 1106 03F18843 		add	r3, r3, #1140850688
 2796 110a 03F5C043 		add	r3, r3, #24576
 2797 110e BA68     		ldr	r2, [r7, #8]
 2798 1110 5168     		ldr	r1, [r2, #4]
 2799 1112 FA69     		ldr	r2, [r7, #28]
 2800 1114 9200     		lsls	r2, r2, #2
 2801 1116 0A44     		add	r2, r2, r1
 2802 1118 1268     		ldr	r2, [r2]
 2803 111a 1A60     		str	r2, [r3]
1852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2804              		.loc 1 1852 0 discriminator 2
 2805 111c FB69     		ldr	r3, [r7, #28]
 2806 111e 0133     		adds	r3, r3, #1
 2807 1120 FB61     		str	r3, [r7, #28]
 2808              	.L142:
1852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2809              		.loc 1 1852 0 is_stmt 0 discriminator 1
 2810 1122 7B68     		ldr	r3, [r7, #4]
 2811 1124 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2812 1126 1A46     		mov	r2, r3
 2813 1128 FB69     		ldr	r3, [r7, #28]
 2814 112a 9A42     		cmp	r2, r3
 2815 112c E6DC     		bgt	.L143
1855:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1856:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1857:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1858:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1859:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1860:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2816              		.loc 1 1860 0 is_stmt 1
 2817 112e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2818 1130 FB69     		ldr	r3, [r7, #28]
 2819 1132 1344     		add	r3, r3, r2
 2820 1134 9B00     		lsls	r3, r3, #2
 2821 1136 BA69     		ldr	r2, [r7, #24]
 2822 1138 1344     		add	r3, r3, r2
 2823 113a BB61     		str	r3, [r7, #24]
1861:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1862:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1863:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector location.
1864:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1865:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 2824              		.loc 1 1865 0
 2825 113c BB69     		ldr	r3, [r7, #24]
 2826 113e 03F18843 		add	r3, r3, #1140850688
 2827 1142 03F5C043 		add	r3, r3, #24576
 2828 1146 3A68     		ldr	r2, [r7]
 2829 1148 1360     		str	r3, [r2]
1866:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1867:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1868:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1869:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1870:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 2830              		.loc 1 1870 0
 2831 114a 44F20C03 		movw	r3, #16396
 2832 114e C4F20043 		movt	r3, 17408
 2833 1152 BA69     		ldr	r2, [r7, #24]
 2834 1154 9208     		lsrs	r2, r2, #2
 2835 1156 1A60     		str	r2, [r3]
1871:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1872:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1873:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load length registers.
1874:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1875:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 2836              		.loc 1 1875 0
 2837 1158 44F21403 		movw	r3, #16404
 2838 115c C4F20043 		movt	r3, 17408
 2839 1160 7A68     		ldr	r2, [r7, #4]
 2840 1162 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2841 1164 1A60     		str	r2, [r3]
1876:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1877:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1878:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the PKA Function to ECC-ADD and start the operation.
1879:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1880:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000B000;
 2842              		.loc 1 1880 0
 2843 1166 44F21C03 		movw	r3, #16412
 2844 116a C4F20043 		movt	r3, 17408
 2845 116e 4FF43042 		mov	r2, #45056
 2846 1172 1A60     		str	r2, [r3]
1881:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1882:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 2847              		.loc 1 1882 0
 2848 1174 0023     		movs	r3, #0
 2849              	.L131:
1883:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 2850              		.loc 1 1883 0
 2851 1176 1846     		mov	r0, r3
 2852 1178 2437     		adds	r7, r7, #36
 2853 117a BD46     		mov	sp, r7
 2854              		@ sp needed
 2855 117c 5DF8047B 		ldr	r7, [sp], #4
 2856 1180 7047     		bx	lr
 2857              		.cfi_endproc
 2858              	.LFE20:
 2860 1182 00BF     		.align	2
 2861              		.global	PKAECCAddGetResult
 2862              		.thumb
 2863              		.thumb_func
 2865              	PKAECCAddGetResult:
 2866              	.LFB21:
1884:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1885:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1886:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1887:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the ECC Addition
1888:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1889:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant
1890:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!        point will be stored. The callee is responsible to allocate memory,
1891:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!        for the ec point structure including the memory for x and y
1892:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!        co-ordinate values.
1893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1894:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!        was provided by the function \sa PKAECCAddStart().
1895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1896:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of ecc point addition operation on the
1897:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! on the two given ec points, previously started using the function \sa
1898:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! PKAECCAddStart().
1899:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1900:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
1901:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1902:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1903:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
1904:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1905:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1906:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1907:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1908:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1909:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCAddGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1910:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 2867              		.loc 1 1910 0
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 24
 2870              		@ frame_needed = 1, uses_anonymous_args = 0
 2871              		@ link register save eliminated.
 2872 1184 80B4     		push	{r7}
 2873              		.cfi_def_cfa_offset 4
 2874              		.cfi_offset 7, -4
 2875 1186 87B0     		sub	sp, sp, #28
 2876              		.cfi_def_cfa_offset 32
 2877 1188 00AF     		add	r7, sp, #0
 2878              		.cfi_def_cfa_register 7
 2879 118a 7860     		str	r0, [r7, #4]
 2880 118c 3960     		str	r1, [r7]
1911:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
1912:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t addr;
1913:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1914:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
1915:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1916:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1917:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1918:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1919:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1920:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1921:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1922:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1923:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1924:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1925:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2881              		.loc 1 1925 0
 2882 118e 44F21C03 		movw	r3, #16412
 2883 1192 C4F20043 		movt	r3, 17408
 2884 1196 1B68     		ldr	r3, [r3]
 2885 1198 03F40043 		and	r3, r3, #32768
 2886 119c 002B     		cmp	r3, #0
 2887 119e 01D0     		beq	.L145
1926:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1927:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2888              		.loc 1 1927 0
 2889 11a0 0723     		movs	r3, #7
 2890 11a2 5AE0     		b	.L146
 2891              	.L145:
1928:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1929:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1930:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 2892              		.loc 1 1930 0
 2893 11a4 44F21803 		movw	r3, #16408
 2894 11a8 C4F20043 		movt	r3, 17408
 2895 11ac 1B68     		ldr	r3, [r3]
 2896 11ae 002B     		cmp	r3, #0
 2897 11b0 52D1     		bne	.L147
1931:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1932:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the MSW register value.
1934:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1935:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 2898              		.loc 1 1935 0
 2899 11b2 44F22403 		movw	r3, #16420
 2900 11b6 C4F20043 		movt	r3, 17408
 2901 11ba 1B68     		ldr	r3, [r3]
 2902 11bc 3B61     		str	r3, [r7, #16]
1936:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1937:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1938:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1939:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1940:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 2903              		.loc 1 1940 0
 2904 11be 3B69     		ldr	r3, [r7, #16]
 2905 11c0 03F40043 		and	r3, r3, #32768
 2906 11c4 002B     		cmp	r3, #0
 2907 11c6 01D0     		beq	.L148
1941:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1942:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             return (PKA_STATUS_RESULT_0);
 2908              		.loc 1 1942 0
 2909 11c8 0423     		movs	r3, #4
 2910 11ca 46E0     		b	.L146
 2911              	.L148:
1943:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1944:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1945:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1946:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the length of the result.
1947:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 2912              		.loc 1 1948 0
 2913 11cc 3B69     		ldr	r3, [r7, #16]
 2914 11ce C3F30A02 		ubfx	r2, r3, #0, #11
1949:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2915              		.loc 1 1949 0
 2916 11d2 3B68     		ldr	r3, [r7]
 2917 11d4 03F13C43 		add	r3, r3, #-1140850688
 2918 11d8 A3F5C043 		sub	r3, r3, #24576
 2919 11dc 9B08     		lsrs	r3, r3, #2
1948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2920              		.loc 1 1948 0
 2921 11de D31A     		subs	r3, r2, r3
 2922 11e0 0133     		adds	r3, r3, #1
 2923 11e2 FB60     		str	r3, [r7, #12]
1950:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1951:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr = ui32ResVectorLoc;
 2924              		.loc 1 1951 0
 2925 11e4 3B68     		ldr	r3, [r7]
 2926 11e6 BB60     		str	r3, [r7, #8]
1952:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1954:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Copy the x co-ordinate value of result from vector D into the
1955:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // the output EC Point.
1956:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 2927              		.loc 1 1957 0
 2928 11e8 0023     		movs	r3, #0
 2929 11ea 7B61     		str	r3, [r7, #20]
 2930 11ec 0EE0     		b	.L149
 2931              	.L150:
1958:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1959:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG((addr + 4*i));
 2932              		.loc 1 1959 0 discriminator 2
 2933 11ee 7B68     		ldr	r3, [r7, #4]
 2934 11f0 1A68     		ldr	r2, [r3]
 2935 11f2 7B69     		ldr	r3, [r7, #20]
 2936 11f4 9B00     		lsls	r3, r3, #2
 2937 11f6 1344     		add	r3, r3, r2
 2938 11f8 7A69     		ldr	r2, [r7, #20]
 2939 11fa 9200     		lsls	r2, r2, #2
 2940 11fc 1146     		mov	r1, r2
 2941 11fe BA68     		ldr	r2, [r7, #8]
 2942 1200 0A44     		add	r2, r2, r1
 2943 1202 1268     		ldr	r2, [r2]
 2944 1204 1A60     		str	r2, [r3]
1957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2945              		.loc 1 1957 0 discriminator 2
 2946 1206 7B69     		ldr	r3, [r7, #20]
 2947 1208 0133     		adds	r3, r3, #1
 2948 120a 7B61     		str	r3, [r7, #20]
 2949              	.L149:
1957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2950              		.loc 1 1957 0 is_stmt 0 discriminator 1
 2951 120c 7A69     		ldr	r2, [r7, #20]
 2952 120e FB68     		ldr	r3, [r7, #12]
 2953 1210 9A42     		cmp	r2, r3
 2954 1212 ECD3     		bcc	.L150
1960:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1961:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1962:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 2955              		.loc 1 1962 0 is_stmt 1
 2956 1214 FB68     		ldr	r3, [r7, #12]
 2957 1216 03F00102 		and	r2, r3, #1
 2958 121a 7B69     		ldr	r3, [r7, #20]
 2959 121c 1344     		add	r3, r3, r2
 2960 121e 0233     		adds	r3, r3, #2
 2961 1220 9B00     		lsls	r3, r3, #2
 2962 1222 BA68     		ldr	r2, [r7, #8]
 2963 1224 1344     		add	r3, r3, r2
 2964 1226 BB60     		str	r3, [r7, #8]
1963:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1964:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1965:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Copy the y co-ordinate value of result from vector D into the
1966:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // the output EC Point.
1967:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 2965              		.loc 1 1968 0
 2966 1228 0023     		movs	r3, #0
 2967 122a 7B61     		str	r3, [r7, #20]
 2968 122c 0EE0     		b	.L151
 2969              	.L152:
1969:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1970:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG((addr + 4*i));
 2970              		.loc 1 1970 0 discriminator 2
 2971 122e 7B68     		ldr	r3, [r7, #4]
 2972 1230 5A68     		ldr	r2, [r3, #4]
 2973 1232 7B69     		ldr	r3, [r7, #20]
 2974 1234 9B00     		lsls	r3, r3, #2
 2975 1236 1344     		add	r3, r3, r2
 2976 1238 7A69     		ldr	r2, [r7, #20]
 2977 123a 9200     		lsls	r2, r2, #2
 2978 123c 1146     		mov	r1, r2
 2979 123e BA68     		ldr	r2, [r7, #8]
 2980 1240 0A44     		add	r2, r2, r1
 2981 1242 1268     		ldr	r2, [r2]
 2982 1244 1A60     		str	r2, [r3]
1968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2983              		.loc 1 1968 0 discriminator 2
 2984 1246 7B69     		ldr	r3, [r7, #20]
 2985 1248 0133     		adds	r3, r3, #1
 2986 124a 7B61     		str	r3, [r7, #20]
 2987              	.L151:
1968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2988              		.loc 1 1968 0 is_stmt 0 discriminator 1
 2989 124c 7A69     		ldr	r2, [r7, #20]
 2990 124e FB68     		ldr	r3, [r7, #12]
 2991 1250 9A42     		cmp	r2, r3
 2992 1252 ECD3     		bcc	.L152
1971:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1972:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1973:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_SUCCESS);
 2993              		.loc 1 1973 0 is_stmt 1
 2994 1254 0023     		movs	r3, #0
 2995 1256 00E0     		b	.L146
 2996              	.L147:
1974:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1975:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     else
1976:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1977:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_FAILURE);
 2997              		.loc 1 1977 0
 2998 1258 0123     		movs	r3, #1
 2999              	.L146:
1978:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1979:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 3000              		.loc 1 1979 0
 3001 125a 1846     		mov	r0, r3
 3002 125c 1C37     		adds	r7, r7, #28
 3003 125e BD46     		mov	sp, r7
 3004              		@ sp needed
 3005 1260 5DF8047B 		ldr	r7, [sp], #4
 3006 1264 7047     		bx	lr
 3007              		.cfi_endproc
 3008              	.LFE21:
 3010              	.Letext0:
 3011              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3012              		.file 3 "/usr/include/newlib/stdint.h"
 3013              		.file 4 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ecc_curveinfo.h"
 3014              		.file 5 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pka.c
     /tmp/ccT7CgdS.s:18     .text:0000000000000000 $t
     /tmp/ccT7CgdS.s:23     .text:0000000000000000 PKAEnableInt
     /tmp/ccT7CgdS.s:49     .text:000000000000000c PKADisableInt
     /tmp/ccT7CgdS.s:74     .text:0000000000000018 PKAClearInt
     /tmp/ccT7CgdS.s:99     .text:0000000000000024 PKARegInt
     /tmp/ccT7CgdS.s:131    .text:000000000000003c PKAUnRegInt
     /tmp/ccT7CgdS.s:156    .text:0000000000000048 PKAGetOpsStatus
     /tmp/ccT7CgdS.s:196    .text:0000000000000070 PKABigNumModStart
     /tmp/ccT7CgdS.s:367    .text:0000000000000198 PKABigNumModGetResult
     /tmp/ccT7CgdS.s:476    .text:0000000000000234 PKABigNumCmpStart
     /tmp/ccT7CgdS.s:615    .text:0000000000000318 PKABigNumCmpGetResult
     /tmp/ccT7CgdS.s:695    .text:0000000000000374 PKABigNumInvModStart
     /tmp/ccT7CgdS.s:861    .text:0000000000000494 PKABigNumInvModGetResult
     /tmp/ccT7CgdS.s:970    .text:0000000000000530 PKABigNumMultiplyStart
     /tmp/ccT7CgdS.s:1138   .text:0000000000000650 PKABigNumMultGetResult
     /tmp/ccT7CgdS.s:1252   .text:00000000000006f4 PKABigNumAddStart
     /tmp/ccT7CgdS.s:1418   .text:0000000000000814 PKABigNumAddGetResult
     /tmp/ccT7CgdS.s:1532   .text:00000000000008b8 PKAECCMultiplyStart
     /tmp/ccT7CgdS.s:1879   .text:0000000000000b14 PKAECCMultiplyGetResult
     /tmp/ccT7CgdS.s:2029   .text:0000000000000bf8 PKAECCMultGenPtStart
     /tmp/ccT7CgdS.s:2375   .text:0000000000000e54 PKAECCMultGenPtGetResult
     /tmp/ccT7CgdS.s:2525   .text:0000000000000f38 PKAECCAddStart
     /tmp/ccT7CgdS.s:2865   .text:0000000000001184 PKAECCAddGetResult
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.08074afb2ccc9da754fae8e3ee0f577b
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_pka.h.39.21ddda4008595aed4ecf0317dc241440
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.pka.h.64.e6658a746a1332f9f0f055d6d08ac005
                           .group:0000000000000000 wm4.sys_ctrl.h.41.c6bbd4dace326d685c1afa45bc1ba1e2
                           .group:0000000000000000 wm4.debug.h.41.b891e613993738d067c45a5ff528d11a

UNDEFINED SYMBOLS
IntEnable
IntDisable
IntPendClear
IntRegister
IntUnregister
