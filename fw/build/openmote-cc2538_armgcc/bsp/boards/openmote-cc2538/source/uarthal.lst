   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"uarthal.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	UARTParityModeSet
  20              		.thumb
  21              		.thumb_func
  23              	UARTParityModeSet:
  24              	.LFB0:
  25              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Filename:       uart.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Revised:        $Date: 2013-04-16 12:01:40 +0200 (Tue, 16 Apr 2013) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Revision:       $Revision: 9777 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Description:    Driver for the UART.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \addtogroup uart_api
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include <headers/hw_ints.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include <headers/hw_memmap.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include <headers/hw_sys_ctrl.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include <headers/hw_uart.h>
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include "debug.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include "interrupt.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include "uarthal.h"
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \internal
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Checks a UART base address
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function determines if a UART port base address is valid.
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if the base address is valid and \b false
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! otherwise.
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #ifdef ENABLE_ASSERT
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** static bool
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTBaseValid(uint32_t ui32Base)
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return((ui32Base == UART0_BASE) || (ui32Base == UART1_BASE));
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #endif
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the type of parity
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Parity specifies the type of parity to use.
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sets the type of parity to use for transmitting and expect
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! when receiving.  The \e ui32Parity parameter must be one of
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN, \b UART_CONFIG_PAR_ODD,
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_ONE, or \b UART_CONFIG_PAR_ZERO.  The last two allow
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! direct control of the parity bit; it is always either one or zero based on
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the mode.
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTParityModeSet(uint32_t ui32Base, uint32_t ui32Parity)
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
  26              		.loc 1 95 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              		.cfi_def_cfa_offset 4
  33              		.cfi_offset 7, -4
  34 0002 83B0     		sub	sp, sp, #12
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 7860     		str	r0, [r7, #4]
  39 0008 3960     		str	r1, [r7]
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32Parity == UART_CONFIG_PAR_NONE) ||
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_EVEN) ||
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ODD) ||
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ONE) ||
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ZERO));
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the parity mode.
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ((HWREG(ui32Base + UART_O_LCRH) &
  40              		.loc 1 109 0
  41 000a 7B68     		ldr	r3, [r7, #4]
  42 000c 2C33     		adds	r3, r3, #44
  43 000e 7A68     		ldr	r2, [r7, #4]
  44 0010 2C32     		adds	r2, r2, #44
  45 0012 1268     		ldr	r2, [r2]
  46 0014 22F08601 		bic	r1, r2, #134
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                       ~(UART_LCRH_SPS | UART_LCRH_EPS |
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                         UART_LCRH_PEN)) | ui32Parity);
  47              		.loc 1 111 0
  48 0018 3A68     		ldr	r2, [r7]
  49 001a 0A43     		orrs	r2, r2, r1
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                       ~(UART_LCRH_SPS | UART_LCRH_EPS |
  50              		.loc 1 109 0
  51 001c 1A60     		str	r2, [r3]
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
  52              		.loc 1 112 0
  53 001e 0C37     		adds	r7, r7, #12
  54 0020 BD46     		mov	sp, r7
  55              		@ sp needed
  56 0022 5DF8047B 		ldr	r7, [sp], #4
  57 0026 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE0:
  61              		.align	2
  62              		.global	UARTParityModeGet
  63              		.thumb
  64              		.thumb_func
  66              	UARTParityModeGet:
  67              	.LFB1:
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the type of parity currently being used
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function gets the type of parity used for transmitting data and
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! expected when receiving data.
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns the current parity settings, specified as one of
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN, \b UART_CONFIG_PAR_ODD,
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_ONE, or \b UART_CONFIG_PAR_ZERO.
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTParityModeGet(uint32_t ui32Base)
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
  68              		.loc 1 130 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 8
  71              		@ frame_needed = 1, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73 0028 80B4     		push	{r7}
  74              		.cfi_def_cfa_offset 4
  75              		.cfi_offset 7, -4
  76 002a 83B0     		sub	sp, sp, #12
  77              		.cfi_def_cfa_offset 16
  78 002c 00AF     		add	r7, sp, #0
  79              		.cfi_def_cfa_register 7
  80 002e 7860     		str	r0, [r7, #4]
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the current parity setting.
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_LCRH) &
  81              		.loc 1 139 0
  82 0030 7B68     		ldr	r3, [r7, #4]
  83 0032 2C33     		adds	r3, r3, #44
  84 0034 1B68     		ldr	r3, [r3]
  85 0036 03F08603 		and	r3, r3, #134
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (UART_LCRH_SPS | UART_LCRH_EPS | UART_LCRH_PEN));
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
  86              		.loc 1 141 0
  87 003a 1846     		mov	r0, r3
  88 003c 0C37     		adds	r7, r7, #12
  89 003e BD46     		mov	sp, r7
  90              		@ sp needed
  91 0040 5DF8047B 		ldr	r7, [sp], #4
  92 0044 7047     		bx	lr
  93              		.cfi_endproc
  94              	.LFE1:
  96 0046 00BF     		.align	2
  97              		.global	UARTFIFOLevelSet
  98              		.thumb
  99              		.thumb_func
 101              	UARTFIFOLevelSet:
 102              	.LFB2:
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the FIFO level at which interrupts are generated
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32TxLevel is the transmit FIFO interrupt level, specified as one of
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8, \b UART_FIFO_TX4_8,
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32RxLevel is the receive FIFO interrupt level, specified as one of
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8, \b UART_FIFO_RX4_8,
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sets the FIFO level at which transmit and receive interrupts
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! are generated.
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTFIFOLevelSet(uint32_t ui32Base, uint32_t ui32TxLevel,
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                  uint32_t ui32RxLevel)
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 103              		.loc 1 164 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 16
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108 0048 80B4     		push	{r7}
 109              		.cfi_def_cfa_offset 4
 110              		.cfi_offset 7, -4
 111 004a 85B0     		sub	sp, sp, #20
 112              		.cfi_def_cfa_offset 24
 113 004c 00AF     		add	r7, sp, #0
 114              		.cfi_def_cfa_register 7
 115 004e F860     		str	r0, [r7, #12]
 116 0050 B960     		str	r1, [r7, #8]
 117 0052 7A60     		str	r2, [r7, #4]
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32TxLevel == UART_FIFO_TX1_8) ||
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX2_8) ||
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX4_8) ||
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX6_8) ||
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX7_8));
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32RxLevel == UART_FIFO_RX1_8) ||
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX2_8) ||
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX4_8) ||
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX6_8) ||
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX7_8));
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the FIFO interrupt levels.
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 118              		.loc 1 183 0
 119 0054 FB68     		ldr	r3, [r7, #12]
 120 0056 3433     		adds	r3, r3, #52
 121 0058 B968     		ldr	r1, [r7, #8]
 122 005a 7A68     		ldr	r2, [r7, #4]
 123 005c 0A43     		orrs	r2, r2, r1
 124 005e 1A60     		str	r2, [r3]
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 125              		.loc 1 184 0
 126 0060 1437     		adds	r7, r7, #20
 127 0062 BD46     		mov	sp, r7
 128              		@ sp needed
 129 0064 5DF8047B 		ldr	r7, [sp], #4
 130 0068 7047     		bx	lr
 131              		.cfi_endproc
 132              	.LFE2:
 134 006a 00BF     		.align	2
 135              		.global	UARTFIFOLevelGet
 136              		.thumb
 137              		.thumb_func
 139              	UARTFIFOLevelGet:
 140              	.LFB3:
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the FIFO level at which interrupts are generated
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pui32TxLevel is a pointer to storage for the transmit FIFO level,
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returned as one of \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8,
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_TX4_8, \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pui32RxLevel is a pointer to storage for the receive FIFO level,
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returned as one of \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8,
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_RX4_8, \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function gets the FIFO level at which transmit and receive interrupts
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! are generated.
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTFIFOLevelGet(uint32_t ui32Base, uint32_t *pui32TxLevel,
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                  uint32_t *pui32RxLevel)
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 141              		.loc 1 207 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 24
 144              		@ frame_needed = 1, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146 006c 80B4     		push	{r7}
 147              		.cfi_def_cfa_offset 4
 148              		.cfi_offset 7, -4
 149 006e 87B0     		sub	sp, sp, #28
 150              		.cfi_def_cfa_offset 32
 151 0070 00AF     		add	r7, sp, #0
 152              		.cfi_def_cfa_register 7
 153 0072 F860     		str	r0, [r7, #12]
 154 0074 B960     		str	r1, [r7, #8]
 155 0076 7A60     		str	r2, [r7, #4]
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Temp;
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Read the FIFO level register.
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Temp = HWREG(ui32Base + UART_O_IFLS);
 156              		.loc 1 218 0
 157 0078 FB68     		ldr	r3, [r7, #12]
 158 007a 3433     		adds	r3, r3, #52
 159 007c 1B68     		ldr	r3, [r3]
 160 007e 7B61     		str	r3, [r7, #20]
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Extract the transmit and receive FIFO levels.
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     *pui32TxLevel = ui32Temp & UART_IFLS_TXIFLSEL_M;
 161              		.loc 1 223 0
 162 0080 7B69     		ldr	r3, [r7, #20]
 163 0082 03F00702 		and	r2, r3, #7
 164 0086 BB68     		ldr	r3, [r7, #8]
 165 0088 1A60     		str	r2, [r3]
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     *pui32RxLevel = ui32Temp & UART_IFLS_RXIFLSEL_M;
 166              		.loc 1 224 0
 167 008a 7B69     		ldr	r3, [r7, #20]
 168 008c 03F03802 		and	r2, r3, #56
 169 0090 7B68     		ldr	r3, [r7, #4]
 170 0092 1A60     		str	r2, [r3]
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 171              		.loc 1 225 0
 172 0094 1C37     		adds	r7, r7, #28
 173 0096 BD46     		mov	sp, r7
 174              		@ sp needed
 175 0098 5DF8047B 		ldr	r7, [sp], #4
 176 009c 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE3:
 180 009e 00BF     		.align	2
 181              		.global	UARTConfigSetExpClk
 182              		.thumb
 183              		.thumb_func
 185              	UARTConfigSetExpClk:
 186              	.LFB4:
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the configuration of a UART
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32UARTClk is the rate of the clock supplied to the UART module.
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Baud is the desired baud rate.
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Config is the data format for the port (number of data bits,
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! number of stop bits, and parity).
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function configures the UART for operation in the specified data
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! format.  The baud rate is provided in the \e ui32Baud parameter and the data
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! format in the \e ui32Config parameter.
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The \e ui32Config parameter is the logical OR of three values: the number of
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! data bits, the number of stop bits, and the parity.  \b UART_CONFIG_WLEN_8,
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_WLEN_7, \b UART_CONFIG_WLEN_6, and \b UART_CONFIG_WLEN_5
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! select from eight to five data bits per byte (respectively).
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_STOP_ONE and \b UART_CONFIG_STOP_TWO select one or two stop
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! bits (respectively).  \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN,
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_ODD, \b UART_CONFIG_PAR_ONE, and \b UART_CONFIG_PAR_ZERO
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! select the parity mode (no parity bit, even parity bit, odd parity bit,
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! parity bit always one, and parity bit always zero, respectively).
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTClockSourceSet(), or it can be explicitly hard coded if it is constant
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and known (to save the code/execution overhead of a call to
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The CC2538 part has the ability to specify the UART baud clock
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! source (via UARTClockSourceSet()), the peripheral clock can be changed to
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! PIOSC.  In this case, the peripheral clock should be specified as
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! 16,000,000 (the nominal rate of PIOSC).
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \sa See  UARTClockSourceSet()
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTConfigSetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                     uint32_t ui32Baud, uint32_t ui32Config)
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 187              		.loc 1 271 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 24
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 00a0 80B5     		push	{r7, lr}
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 00a2 86B0     		sub	sp, sp, #24
 196              		.cfi_def_cfa_offset 32
 197 00a4 00AF     		add	r7, sp, #0
 198              		.cfi_def_cfa_register 7
 199 00a6 F860     		str	r0, [r7, #12]
 200 00a8 B960     		str	r1, [r7, #8]
 201 00aa 7A60     		str	r2, [r7, #4]
 202 00ac 3B60     		str	r3, [r7]
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Div;
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(ui32Baud != 0);
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Stop the UART.
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     UARTDisable(ui32Base);
 203              		.loc 1 283 0
 204 00ae F868     		ldr	r0, [r7, #12]
 205 00b0 FFF7FEFF 		bl	UARTDisable
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Is the required baud rate greater than the maximum rate supported
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // without the use of high speed mode?
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if((ui32Baud * 16) > ui32UARTClk)
 206              		.loc 1 289 0
 207 00b4 7B68     		ldr	r3, [r7, #4]
 208 00b6 1A01     		lsls	r2, r3, #4
 209 00b8 BB68     		ldr	r3, [r7, #8]
 210 00ba 9A42     		cmp	r2, r3
 211 00bc 0BD9     		bls	.L7
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Enable high speed mode.
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= UART_CTL_HSE;
 212              		.loc 1 294 0
 213 00be FB68     		ldr	r3, [r7, #12]
 214 00c0 3033     		adds	r3, r3, #48
 215 00c2 FA68     		ldr	r2, [r7, #12]
 216 00c4 3032     		adds	r2, r2, #48
 217 00c6 1268     		ldr	r2, [r2]
 218 00c8 42F02002 		orr	r2, r2, #32
 219 00cc 1A60     		str	r2, [r3]
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Half the supplied baud rate to compensate for enabling high speed
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // mode.  This allows the following code to be common to both cases.
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         ui32Baud /= 2;
 220              		.loc 1 300 0
 221 00ce 7B68     		ldr	r3, [r7, #4]
 222 00d0 5B08     		lsrs	r3, r3, #1
 223 00d2 7B60     		str	r3, [r7, #4]
 224 00d4 07E0     		b	.L8
 225              	.L7:
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Disable high speed mode.
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_HSE);
 226              		.loc 1 307 0
 227 00d6 FB68     		ldr	r3, [r7, #12]
 228 00d8 3033     		adds	r3, r3, #48
 229 00da FA68     		ldr	r2, [r7, #12]
 230 00dc 3032     		adds	r2, r2, #48
 231 00de 1268     		ldr	r2, [r2]
 232 00e0 22F02002 		bic	r2, r2, #32
 233 00e4 1A60     		str	r2, [r3]
 234              	.L8:
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Compute the fractional baud rate divider.
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Div = (((ui32UARTClk * 8) / ui32Baud) + 1) / 2;
 235              		.loc 1 313 0
 236 00e6 BB68     		ldr	r3, [r7, #8]
 237 00e8 DA00     		lsls	r2, r3, #3
 238 00ea 7B68     		ldr	r3, [r7, #4]
 239 00ec B2FBF3F3 		udiv	r3, r2, r3
 240 00f0 0133     		adds	r3, r3, #1
 241 00f2 5B08     		lsrs	r3, r3, #1
 242 00f4 7B61     		str	r3, [r7, #20]
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the baud rate.
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IBRD) = ui32Div / 64;
 243              		.loc 1 318 0
 244 00f6 FB68     		ldr	r3, [r7, #12]
 245 00f8 2433     		adds	r3, r3, #36
 246 00fa 7A69     		ldr	r2, [r7, #20]
 247 00fc 9209     		lsrs	r2, r2, #6
 248 00fe 1A60     		str	r2, [r3]
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_FBRD) = ui32Div % 64;
 249              		.loc 1 319 0
 250 0100 FB68     		ldr	r3, [r7, #12]
 251 0102 2833     		adds	r3, r3, #40
 252 0104 7A69     		ldr	r2, [r7, #20]
 253 0106 02F03F02 		and	r2, r2, #63
 254 010a 1A60     		str	r2, [r3]
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set parity, data length, and number of stop bits.
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ui32Config;
 255              		.loc 1 324 0
 256 010c FB68     		ldr	r3, [r7, #12]
 257 010e 2C33     		adds	r3, r3, #44
 258 0110 3A68     		ldr	r2, [r7]
 259 0112 1A60     		str	r2, [r3]
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Clear the flags register.
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_FR) = 0;
 260              		.loc 1 329 0
 261 0114 FB68     		ldr	r3, [r7, #12]
 262 0116 1833     		adds	r3, r3, #24
 263 0118 0022     		movs	r2, #0
 264 011a 1A60     		str	r2, [r3]
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 265              		.loc 1 330 0
 266 011c 1837     		adds	r7, r7, #24
 267 011e BD46     		mov	sp, r7
 268              		@ sp needed
 269 0120 80BD     		pop	{r7, pc}
 270              		.cfi_endproc
 271              	.LFE4:
 273 0122 00BF     		.align	2
 274              		.global	UARTConfigGetExpClk
 275              		.thumb
 276              		.thumb_func
 278              	UARTConfigGetExpClk:
 279              	.LFB5:
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the current configuration of a UART
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32UARTClk is the rate of the clock supplied to the UART module.
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pui32Baud is a pointer to storage for the baud rate.
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pui32Config is a pointer to storage for the data format.
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The baud rate and data format for the UART is determined, given an
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! explicitly provided peripheral clock (hence the ExpClk suffix).  The
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returned baud rate is the actual baud rate; it may not be the exact baud
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! rate requested or an ``official'' baud rate.  The data format returned in
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \e pui32Config is enumerated the same as the \e ui32Config parameter of
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTConfigSetExpClk().
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTClockSourceSet(), or it can be explicitly hard coded if it is constant
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and known (to save the code/execution overhead of a call to
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The CC2538 part has the ability to specify the UART baud clock
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! source (via UARTClockSourceSet()), the peripheral clock can be changed to
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! PIOSC.  In this case, the peripheral clock should be specified as
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! 16,000,000 (the nominal rate of PIOSC).
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTConfigGetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                     uint32_t *pui32Baud, uint32_t *pui32Config)
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 280              		.loc 1 366 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 24
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 285 0124 80B4     		push	{r7}
 286              		.cfi_def_cfa_offset 4
 287              		.cfi_offset 7, -4
 288 0126 87B0     		sub	sp, sp, #28
 289              		.cfi_def_cfa_offset 32
 290 0128 00AF     		add	r7, sp, #0
 291              		.cfi_def_cfa_register 7
 292 012a F860     		str	r0, [r7, #12]
 293 012c B960     		str	r1, [r7, #8]
 294 012e 7A60     		str	r2, [r7, #4]
 295 0130 3B60     		str	r3, [r7]
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Int, ui32Frac;
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Compute the baud rate.
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Int = HWREG(ui32Base + UART_O_IBRD);
 296              		.loc 1 377 0
 297 0132 FB68     		ldr	r3, [r7, #12]
 298 0134 2433     		adds	r3, r3, #36
 299 0136 1B68     		ldr	r3, [r3]
 300 0138 7B61     		str	r3, [r7, #20]
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Frac = HWREG(ui32Base + UART_O_FBRD);
 301              		.loc 1 378 0
 302 013a FB68     		ldr	r3, [r7, #12]
 303 013c 2833     		adds	r3, r3, #40
 304 013e 1B68     		ldr	r3, [r3]
 305 0140 3B61     		str	r3, [r7, #16]
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     *pui32Baud = (ui32UARTClk * 4) / ((64 * ui32Int) + ui32Frac);
 306              		.loc 1 379 0
 307 0142 BB68     		ldr	r3, [r7, #8]
 308 0144 9A00     		lsls	r2, r3, #2
 309 0146 7B69     		ldr	r3, [r7, #20]
 310 0148 9901     		lsls	r1, r3, #6
 311 014a 3B69     		ldr	r3, [r7, #16]
 312 014c 0B44     		add	r3, r3, r1
 313 014e B2FBF3F2 		udiv	r2, r2, r3
 314 0152 7B68     		ldr	r3, [r7, #4]
 315 0154 1A60     		str	r2, [r3]
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // See if high speed mode enabled.
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(HWREG(ui32Base + UART_O_CTL) & UART_CTL_HSE)
 316              		.loc 1 384 0
 317 0156 FB68     		ldr	r3, [r7, #12]
 318 0158 3033     		adds	r3, r3, #48
 319 015a 1B68     		ldr	r3, [r3]
 320 015c 03F02003 		and	r3, r3, #32
 321 0160 002B     		cmp	r3, #0
 322 0162 04D0     		beq	.L10
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // High speed mode is enabled so the actual baud rate is actually
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // double what was just calculated.
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         *pui32Baud *= 2;
 323              		.loc 1 390 0
 324 0164 7B68     		ldr	r3, [r7, #4]
 325 0166 1B68     		ldr	r3, [r3]
 326 0168 5A00     		lsls	r2, r3, #1
 327 016a 7B68     		ldr	r3, [r7, #4]
 328 016c 1A60     		str	r2, [r3]
 329              	.L10:
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Get the parity, data length, and number of stop bits.
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     *pui32Config = (HWREG(ui32Base + UART_O_LCRH) &
 330              		.loc 1 396 0
 331 016e FB68     		ldr	r3, [r7, #12]
 332 0170 2C33     		adds	r3, r3, #44
 333 0172 1B68     		ldr	r3, [r3]
 334 0174 03F0EE02 		and	r2, r3, #238
 335 0178 3B68     		ldr	r3, [r7]
 336 017a 1A60     		str	r2, [r3]
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                     (UART_LCRH_SPS | UART_LCRH_WLEN_M | UART_LCRH_STP2 |
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                      UART_LCRH_EPS | UART_LCRH_PEN));
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 337              		.loc 1 399 0
 338 017c 1C37     		adds	r7, r7, #28
 339 017e BD46     		mov	sp, r7
 340              		@ sp needed
 341 0180 5DF8047B 		ldr	r7, [sp], #4
 342 0184 7047     		bx	lr
 343              		.cfi_endproc
 344              	.LFE5:
 346 0186 00BF     		.align	2
 347              		.global	UARTEnable
 348              		.thumb
 349              		.thumb_func
 351              	UARTEnable:
 352              	.LFB6:
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables transmitting and receiving
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sets the UARTEN, TXE, and RXE bits, and enables the transmit
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and receive FIFOs.
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTEnable(uint32_t ui32Base)
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 353              		.loc 1 415 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 8
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358 0188 80B4     		push	{r7}
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 7, -4
 361 018a 83B0     		sub	sp, sp, #12
 362              		.cfi_def_cfa_offset 16
 363 018c 00AF     		add	r7, sp, #0
 364              		.cfi_def_cfa_register 7
 365 018e 7860     		str	r0, [r7, #4]
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable the FIFO.
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 366              		.loc 1 424 0
 367 0190 7B68     		ldr	r3, [r7, #4]
 368 0192 2C33     		adds	r3, r3, #44
 369 0194 7A68     		ldr	r2, [r7, #4]
 370 0196 2C32     		adds	r2, r2, #44
 371 0198 1268     		ldr	r2, [r2]
 372 019a 42F01002 		orr	r2, r2, #16
 373 019e 1A60     		str	r2, [r3]
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable RX, TX, and the UART.
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 374              		.loc 1 429 0
 375 01a0 7B68     		ldr	r3, [r7, #4]
 376 01a2 3033     		adds	r3, r3, #48
 377 01a4 1A46     		mov	r2, r3
 378 01a6 7B68     		ldr	r3, [r7, #4]
 379 01a8 3033     		adds	r3, r3, #48
 380 01aa 1B68     		ldr	r3, [r3]
 381 01ac 43F44073 		orr	r3, r3, #768
 382 01b0 43F00103 		orr	r3, r3, #1
 383 01b4 1360     		str	r3, [r2]
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                      UART_CTL_RXE);
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 384              		.loc 1 431 0
 385 01b6 0C37     		adds	r7, r7, #12
 386 01b8 BD46     		mov	sp, r7
 387              		@ sp needed
 388 01ba 5DF8047B 		ldr	r7, [sp], #4
 389 01be 7047     		bx	lr
 390              		.cfi_endproc
 391              	.LFE6:
 393              		.align	2
 394              		.global	UARTDisable
 395              		.thumb
 396              		.thumb_func
 398              	UARTDisable:
 399              	.LFB7:
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables transmitting and receiving
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function clears the UARTEN, TXE, and RXE bits, waits for the end of
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! transmission of the current character, and flushes the transmit FIFO.
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTDisable(uint32_t ui32Base)
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 400              		.loc 1 447 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 8
 403              		@ frame_needed = 1, uses_anonymous_args = 0
 404              		@ link register save eliminated.
 405 01c0 80B4     		push	{r7}
 406              		.cfi_def_cfa_offset 4
 407              		.cfi_offset 7, -4
 408 01c2 83B0     		sub	sp, sp, #12
 409              		.cfi_def_cfa_offset 16
 410 01c4 00AF     		add	r7, sp, #0
 411              		.cfi_def_cfa_register 7
 412 01c6 7860     		str	r0, [r7, #4]
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait for end of TX.
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY)
 413              		.loc 1 456 0
 414 01c8 00BF     		nop
 415              	.L13:
 416              		.loc 1 456 0 is_stmt 0 discriminator 1
 417 01ca 7B68     		ldr	r3, [r7, #4]
 418 01cc 1833     		adds	r3, r3, #24
 419 01ce 1B68     		ldr	r3, [r3]
 420 01d0 03F00803 		and	r3, r3, #8
 421 01d4 002B     		cmp	r3, #0
 422 01d6 F8D1     		bne	.L13
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the FIFO.
 462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) &= ~(UART_LCRH_FEN);
 423              		.loc 1 463 0 is_stmt 1
 424 01d8 7B68     		ldr	r3, [r7, #4]
 425 01da 2C33     		adds	r3, r3, #44
 426 01dc 7A68     		ldr	r2, [r7, #4]
 427 01de 2C32     		adds	r2, r2, #44
 428 01e0 1268     		ldr	r2, [r2]
 429 01e2 22F01002 		bic	r2, r2, #16
 430 01e6 1A60     		str	r2, [r3]
 464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the UART.
 467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_UARTEN | UART_CTL_TXE |
 431              		.loc 1 468 0
 432 01e8 7B68     		ldr	r3, [r7, #4]
 433 01ea 3033     		adds	r3, r3, #48
 434 01ec 1A46     		mov	r2, r3
 435 01ee 7B68     		ldr	r3, [r7, #4]
 436 01f0 3033     		adds	r3, r3, #48
 437 01f2 1B68     		ldr	r3, [r3]
 438 01f4 23F44073 		bic	r3, r3, #768
 439 01f8 23F00103 		bic	r3, r3, #1
 440 01fc 1360     		str	r3, [r2]
 469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                       UART_CTL_RXE);
 470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 441              		.loc 1 470 0
 442 01fe 0C37     		adds	r7, r7, #12
 443 0200 BD46     		mov	sp, r7
 444              		@ sp needed
 445 0202 5DF8047B 		ldr	r7, [sp], #4
 446 0206 7047     		bx	lr
 447              		.cfi_endproc
 448              	.LFE7:
 450              		.align	2
 451              		.global	UARTFIFOEnable
 452              		.thumb
 453              		.thumb_func
 455              	UARTFIFOEnable:
 456              	.LFB8:
 471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables the transmit and receive FIFOs
 475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This functions enables the transmit and receive FIFOs in the UART.
 479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTFIFOEnable(uint32_t ui32Base)
 485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 457              		.loc 1 485 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 8
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 462 0208 80B4     		push	{r7}
 463              		.cfi_def_cfa_offset 4
 464              		.cfi_offset 7, -4
 465 020a 83B0     		sub	sp, sp, #12
 466              		.cfi_def_cfa_offset 16
 467 020c 00AF     		add	r7, sp, #0
 468              		.cfi_def_cfa_register 7
 469 020e 7860     		str	r0, [r7, #4]
 486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable the FIFO.
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 470              		.loc 1 494 0
 471 0210 7B68     		ldr	r3, [r7, #4]
 472 0212 2C33     		adds	r3, r3, #44
 473 0214 7A68     		ldr	r2, [r7, #4]
 474 0216 2C32     		adds	r2, r2, #44
 475 0218 1268     		ldr	r2, [r2]
 476 021a 42F01002 		orr	r2, r2, #16
 477 021e 1A60     		str	r2, [r3]
 495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 478              		.loc 1 495 0
 479 0220 0C37     		adds	r7, r7, #12
 480 0222 BD46     		mov	sp, r7
 481              		@ sp needed
 482 0224 5DF8047B 		ldr	r7, [sp], #4
 483 0228 7047     		bx	lr
 484              		.cfi_endproc
 485              	.LFE8:
 487 022a 00BF     		.align	2
 488              		.global	UARTFIFODisable
 489              		.thumb
 490              		.thumb_func
 492              	UARTFIFODisable:
 493              	.LFB9:
 496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables the transmit and receive FIFOs
 500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This functions disables the transmit and receive FIFOs in the UART.
 504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTFIFODisable(uint32_t ui32Base)
 510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 494              		.loc 1 510 0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 8
 497              		@ frame_needed = 1, uses_anonymous_args = 0
 498              		@ link register save eliminated.
 499 022c 80B4     		push	{r7}
 500              		.cfi_def_cfa_offset 4
 501              		.cfi_offset 7, -4
 502 022e 83B0     		sub	sp, sp, #12
 503              		.cfi_def_cfa_offset 16
 504 0230 00AF     		add	r7, sp, #0
 505              		.cfi_def_cfa_register 7
 506 0232 7860     		str	r0, [r7, #4]
 511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the FIFO.
 518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) &= ~(UART_LCRH_FEN);
 507              		.loc 1 519 0
 508 0234 7B68     		ldr	r3, [r7, #4]
 509 0236 2C33     		adds	r3, r3, #44
 510 0238 7A68     		ldr	r2, [r7, #4]
 511 023a 2C32     		adds	r2, r2, #44
 512 023c 1268     		ldr	r2, [r2]
 513 023e 22F01002 		bic	r2, r2, #16
 514 0242 1A60     		str	r2, [r3]
 520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 515              		.loc 1 520 0
 516 0244 0C37     		adds	r7, r7, #12
 517 0246 BD46     		mov	sp, r7
 518              		@ sp needed
 519 0248 5DF8047B 		ldr	r7, [sp], #4
 520 024c 7047     		bx	lr
 521              		.cfi_endproc
 522              	.LFE9:
 524 024e 00BF     		.align	2
 525              		.global	UARTEnableSIR
 526              		.thumb
 527              		.thumb_func
 529              	UARTEnableSIR:
 530              	.LFB10:
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables SIR (IrDA) mode on the specified UART
 525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param bLowPower indicates if SIR Low Power Mode is to be used.
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function enables the SIREN control bit for IrDA mode on the UART.  If
 530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the \e bLowPower flag is set, then SIRLP bit will also be set.
 531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTEnableSIR(uint32_t ui32Base, bool bLowPower)
 537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 531              		.loc 1 537 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 8
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 536 0250 80B4     		push	{r7}
 537              		.cfi_def_cfa_offset 4
 538              		.cfi_offset 7, -4
 539 0252 83B0     		sub	sp, sp, #12
 540              		.cfi_def_cfa_offset 16
 541 0254 00AF     		add	r7, sp, #0
 542              		.cfi_def_cfa_register 7
 543 0256 7860     		str	r0, [r7, #4]
 544 0258 0B46     		mov	r3, r1
 545 025a FB70     		strb	r3, [r7, #3]
 538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable SIR and SIRLP (if appropriate).
 545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(bLowPower)
 546              		.loc 1 546 0
 547 025c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 548 025e 002B     		cmp	r3, #0
 549 0260 08D0     		beq	.L17
 547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_SIREN | UART_CTL_SIRLP);
 550              		.loc 1 548 0
 551 0262 7B68     		ldr	r3, [r7, #4]
 552 0264 3033     		adds	r3, r3, #48
 553 0266 7A68     		ldr	r2, [r7, #4]
 554 0268 3032     		adds	r2, r2, #48
 555 026a 1268     		ldr	r2, [r2]
 556 026c 42F00602 		orr	r2, r2, #6
 557 0270 1A60     		str	r2, [r3]
 558 0272 07E0     		b	.L16
 559              	.L17:
 549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
 551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_SIREN);
 560              		.loc 1 552 0
 561 0274 7B68     		ldr	r3, [r7, #4]
 562 0276 3033     		adds	r3, r3, #48
 563 0278 7A68     		ldr	r2, [r7, #4]
 564 027a 3032     		adds	r2, r2, #48
 565 027c 1268     		ldr	r2, [r2]
 566 027e 42F00202 		orr	r2, r2, #2
 567 0282 1A60     		str	r2, [r3]
 568              	.L16:
 553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 569              		.loc 1 554 0
 570 0284 0C37     		adds	r7, r7, #12
 571 0286 BD46     		mov	sp, r7
 572              		@ sp needed
 573 0288 5DF8047B 		ldr	r7, [sp], #4
 574 028c 7047     		bx	lr
 575              		.cfi_endproc
 576              	.LFE10:
 578 028e 00BF     		.align	2
 579              		.global	UARTDisableSIR
 580              		.thumb
 581              		.thumb_func
 583              	UARTDisableSIR:
 584              	.LFB11:
 555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables SIR (IrDA) mode on the specified UART
 559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function clears the SIREN (IrDA) and SIRLP (Low Power) bits.
 563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTDisableSIR(uint32_t ui32Base)
 569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 585              		.loc 1 569 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 8
 588              		@ frame_needed = 1, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590 0290 80B4     		push	{r7}
 591              		.cfi_def_cfa_offset 4
 592              		.cfi_offset 7, -4
 593 0292 83B0     		sub	sp, sp, #12
 594              		.cfi_def_cfa_offset 16
 595 0294 00AF     		add	r7, sp, #0
 596              		.cfi_def_cfa_register 7
 597 0296 7860     		str	r0, [r7, #4]
 570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable SIR and SIRLP (if appropriate).
 577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_SIREN | UART_CTL_SIRLP);
 598              		.loc 1 578 0
 599 0298 7B68     		ldr	r3, [r7, #4]
 600 029a 3033     		adds	r3, r3, #48
 601 029c 7A68     		ldr	r2, [r7, #4]
 602 029e 3032     		adds	r2, r2, #48
 603 02a0 1268     		ldr	r2, [r2]
 604 02a2 22F00602 		bic	r2, r2, #6
 605 02a6 1A60     		str	r2, [r3]
 579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 606              		.loc 1 579 0
 607 02a8 0C37     		adds	r7, r7, #12
 608 02aa BD46     		mov	sp, r7
 609              		@ sp needed
 610 02ac 5DF8047B 		ldr	r7, [sp], #4
 611 02b0 7047     		bx	lr
 612              		.cfi_endproc
 613              	.LFE11:
 615 02b2 00BF     		.align	2
 616              		.global	UARTTxIntModeSet
 617              		.thumb
 618              		.thumb_func
 620              	UARTTxIntModeSet:
 621              	.LFB12:
 580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the operating mode for the UART transmit interrupt
 584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Mode is the operating mode for the transmit interrupt.  It may be
 587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_TXINT_MODE_EOT to trigger interrupts when the transmitter is idle
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! or \b UART_TXINT_MODE_FIFO to trigger based on the current transmit FIFO
 589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! level.
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function allows the mode of the UART transmit interrupt to be set.  By
 592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! default, the transmit interrupt is asserted when the FIFO level falls past
 593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! a threshold set via a call to UARTFIFOLevelSet().  Alternatively, if this
 594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function is called with \e ui32Mode set to \b UART_TXINT_MODE_EOT, the
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! transmit interrupt is asserted once the transmitter is completely idle -
 596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the transmit FIFO is empty and all bits, including any stop bits, have
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! cleared the transmitter.
 598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTTxIntModeSet(uint32_t ui32Base, uint32_t ui32Mode)
 604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 622              		.loc 1 604 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 8
 625              		@ frame_needed = 1, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 627 02b4 80B4     		push	{r7}
 628              		.cfi_def_cfa_offset 4
 629              		.cfi_offset 7, -4
 630 02b6 83B0     		sub	sp, sp, #12
 631              		.cfi_def_cfa_offset 16
 632 02b8 00AF     		add	r7, sp, #0
 633              		.cfi_def_cfa_register 7
 634 02ba 7860     		str	r0, [r7, #4]
 635 02bc 3960     		str	r1, [r7]
 605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32Mode == UART_TXINT_MODE_EOT) ||
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Mode == UART_TXINT_MODE_FIFO));
 611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set or clear the EOT bit of the UART control register as appropriate.
 614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) = ((HWREG(ui32Base + UART_O_CTL) &
 636              		.loc 1 615 0
 637 02be 7B68     		ldr	r3, [r7, #4]
 638 02c0 3033     		adds	r3, r3, #48
 639 02c2 7A68     		ldr	r2, [r7, #4]
 640 02c4 3032     		adds	r2, r2, #48
 641 02c6 1268     		ldr	r2, [r2]
 642 02c8 22F01001 		bic	r1, r2, #16
 616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                      ~(UART_TXINT_MODE_EOT |
 617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                        UART_TXINT_MODE_FIFO)) | ui32Mode);
 643              		.loc 1 617 0
 644 02cc 3A68     		ldr	r2, [r7]
 645 02ce 0A43     		orrs	r2, r2, r1
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                      ~(UART_TXINT_MODE_EOT |
 646              		.loc 1 615 0
 647 02d0 1A60     		str	r2, [r3]
 618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 648              		.loc 1 618 0
 649 02d2 0C37     		adds	r7, r7, #12
 650 02d4 BD46     		mov	sp, r7
 651              		@ sp needed
 652 02d6 5DF8047B 		ldr	r7, [sp], #4
 653 02da 7047     		bx	lr
 654              		.cfi_endproc
 655              	.LFE12:
 657              		.align	2
 658              		.global	UARTTxIntModeGet
 659              		.thumb
 660              		.thumb_func
 662              	UARTTxIntModeGet:
 663              	.LFB13:
 619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Returns the current operating mode for the UART transmit interrupt
 623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns the current operating mode for the UART transmit
 627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! interrupt.  The return value is \b UART_TXINT_MODE_EOT if the transmit
 628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! interrupt is currently set to be asserted once the transmitter is
 629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! completely idle - the transmit FIFO is empty and all bits, including any
 630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! stop bits, have cleared the transmitter.  The return value is
 631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_TXINT_MODE_FIFO if the interrupt is set to be asserted based upon
 632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the level of the transmit FIFO.
 633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b UART_TXINT_MODE_FIFO or \b UART_TXINT_MODE_EOT.
 635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
 638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTTxIntModeGet(uint32_t ui32Base)
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 664              		.loc 1 639 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 8
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668              		@ link register save eliminated.
 669 02dc 80B4     		push	{r7}
 670              		.cfi_def_cfa_offset 4
 671              		.cfi_offset 7, -4
 672 02de 83B0     		sub	sp, sp, #12
 673              		.cfi_def_cfa_offset 16
 674 02e0 00AF     		add	r7, sp, #0
 675              		.cfi_def_cfa_register 7
 676 02e2 7860     		str	r0, [r7, #4]
 640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the current transmit interrupt mode.
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_CTL) & (UART_TXINT_MODE_EOT |
 677              		.loc 1 648 0
 678 02e4 7B68     		ldr	r3, [r7, #4]
 679 02e6 3033     		adds	r3, r3, #48
 680 02e8 1B68     		ldr	r3, [r3]
 681 02ea 03F01003 		and	r3, r3, #16
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                            UART_TXINT_MODE_FIFO));
 650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 682              		.loc 1 650 0
 683 02ee 1846     		mov	r0, r3
 684 02f0 0C37     		adds	r7, r7, #12
 685 02f2 BD46     		mov	sp, r7
 686              		@ sp needed
 687 02f4 5DF8047B 		ldr	r7, [sp], #4
 688 02f8 7047     		bx	lr
 689              		.cfi_endproc
 690              	.LFE13:
 692 02fa 00BF     		.align	2
 693              		.global	UARTCharsAvail
 694              		.thumb
 695              		.thumb_func
 697              	UARTCharsAvail:
 698              	.LFB14:
 651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Determines if there are any characters in the receive FIFO
 655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns a flag indicating whether or not there is data
 659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! available in the receive FIFO.
 660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if there is data in the receive FIFO or \b false
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! if there is no data in the receive FIFO.
 663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** bool
 666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharsAvail(uint32_t ui32Base)
 667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 699              		.loc 1 667 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 8
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 704 02fc 80B4     		push	{r7}
 705              		.cfi_def_cfa_offset 4
 706              		.cfi_offset 7, -4
 707 02fe 83B0     		sub	sp, sp, #12
 708              		.cfi_def_cfa_offset 16
 709 0300 00AF     		add	r7, sp, #0
 710              		.cfi_def_cfa_register 7
 711 0302 7860     		str	r0, [r7, #4]
 668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the availability of characters.
 675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE) ? false : true);
 712              		.loc 1 676 0
 713 0304 7B68     		ldr	r3, [r7, #4]
 714 0306 1833     		adds	r3, r3, #24
 715 0308 1B68     		ldr	r3, [r3]
 716 030a 03F01003 		and	r3, r3, #16
 717 030e 002B     		cmp	r3, #0
 718 0310 14BF     		ite	ne
 719 0312 0023     		movne	r3, #0
 720 0314 0123     		moveq	r3, #1
 721 0316 DBB2     		uxtb	r3, r3
 677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 722              		.loc 1 677 0
 723 0318 1846     		mov	r0, r3
 724 031a 0C37     		adds	r7, r7, #12
 725 031c BD46     		mov	sp, r7
 726              		@ sp needed
 727 031e 5DF8047B 		ldr	r7, [sp], #4
 728 0322 7047     		bx	lr
 729              		.cfi_endproc
 730              	.LFE14:
 732              		.align	2
 733              		.global	UARTSpaceAvail
 734              		.thumb
 735              		.thumb_func
 737              	UARTSpaceAvail:
 738              	.LFB15:
 678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Determines if there is any space in the transmit FIFO
 682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns a flag indicating whether or not there is space
 686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! available in the transmit FIFO.
 687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if there is space available in the transmit FIFO
 689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! or \b false if there is no space available in the transmit FIFO.
 690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** bool
 693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTSpaceAvail(uint32_t ui32Base)
 694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 739              		.loc 1 694 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 8
 742              		@ frame_needed = 1, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744 0324 80B4     		push	{r7}
 745              		.cfi_def_cfa_offset 4
 746              		.cfi_offset 7, -4
 747 0326 83B0     		sub	sp, sp, #12
 748              		.cfi_def_cfa_offset 16
 749 0328 00AF     		add	r7, sp, #0
 750              		.cfi_def_cfa_register 7
 751 032a 7860     		str	r0, [r7, #4]
 695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the availability of space.
 702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF) ? false : true);
 752              		.loc 1 703 0
 753 032c 7B68     		ldr	r3, [r7, #4]
 754 032e 1833     		adds	r3, r3, #24
 755 0330 1B68     		ldr	r3, [r3]
 756 0332 03F02003 		and	r3, r3, #32
 757 0336 002B     		cmp	r3, #0
 758 0338 14BF     		ite	ne
 759 033a 0023     		movne	r3, #0
 760 033c 0123     		moveq	r3, #1
 761 033e DBB2     		uxtb	r3, r3
 704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 762              		.loc 1 704 0
 763 0340 1846     		mov	r0, r3
 764 0342 0C37     		adds	r7, r7, #12
 765 0344 BD46     		mov	sp, r7
 766              		@ sp needed
 767 0346 5DF8047B 		ldr	r7, [sp], #4
 768 034a 7047     		bx	lr
 769              		.cfi_endproc
 770              	.LFE15:
 772              		.align	2
 773              		.global	UARTCharGetNonBlocking
 774              		.thumb
 775              		.thumb_func
 777              	UARTCharGetNonBlocking:
 778              	.LFB16:
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Receives a character from the specified port
 709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function gets a character from the receive FIFO for the specified
 713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! port.
 714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns the character read from the specified port, cast as a
 716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \e int32_t.  A \b -1 is returned if there are no characters present in the
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! receive FIFO.  The UARTCharsAvail() function should be called before
 718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! attempting to call this function.
 719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** int32_t
 722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharGetNonBlocking(uint32_t ui32Base)
 723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 779              		.loc 1 723 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 8
 782              		@ frame_needed = 1, uses_anonymous_args = 0
 783              		@ link register save eliminated.
 784 034c 80B4     		push	{r7}
 785              		.cfi_def_cfa_offset 4
 786              		.cfi_offset 7, -4
 787 034e 83B0     		sub	sp, sp, #12
 788              		.cfi_def_cfa_offset 16
 789 0350 00AF     		add	r7, sp, #0
 790              		.cfi_def_cfa_register 7
 791 0352 7860     		str	r0, [r7, #4]
 724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // See if there are any characters in the receive FIFO.
 731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(!(HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE))
 792              		.loc 1 732 0
 793 0354 7B68     		ldr	r3, [r7, #4]
 794 0356 1833     		adds	r3, r3, #24
 795 0358 1B68     		ldr	r3, [r3]
 796 035a 03F01003 		and	r3, r3, #16
 797 035e 002B     		cmp	r3, #0
 798 0360 02D1     		bne	.L28
 733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Read and return the next character.
 736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(HWREG(ui32Base + UART_O_DR));
 799              		.loc 1 737 0
 800 0362 7B68     		ldr	r3, [r7, #4]
 801 0364 1B68     		ldr	r3, [r3]
 802 0366 01E0     		b	.L29
 803              	.L28:
 738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
 740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // There are no characters, so return a failure.
 743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(-1);
 804              		.loc 1 744 0
 805 0368 4FF0FF33 		mov	r3, #-1
 806              	.L29:
 745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 807              		.loc 1 746 0
 808 036c 1846     		mov	r0, r3
 809 036e 0C37     		adds	r7, r7, #12
 810 0370 BD46     		mov	sp, r7
 811              		@ sp needed
 812 0372 5DF8047B 		ldr	r7, [sp], #4
 813 0376 7047     		bx	lr
 814              		.cfi_endproc
 815              	.LFE16:
 817              		.align	2
 818              		.global	UARTCharGet
 819              		.thumb
 820              		.thumb_func
 822              	UARTCharGet:
 823              	.LFB17:
 747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Waits for a character from the specified port
 751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function gets a character from the receive FIFO for the specified
 755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! port.  If there are no characters available, this function waits until a
 756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! character is received before returning.
 757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns the character read from the specified port, cast as a
 759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \e int32_t.
 760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** int32_t
 763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharGet(uint32_t ui32Base)
 764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 824              		.loc 1 764 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 8
 827              		@ frame_needed = 1, uses_anonymous_args = 0
 828              		@ link register save eliminated.
 829 0378 80B4     		push	{r7}
 830              		.cfi_def_cfa_offset 4
 831              		.cfi_offset 7, -4
 832 037a 83B0     		sub	sp, sp, #12
 833              		.cfi_def_cfa_offset 16
 834 037c 00AF     		add	r7, sp, #0
 835              		.cfi_def_cfa_register 7
 836 037e 7860     		str	r0, [r7, #4]
 765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait until a char is available.
 772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE)
 837              		.loc 1 773 0
 838 0380 00BF     		nop
 839              	.L31:
 840              		.loc 1 773 0 is_stmt 0 discriminator 1
 841 0382 7B68     		ldr	r3, [r7, #4]
 842 0384 1833     		adds	r3, r3, #24
 843 0386 1B68     		ldr	r3, [r3]
 844 0388 03F01003 		and	r3, r3, #16
 845 038c 002B     		cmp	r3, #0
 846 038e F8D1     		bne	.L31
 774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Now get the char.
 779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_DR));
 847              		.loc 1 780 0 is_stmt 1
 848 0390 7B68     		ldr	r3, [r7, #4]
 849 0392 1B68     		ldr	r3, [r3]
 781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 850              		.loc 1 781 0
 851 0394 1846     		mov	r0, r3
 852 0396 0C37     		adds	r7, r7, #12
 853 0398 BD46     		mov	sp, r7
 854              		@ sp needed
 855 039a 5DF8047B 		ldr	r7, [sp], #4
 856 039e 7047     		bx	lr
 857              		.cfi_endproc
 858              	.LFE17:
 860              		.align	2
 861              		.global	UARTCharPutNonBlocking
 862              		.thumb
 863              		.thumb_func
 865              	UARTCharPutNonBlocking:
 866              	.LFB18:
 782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sends a character to the specified port
 786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Data is the character to be transmitted.
 789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function writes the character \e ui8Data to the transmit FIFO for the
 791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! specified port.  This function does not block, so if there is no space
 792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! available, then a \b false is returned, and the application must retry the
 793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function later.
 794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if the character was successfully placed in the
 796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! transmit FIFO or \b false if there was no space available in the transmit
 797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! FIFO.
 798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** bool
 801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharPutNonBlocking(uint32_t ui32Base, uint8_t ui8Data)
 802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 867              		.loc 1 802 0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 8
 870              		@ frame_needed = 1, uses_anonymous_args = 0
 871              		@ link register save eliminated.
 872 03a0 80B4     		push	{r7}
 873              		.cfi_def_cfa_offset 4
 874              		.cfi_offset 7, -4
 875 03a2 83B0     		sub	sp, sp, #12
 876              		.cfi_def_cfa_offset 16
 877 03a4 00AF     		add	r7, sp, #0
 878              		.cfi_def_cfa_register 7
 879 03a6 7860     		str	r0, [r7, #4]
 880 03a8 0B46     		mov	r3, r1
 881 03aa FB70     		strb	r3, [r7, #3]
 803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // See if there is space in the transmit FIFO.
 810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(!(HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF))
 882              		.loc 1 811 0
 883 03ac 7B68     		ldr	r3, [r7, #4]
 884 03ae 1833     		adds	r3, r3, #24
 885 03b0 1B68     		ldr	r3, [r3]
 886 03b2 03F02003 		and	r3, r3, #32
 887 03b6 002B     		cmp	r3, #0
 888 03b8 04D1     		bne	.L34
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Write this character to the transmit FIFO.
 815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_DR) = ui8Data;
 889              		.loc 1 816 0
 890 03ba 7B68     		ldr	r3, [r7, #4]
 891 03bc FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 892 03be 1A60     		str	r2, [r3]
 817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Success.
 820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(true);
 893              		.loc 1 821 0
 894 03c0 0123     		movs	r3, #1
 895 03c2 00E0     		b	.L35
 896              	.L34:
 822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 823:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
 824:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 825:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 826:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // There is no space in the transmit FIFO, so return a failure.
 827:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 828:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(false);
 897              		.loc 1 828 0
 898 03c4 0023     		movs	r3, #0
 899              	.L35:
 829:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 830:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 900              		.loc 1 830 0
 901 03c6 1846     		mov	r0, r3
 902 03c8 0C37     		adds	r7, r7, #12
 903 03ca BD46     		mov	sp, r7
 904              		@ sp needed
 905 03cc 5DF8047B 		ldr	r7, [sp], #4
 906 03d0 7047     		bx	lr
 907              		.cfi_endproc
 908              	.LFE18:
 910 03d2 00BF     		.align	2
 911              		.global	UARTCharPut
 912              		.thumb
 913              		.thumb_func
 915              	UARTCharPut:
 916              	.LFB19:
 831:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 833:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 834:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Waits to send a character from the specified port
 835:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 836:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 837:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Data is the character to be transmitted.
 838:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sends the character \e ui8Data to the transmit FIFO for the
 840:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! specified port.  If there is no space available in the transmit FIFO, this
 841:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function waits until there is space available before returning.
 842:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 843:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 844:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 845:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 846:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 847:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharPut(uint32_t ui32Base, uint8_t ui8Data)
 848:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 917              		.loc 1 848 0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 8
 920              		@ frame_needed = 1, uses_anonymous_args = 0
 921              		@ link register save eliminated.
 922 03d4 80B4     		push	{r7}
 923              		.cfi_def_cfa_offset 4
 924              		.cfi_offset 7, -4
 925 03d6 83B0     		sub	sp, sp, #12
 926              		.cfi_def_cfa_offset 16
 927 03d8 00AF     		add	r7, sp, #0
 928              		.cfi_def_cfa_register 7
 929 03da 7860     		str	r0, [r7, #4]
 930 03dc 0B46     		mov	r3, r1
 931 03de FB70     		strb	r3, [r7, #3]
 849:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 850:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 851:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 853:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 854:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 855:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait until space is available.
 856:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 857:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF)
 932              		.loc 1 857 0
 933 03e0 00BF     		nop
 934              	.L37:
 935              		.loc 1 857 0 is_stmt 0 discriminator 1
 936 03e2 7B68     		ldr	r3, [r7, #4]
 937 03e4 1833     		adds	r3, r3, #24
 938 03e6 1B68     		ldr	r3, [r3]
 939 03e8 03F02003 		and	r3, r3, #32
 940 03ec 002B     		cmp	r3, #0
 941 03ee F8D1     		bne	.L37
 858:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 859:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 860:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 861:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 862:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Send the char.
 863:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 864:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DR) = ui8Data;
 942              		.loc 1 864 0 is_stmt 1
 943 03f0 7B68     		ldr	r3, [r7, #4]
 944 03f2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 945 03f4 1A60     		str	r2, [r3]
 865:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 946              		.loc 1 865 0
 947 03f6 0C37     		adds	r7, r7, #12
 948 03f8 BD46     		mov	sp, r7
 949              		@ sp needed
 950 03fa 5DF8047B 		ldr	r7, [sp], #4
 951 03fe 7047     		bx	lr
 952              		.cfi_endproc
 953              	.LFE19:
 955              		.align	2
 956              		.global	UARTBreakCtl
 957              		.thumb
 958              		.thumb_func
 960              	UARTBreakCtl:
 961              	.LFB20:
 866:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 867:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 868:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 869:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Causes a BREAK to be sent
 870:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 871:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 872:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param bBreakState controls the output level.
 873:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 874:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Calling this function with \e bBreakState set to \b true asserts a break
 875:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! condition on the UART.  Calling this function with \e bBreakState set to
 876:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b false removes the break condition.  For proper transmission of a break
 877:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! command, the break must be asserted for at least two complete frames.
 878:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 879:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 880:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 881:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 882:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 883:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTBreakCtl(uint32_t ui32Base, bool bBreakState)
 884:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 962              		.loc 1 884 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 8
 965              		@ frame_needed = 1, uses_anonymous_args = 0
 966              		@ link register save eliminated.
 967 0400 80B4     		push	{r7}
 968              		.cfi_def_cfa_offset 4
 969              		.cfi_offset 7, -4
 970 0402 83B0     		sub	sp, sp, #12
 971              		.cfi_def_cfa_offset 16
 972 0404 00AF     		add	r7, sp, #0
 973              		.cfi_def_cfa_register 7
 974 0406 7860     		str	r0, [r7, #4]
 975 0408 0B46     		mov	r3, r1
 976 040a FB70     		strb	r3, [r7, #3]
 885:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 886:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 887:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 888:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 889:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 890:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 891:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the break condition as requested.
 892:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) =
 977              		.loc 1 893 0
 978 040c 7B68     		ldr	r3, [r7, #4]
 979 040e 2C33     		adds	r3, r3, #44
 980 0410 1A46     		mov	r2, r3
 894:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         (bBreakState ?
 895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) | UART_LCRH_BRK) :
 981              		.loc 1 895 0
 982 0412 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 983 0414 002B     		cmp	r3, #0
 984 0416 05D0     		beq	.L39
 985              		.loc 1 895 0 is_stmt 0 discriminator 1
 986 0418 7B68     		ldr	r3, [r7, #4]
 987 041a 2C33     		adds	r3, r3, #44
 988 041c 1B68     		ldr	r3, [r3]
 989 041e 43F00103 		orr	r3, r3, #1
 990 0422 04E0     		b	.L40
 991              	.L39:
 896:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) & ~(UART_LCRH_BRK)));
 992              		.loc 1 896 0 is_stmt 1 discriminator 2
 993 0424 7B68     		ldr	r3, [r7, #4]
 994 0426 2C33     		adds	r3, r3, #44
 995 0428 1B68     		ldr	r3, [r3]
 895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) & ~(UART_LCRH_BRK)));
 996              		.loc 1 895 0 discriminator 2
 997 042a 23F00103 		bic	r3, r3, #1
 998              	.L40:
 893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         (bBreakState ?
 999              		.loc 1 893 0
 1000 042e 1360     		str	r3, [r2]
 897:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1001              		.loc 1 897 0
 1002 0430 0C37     		adds	r7, r7, #12
 1003 0432 BD46     		mov	sp, r7
 1004              		@ sp needed
 1005 0434 5DF8047B 		ldr	r7, [sp], #4
 1006 0438 7047     		bx	lr
 1007              		.cfi_endproc
 1008              	.LFE20:
 1010 043a 00BF     		.align	2
 1011              		.global	UARTBusy
 1012              		.thumb
 1013              		.thumb_func
 1015              	UARTBusy:
 1016              	.LFB21:
 898:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 899:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 900:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 901:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Determines whether the UART transmitter is busy or not
 902:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 903:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 904:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 905:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Allows the caller to determine whether all transmitted bytes have cleared
 906:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the transmitter hardware.  If \b false is returned, the transmit FIFO is
 907:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! empty and all bits of the last transmitted character, including all stop
 908:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! bits, have left the hardware shift register.
 909:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 910:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if the UART is transmitting or \b false if all
 911:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! transmissions are complete.
 912:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 913:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 914:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** bool
 915:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTBusy(uint32_t ui32Base)
 916:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1017              		.loc 1 916 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 8
 1020              		@ frame_needed = 1, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022 043c 80B4     		push	{r7}
 1023              		.cfi_def_cfa_offset 4
 1024              		.cfi_offset 7, -4
 1025 043e 83B0     		sub	sp, sp, #12
 1026              		.cfi_def_cfa_offset 16
 1027 0440 00AF     		add	r7, sp, #0
 1028              		.cfi_def_cfa_register 7
 1029 0442 7860     		str	r0, [r7, #4]
 917:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 918:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the argument.
 919:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 920:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 921:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 922:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 923:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Determine if the UART is busy.
 924:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 925:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ? true : false);
 1030              		.loc 1 925 0
 1031 0444 7B68     		ldr	r3, [r7, #4]
 1032 0446 1833     		adds	r3, r3, #24
 1033 0448 1B68     		ldr	r3, [r3]
 1034 044a 03F00803 		and	r3, r3, #8
 1035 044e 002B     		cmp	r3, #0
 1036 0450 0CBF     		ite	eq
 1037 0452 0023     		moveq	r3, #0
 1038 0454 0123     		movne	r3, #1
 1039 0456 DBB2     		uxtb	r3, r3
 926:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1040              		.loc 1 926 0
 1041 0458 1846     		mov	r0, r3
 1042 045a 0C37     		adds	r7, r7, #12
 1043 045c BD46     		mov	sp, r7
 1044              		@ sp needed
 1045 045e 5DF8047B 		ldr	r7, [sp], #4
 1046 0462 7047     		bx	lr
 1047              		.cfi_endproc
 1048              	.LFE21:
 1050              		.align	2
 1051              		.global	UARTIntRegister
 1052              		.thumb
 1053              		.thumb_func
 1055              	UARTIntRegister:
 1056              	.LFB22:
 927:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 928:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 929:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 930:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Registers an interrupt handler for a UART interrupt
 931:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 932:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pfnHandler is a pointer to the function to be called when the
 934:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UART interrupt occurs.
 935:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 936:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function does the actual registering of the interrupt handler.  This
 937:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function enables the global interrupt in the interrupt controller; specific
 938:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UART interrupts must be enabled via UARTIntEnable().  It is the interrupt
 939:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! handler's responsibility to clear the interrupt source.
 940:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 941:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \sa IntRegister() for important information about registering interrupt
 942:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! handlers.
 943:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 944:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 945:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 946:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 947:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntRegister(uint32_t ui32Base, void (*pfnHandler)(void))
 949:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1057              		.loc 1 949 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 16
 1060              		@ frame_needed = 1, uses_anonymous_args = 0
 1061 0464 80B5     		push	{r7, lr}
 1062              		.cfi_def_cfa_offset 8
 1063              		.cfi_offset 7, -8
 1064              		.cfi_offset 14, -4
 1065 0466 84B0     		sub	sp, sp, #16
 1066              		.cfi_def_cfa_offset 24
 1067 0468 00AF     		add	r7, sp, #0
 1068              		.cfi_def_cfa_register 7
 1069 046a 7860     		str	r0, [r7, #4]
 1070 046c 3960     		str	r1, [r7]
 950:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Int;
 951:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 952:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 954:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 955:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 956:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 958:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Determine the interrupt number based on the UART port.
 959:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 960:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Int = ((ui32Base == UART0_BASE) ? INT_UART0 : INT_UART1);
 1071              		.loc 1 960 0
 1072 046e 7A68     		ldr	r2, [r7, #4]
 1073 0470 4FF44043 		mov	r3, #49152
 1074 0474 C4F20003 		movt	r3, 16384
 1075 0478 9A42     		cmp	r2, r3
 1076 047a 01D1     		bne	.L44
 1077              		.loc 1 960 0 is_stmt 0 discriminator 1
 1078 047c 1523     		movs	r3, #21
 1079 047e 00E0     		b	.L45
 1080              	.L44:
 1081              		.loc 1 960 0 discriminator 2
 1082 0480 1623     		movs	r3, #22
 1083              	.L45:
 1084              		.loc 1 960 0 discriminator 3
 1085 0482 FB60     		str	r3, [r7, #12]
 961:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 962:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 963:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Register the interrupt handler.
 964:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 965:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     IntRegister(ui32Int, pfnHandler);
 1086              		.loc 1 965 0 is_stmt 1 discriminator 3
 1087 0484 F868     		ldr	r0, [r7, #12]
 1088 0486 3968     		ldr	r1, [r7]
 1089 0488 FFF7FEFF 		bl	IntRegister
 966:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 967:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable the UART interrupt.
 969:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 970:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     IntEnable(ui32Int);
 1090              		.loc 1 970 0 discriminator 3
 1091 048c F868     		ldr	r0, [r7, #12]
 1092 048e FFF7FEFF 		bl	IntEnable
 971:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1093              		.loc 1 971 0 discriminator 3
 1094 0492 1037     		adds	r7, r7, #16
 1095 0494 BD46     		mov	sp, r7
 1096              		@ sp needed
 1097 0496 80BD     		pop	{r7, pc}
 1098              		.cfi_endproc
 1099              	.LFE22:
 1101              		.align	2
 1102              		.global	UARTIntUnregister
 1103              		.thumb
 1104              		.thumb_func
 1106              	UARTIntUnregister:
 1107              	.LFB23:
 972:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 973:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 974:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 975:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Unregisters an interrupt handler for a UART interrupt
 976:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 977:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 978:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 979:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function does the actual unregistering of the interrupt handler.  It
 980:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! clears the handler to be called when a UART interrupt occurs.  This
 981:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function also masks off the interrupt in the interrupt controller so that
 982:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the interrupt handler no longer is called.
 983:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 984:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \sa IntRegister() for important information about registering interrupt
 985:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! handlers.
 986:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 987:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 988:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 989:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 990:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 991:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntUnregister(uint32_t ui32Base)
 992:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1108              		.loc 1 992 0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 16
 1111              		@ frame_needed = 1, uses_anonymous_args = 0
 1112 0498 80B5     		push	{r7, lr}
 1113              		.cfi_def_cfa_offset 8
 1114              		.cfi_offset 7, -8
 1115              		.cfi_offset 14, -4
 1116 049a 84B0     		sub	sp, sp, #16
 1117              		.cfi_def_cfa_offset 24
 1118 049c 00AF     		add	r7, sp, #0
 1119              		.cfi_def_cfa_register 7
 1120 049e 7860     		str	r0, [r7, #4]
 993:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Int;
 994:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 995:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 996:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 997:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 998:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 999:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1000:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1001:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Determine the interrupt number based on the UART port.
1002:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1003:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Int = ((ui32Base == UART0_BASE) ? INT_UART0 : INT_UART1);
 1121              		.loc 1 1003 0
 1122 04a0 7A68     		ldr	r2, [r7, #4]
 1123 04a2 4FF44043 		mov	r3, #49152
 1124 04a6 C4F20003 		movt	r3, 16384
 1125 04aa 9A42     		cmp	r2, r3
 1126 04ac 01D1     		bne	.L47
 1127              		.loc 1 1003 0 is_stmt 0 discriminator 1
 1128 04ae 1523     		movs	r3, #21
 1129 04b0 00E0     		b	.L48
 1130              	.L47:
 1131              		.loc 1 1003 0 discriminator 2
 1132 04b2 1623     		movs	r3, #22
 1133              	.L48:
 1134              		.loc 1 1003 0 discriminator 3
 1135 04b4 FB60     		str	r3, [r7, #12]
1004:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1005:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1006:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the interrupt.
1007:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1008:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     IntDisable(ui32Int);
 1136              		.loc 1 1008 0 is_stmt 1 discriminator 3
 1137 04b6 F868     		ldr	r0, [r7, #12]
 1138 04b8 FFF7FEFF 		bl	IntDisable
1009:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1010:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1011:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Unregister the interrupt handler.
1012:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1013:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     IntUnregister(ui32Int);
 1139              		.loc 1 1013 0 discriminator 3
 1140 04bc F868     		ldr	r0, [r7, #12]
 1141 04be FFF7FEFF 		bl	IntUnregister
1014:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1142              		.loc 1 1014 0 discriminator 3
 1143 04c2 1037     		adds	r7, r7, #16
 1144 04c4 BD46     		mov	sp, r7
 1145              		@ sp needed
 1146 04c6 80BD     		pop	{r7, pc}
 1147              		.cfi_endproc
 1148              	.LFE23:
 1150              		.align	2
 1151              		.global	UARTIntEnable
 1152              		.thumb
 1153              		.thumb_func
 1155              	UARTIntEnable:
 1156              	.LFB24:
1015:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1017:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1018:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables individual UART interrupt sources
1019:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1020:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1021:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be enabled.
1022:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1023:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function enables the indicated UART interrupt sources.  Only the
1024:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! sources that are enabled can be reflected to the processor interrupt;
1025:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! disabled sources have no effect on the processor.
1026:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1027:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The \e ui32IntFlags parameter is the logical OR of any of the following:
1028:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1029:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_9BIT - 9-bit address match interrupt
1030:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_OE - Overrun Error interrupt
1031:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_BE - Break Error interrupt
1032:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_PE - Parity Error interrupt
1033:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_FE - Framing Error interrupt
1034:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_RT - Receive Timeout interrupt
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_TX - Transmit interrupt
1036:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_RX - Receive interrupt
1037:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_CTS - CTS interrupt (UART1 only)
1038:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1039:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1040:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1041:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1042:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1043:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags)
1044:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1157              		.loc 1 1044 0
 1158              		.cfi_startproc
 1159              		@ args = 0, pretend = 0, frame = 8
 1160              		@ frame_needed = 1, uses_anonymous_args = 0
 1161              		@ link register save eliminated.
 1162 04c8 80B4     		push	{r7}
 1163              		.cfi_def_cfa_offset 4
 1164              		.cfi_offset 7, -4
 1165 04ca 83B0     		sub	sp, sp, #12
 1166              		.cfi_def_cfa_offset 16
 1167 04cc 00AF     		add	r7, sp, #0
 1168              		.cfi_def_cfa_register 7
 1169 04ce 7860     		str	r0, [r7, #4]
 1170 04d0 3960     		str	r1, [r7]
1045:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1046:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1047:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1048:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1049:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1050:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1051:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable the specified interrupts.
1052:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1053:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IM) |= ui32IntFlags;
 1171              		.loc 1 1053 0
 1172 04d2 7B68     		ldr	r3, [r7, #4]
 1173 04d4 3833     		adds	r3, r3, #56
 1174 04d6 7A68     		ldr	r2, [r7, #4]
 1175 04d8 3832     		adds	r2, r2, #56
 1176 04da 1168     		ldr	r1, [r2]
 1177 04dc 3A68     		ldr	r2, [r7]
 1178 04de 0A43     		orrs	r2, r2, r1
 1179 04e0 1A60     		str	r2, [r3]
1054:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1180              		.loc 1 1054 0
 1181 04e2 0C37     		adds	r7, r7, #12
 1182 04e4 BD46     		mov	sp, r7
 1183              		@ sp needed
 1184 04e6 5DF8047B 		ldr	r7, [sp], #4
 1185 04ea 7047     		bx	lr
 1186              		.cfi_endproc
 1187              	.LFE24:
 1189              		.align	2
 1190              		.global	UARTIntDisable
 1191              		.thumb
 1192              		.thumb_func
 1194              	UARTIntDisable:
 1195              	.LFB25:
1055:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1056:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1057:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1058:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables individual UART interrupt sources
1059:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1060:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1061:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be disabled.
1062:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1063:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function disables the indicated UART interrupt sources.  Only the
1064:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! sources that are enabled can be reflected to the processor interrupt;
1065:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! disabled sources have no effect on the processor.
1066:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1067:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
1068:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! parameter to UARTIntEnable().
1069:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1070:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1071:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1072:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1073:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1074:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags)
1075:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1196              		.loc 1 1075 0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 8
 1199              		@ frame_needed = 1, uses_anonymous_args = 0
 1200              		@ link register save eliminated.
 1201 04ec 80B4     		push	{r7}
 1202              		.cfi_def_cfa_offset 4
 1203              		.cfi_offset 7, -4
 1204 04ee 83B0     		sub	sp, sp, #12
 1205              		.cfi_def_cfa_offset 16
 1206 04f0 00AF     		add	r7, sp, #0
 1207              		.cfi_def_cfa_register 7
 1208 04f2 7860     		str	r0, [r7, #4]
 1209 04f4 3960     		str	r1, [r7]
1076:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1077:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1078:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1079:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1080:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1081:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1082:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the specified interrupts.
1083:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1084:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IM) &= ~(ui32IntFlags);
 1210              		.loc 1 1084 0
 1211 04f6 7B68     		ldr	r3, [r7, #4]
 1212 04f8 3833     		adds	r3, r3, #56
 1213 04fa 7A68     		ldr	r2, [r7, #4]
 1214 04fc 3832     		adds	r2, r2, #56
 1215 04fe 1168     		ldr	r1, [r2]
 1216 0500 3A68     		ldr	r2, [r7]
 1217 0502 D243     		mvns	r2, r2
 1218 0504 0A40     		ands	r2, r2, r1
 1219 0506 1A60     		str	r2, [r3]
1085:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1220              		.loc 1 1085 0
 1221 0508 0C37     		adds	r7, r7, #12
 1222 050a BD46     		mov	sp, r7
 1223              		@ sp needed
 1224 050c 5DF8047B 		ldr	r7, [sp], #4
 1225 0510 7047     		bx	lr
 1226              		.cfi_endproc
 1227              	.LFE25:
 1229 0512 00BF     		.align	2
 1230              		.global	UARTIntStatus
 1231              		.thumb
 1232              		.thumb_func
 1234              	UARTIntStatus:
 1235              	.LFB26:
1086:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1087:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1088:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1089:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the current interrupt status
1090:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1091:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1092:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param bMasked is \b false if the raw interrupt status is required and
1093:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b true if the masked interrupt status is required.
1094:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1095:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns the interrupt status for the specified UART.  Either
1096:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the raw interrupt status or the status of interrupts that are allowed to
1097:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! reflect to the processor can be returned.
1098:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1099:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns the current interrupt status, enumerated as a bit field of
1100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! values described in UARTIntEnable().
1101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
1104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntStatus(uint32_t ui32Base, bool bMasked)
1105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1236              		.loc 1 1105 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 8
 1239              		@ frame_needed = 1, uses_anonymous_args = 0
 1240              		@ link register save eliminated.
 1241 0514 80B4     		push	{r7}
 1242              		.cfi_def_cfa_offset 4
 1243              		.cfi_offset 7, -4
 1244 0516 83B0     		sub	sp, sp, #12
 1245              		.cfi_def_cfa_offset 16
 1246 0518 00AF     		add	r7, sp, #0
 1247              		.cfi_def_cfa_register 7
 1248 051a 7860     		str	r0, [r7, #4]
 1249 051c 0B46     		mov	r3, r1
 1250 051e FB70     		strb	r3, [r7, #3]
1106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return either the interrupt status or the raw interrupt status as
1113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // requested.
1114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(bMasked)
 1251              		.loc 1 1115 0
 1252 0520 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1253 0522 002B     		cmp	r3, #0
 1254 0524 03D0     		beq	.L52
1116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
1117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(HWREG(ui32Base + UART_O_MIS));
 1255              		.loc 1 1117 0
 1256 0526 7B68     		ldr	r3, [r7, #4]
 1257 0528 4033     		adds	r3, r3, #64
 1258 052a 1B68     		ldr	r3, [r3]
 1259 052c 02E0     		b	.L53
 1260              	.L52:
1118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
1119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
1120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
1121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(HWREG(ui32Base + UART_O_RIS));
 1261              		.loc 1 1121 0
 1262 052e 7B68     		ldr	r3, [r7, #4]
 1263 0530 3C33     		adds	r3, r3, #60
 1264 0532 1B68     		ldr	r3, [r3]
 1265              	.L53:
1122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
1123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1266              		.loc 1 1123 0
 1267 0534 1846     		mov	r0, r3
 1268 0536 0C37     		adds	r7, r7, #12
 1269 0538 BD46     		mov	sp, r7
 1270              		@ sp needed
 1271 053a 5DF8047B 		ldr	r7, [sp], #4
 1272 053e 7047     		bx	lr
 1273              		.cfi_endproc
 1274              	.LFE26:
 1276              		.align	2
 1277              		.global	UARTIntClear
 1278              		.thumb
 1279              		.thumb_func
 1281              	UARTIntClear:
 1282              	.LFB27:
1124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Clears UART interrupt sources
1128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
1131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The specified UART interrupt sources are cleared, so that they no longer
1133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! assert.  This function must be called in the interrupt handler to keep the
1134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! interrupt from being recognized again immediately upon exit.
1135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
1137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! parameter to UARTIntEnable().
1138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \note Because there is a write buffer in the Cortex-M3 processor, it may
1140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! take several clock cycles before the interrupt source is actually cleared.
1141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
1142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the interrupt handler (as opposed to the very last action) to avoid
1143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returning from the interrupt handler before the interrupt source is
1144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
1145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! being immediately reentered (because the interrupt controller still sees
1146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the interrupt source asserted).
1147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntClear(uint32_t ui32Base, uint32_t ui32IntFlags)
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1283              		.loc 1 1153 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 8
 1286              		@ frame_needed = 1, uses_anonymous_args = 0
 1287              		@ link register save eliminated.
 1288 0540 80B4     		push	{r7}
 1289              		.cfi_def_cfa_offset 4
 1290              		.cfi_offset 7, -4
 1291 0542 83B0     		sub	sp, sp, #12
 1292              		.cfi_def_cfa_offset 16
 1293 0544 00AF     		add	r7, sp, #0
 1294              		.cfi_def_cfa_register 7
 1295 0546 7860     		str	r0, [r7, #4]
 1296 0548 3960     		str	r1, [r7]
1154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Clear the requested interrupt sources.
1161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 1297              		.loc 1 1162 0
 1298 054a 7B68     		ldr	r3, [r7, #4]
 1299 054c 4433     		adds	r3, r3, #68
 1300 054e 3A68     		ldr	r2, [r7]
 1301 0550 1A60     		str	r2, [r3]
1163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1302              		.loc 1 1163 0
 1303 0552 0C37     		adds	r7, r7, #12
 1304 0554 BD46     		mov	sp, r7
 1305              		@ sp needed
 1306 0556 5DF8047B 		ldr	r7, [sp], #4
 1307 055a 7047     		bx	lr
 1308              		.cfi_endproc
 1309              	.LFE27:
 1311              		.align	2
 1312              		.global	UARTDMAEnable
 1313              		.thumb
 1314              		.thumb_func
 1316              	UARTDMAEnable:
 1317              	.LFB28:
1164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enable UART DMA operation
1168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to enable.
1171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The specified UART DMA features are enabled.  The UART can be
1173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! configured to use DMA for transmit or receive, and to disable
1174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! receive if an error occurs.  The \e ui32DMAFlags parameter is the
1175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! logical OR of any of the following values:
1176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_RX - enable DMA for receive
1178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_TX - enable DMA for transmit
1179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_ERR_RXSTOP - disable DMA receive on UART error
1180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \note The uDMA controller must also be set up before DMA can be used
1182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! with the UART.
1183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags)
1189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1318              		.loc 1 1189 0
 1319              		.cfi_startproc
 1320              		@ args = 0, pretend = 0, frame = 8
 1321              		@ frame_needed = 1, uses_anonymous_args = 0
 1322              		@ link register save eliminated.
 1323 055c 80B4     		push	{r7}
 1324              		.cfi_def_cfa_offset 4
 1325              		.cfi_offset 7, -4
 1326 055e 83B0     		sub	sp, sp, #12
 1327              		.cfi_def_cfa_offset 16
 1328 0560 00AF     		add	r7, sp, #0
 1329              		.cfi_def_cfa_register 7
 1330 0562 7860     		str	r0, [r7, #4]
 1331 0564 3960     		str	r1, [r7]
1190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the requested bits in the UART DMA control register.
1197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DMACTL) |= ui32DMAFlags;
 1332              		.loc 1 1198 0
 1333 0566 7B68     		ldr	r3, [r7, #4]
 1334 0568 4833     		adds	r3, r3, #72
 1335 056a 7A68     		ldr	r2, [r7, #4]
 1336 056c 4832     		adds	r2, r2, #72
 1337 056e 1168     		ldr	r1, [r2]
 1338 0570 3A68     		ldr	r2, [r7]
 1339 0572 0A43     		orrs	r2, r2, r1
 1340 0574 1A60     		str	r2, [r3]
1199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1341              		.loc 1 1199 0
 1342 0576 0C37     		adds	r7, r7, #12
 1343 0578 BD46     		mov	sp, r7
 1344              		@ sp needed
 1345 057a 5DF8047B 		ldr	r7, [sp], #4
 1346 057e 7047     		bx	lr
 1347              		.cfi_endproc
 1348              	.LFE28:
 1350              		.align	2
 1351              		.global	UARTDMADisable
 1352              		.thumb
 1353              		.thumb_func
 1355              	UARTDMADisable:
 1356              	.LFB29:
1200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disable UART DMA operation
1204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to disable.
1207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function is used to disable UART DMA features that were enabled
1209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! by UARTDMAEnable().  The specified UART DMA features are disabled.  The
1210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \e ui32DMAFlags parameter is the logical OR of any of the following values:
1211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_RX - disable DMA for receive
1213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_TX - disable DMA for transmit
1214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_ERR_RXSTOP - do not disable DMA receive on UART error
1215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags)
1221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1357              		.loc 1 1221 0
 1358              		.cfi_startproc
 1359              		@ args = 0, pretend = 0, frame = 8
 1360              		@ frame_needed = 1, uses_anonymous_args = 0
 1361              		@ link register save eliminated.
 1362 0580 80B4     		push	{r7}
 1363              		.cfi_def_cfa_offset 4
 1364              		.cfi_offset 7, -4
 1365 0582 83B0     		sub	sp, sp, #12
 1366              		.cfi_def_cfa_offset 16
 1367 0584 00AF     		add	r7, sp, #0
 1368              		.cfi_def_cfa_register 7
 1369 0586 7860     		str	r0, [r7, #4]
 1370 0588 3960     		str	r1, [r7]
1222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Clear the requested bits in the UART DMA control register.
1229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DMACTL) &= ~ui32DMAFlags;
 1371              		.loc 1 1230 0
 1372 058a 7B68     		ldr	r3, [r7, #4]
 1373 058c 4833     		adds	r3, r3, #72
 1374 058e 7A68     		ldr	r2, [r7, #4]
 1375 0590 4832     		adds	r2, r2, #72
 1376 0592 1168     		ldr	r1, [r2]
 1377 0594 3A68     		ldr	r2, [r7]
 1378 0596 D243     		mvns	r2, r2
 1379 0598 0A40     		ands	r2, r2, r1
 1380 059a 1A60     		str	r2, [r3]
1231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1381              		.loc 1 1231 0
 1382 059c 0C37     		adds	r7, r7, #12
 1383 059e BD46     		mov	sp, r7
 1384              		@ sp needed
 1385 05a0 5DF8047B 		ldr	r7, [sp], #4
 1386 05a4 7047     		bx	lr
 1387              		.cfi_endproc
 1388              	.LFE29:
 1390 05a6 00BF     		.align	2
 1391              		.global	UARTRxErrorGet
 1392              		.thumb
 1393              		.thumb_func
 1395              	UARTRxErrorGet:
 1396              	.LFB30:
1232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets current receiver errors
1236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns the current state of each of the 4 receiver error
1240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! sources.  The returned errors are equivalent to the four error bits
1241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returned via the previous call to UARTCharGet() or UARTCharGetNonBlocking()
1242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! with the exception that the overrun error is set immediately the overrun
1243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! occurs rather than when a character is next read.
1244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns a logical OR combination of the receiver error flags,
1246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_RXERROR_FRAMING, \b UART_RXERROR_PARITY, \b UART_RXERROR_BREAK
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and \b UART_RXERROR_OVERRUN.
1248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
1251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTRxErrorGet(uint32_t ui32Base)
1252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1397              		.loc 1 1252 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 8
 1400              		@ frame_needed = 1, uses_anonymous_args = 0
 1401              		@ link register save eliminated.
 1402 05a8 80B4     		push	{r7}
 1403              		.cfi_def_cfa_offset 4
 1404              		.cfi_offset 7, -4
 1405 05aa 83B0     		sub	sp, sp, #12
 1406              		.cfi_def_cfa_offset 16
 1407 05ac 00AF     		add	r7, sp, #0
 1408              		.cfi_def_cfa_register 7
 1409 05ae 7860     		str	r0, [r7, #4]
1253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the current value of the receive status register.
1260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_RSR) & 0x0000000F);
 1410              		.loc 1 1261 0
 1411 05b0 7B68     		ldr	r3, [r7, #4]
 1412 05b2 0433     		adds	r3, r3, #4
 1413 05b4 1B68     		ldr	r3, [r3]
 1414 05b6 03F00F03 		and	r3, r3, #15
1262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1415              		.loc 1 1262 0
 1416 05ba 1846     		mov	r0, r3
 1417 05bc 0C37     		adds	r7, r7, #12
 1418 05be BD46     		mov	sp, r7
 1419              		@ sp needed
 1420 05c0 5DF8047B 		ldr	r7, [sp], #4
 1421 05c4 7047     		bx	lr
 1422              		.cfi_endproc
 1423              	.LFE30:
 1425 05c6 00BF     		.align	2
 1426              		.global	UARTRxErrorClear
 1427              		.thumb
 1428              		.thumb_func
 1430              	UARTRxErrorClear:
 1431              	.LFB31:
1263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Clears all reported receiver errors
1267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function is used to clear all receiver error conditions reported via
1271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTRxErrorGet().  If using the overrun, framing error, parity error or
1272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! break interrupts, this function must be called after clearing the interrupt
1273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! to ensure that later errors of the same type trigger another interrupt.
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTRxErrorClear(uint32_t ui32Base)
1280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1432              		.loc 1 1280 0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 8
 1435              		@ frame_needed = 1, uses_anonymous_args = 0
 1436              		@ link register save eliminated.
 1437 05c8 80B4     		push	{r7}
 1438              		.cfi_def_cfa_offset 4
 1439              		.cfi_offset 7, -4
 1440 05ca 83B0     		sub	sp, sp, #12
 1441              		.cfi_def_cfa_offset 16
 1442 05cc 00AF     		add	r7, sp, #0
 1443              		.cfi_def_cfa_register 7
 1444 05ce 7860     		str	r0, [r7, #4]
1281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Any write to the Error Clear Register will clear all bits which are
1288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // currently set.
1289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_ECR) = 0;
 1445              		.loc 1 1290 0
 1446 05d0 7B68     		ldr	r3, [r7, #4]
 1447 05d2 0433     		adds	r3, r3, #4
 1448 05d4 0022     		movs	r2, #0
 1449 05d6 1A60     		str	r2, [r3]
1291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1450              		.loc 1 1291 0
 1451 05d8 0C37     		adds	r7, r7, #12
 1452 05da BD46     		mov	sp, r7
 1453              		@ sp needed
 1454 05dc 5DF8047B 		ldr	r7, [sp], #4
 1455 05e0 7047     		bx	lr
 1456              		.cfi_endproc
 1457              	.LFE31:
 1459 05e2 00BF     		.align	2
 1460              		.global	UARTClockSourceSet
 1461              		.thumb
 1462              		.thumb_func
 1464              	UARTClockSourceSet:
 1465              	.LFB32:
1292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the baud clock source for the specified UART
1296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Source is the baud clock source for the UART.
1299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function allows the baud clock source for the UART to be selected.
1301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The possible clock source are the system clock (\b UART_CLOCK_SYSTEM) or
1302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the precision internal oscillator (\b UART_CLOCK_PIOSC).
1303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! If \b UART_CLOCK_SYSTEM is chosen, the IO clock frequency must thus be
1305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! queried by SysCtrlClcokSet().
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! If \b UART_CLOCK_PIOSC the SysCtrlIOClcokSet() function must be used.
1307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Changing the baud clock source will change the baud rate generated by the
1309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UART.  Therefore, the baud rate should be reconfigured after any change to
1310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the baud clock source.
1311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \note If the precision internal oscillator (\b UART_CLOCK_PIOSC) is used
1313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! for the UART baud clock, the system clock frequency must be at least
1314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! 9 MHz in Run mode.
1315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \sa UARTConfigSetExpClk()
1317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTClockSourceSet(uint32_t ui32Base, uint32_t ui32Source)
1323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1466              		.loc 1 1323 0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 8
 1469              		@ frame_needed = 1, uses_anonymous_args = 0
 1470              		@ link register save eliminated.
 1471 05e4 80B4     		push	{r7}
 1472              		.cfi_def_cfa_offset 4
 1473              		.cfi_offset 7, -4
 1474 05e6 83B0     		sub	sp, sp, #12
 1475              		.cfi_def_cfa_offset 16
 1476 05e8 00AF     		add	r7, sp, #0
 1477              		.cfi_def_cfa_register 7
 1478 05ea 7860     		str	r0, [r7, #4]
 1479 05ec 3960     		str	r1, [r7]
1324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32Source == UART_CLOCK_SYSTEM) || (ui32Source == UART_CLOCK_PIOSC));
1329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the UART clock source.
1332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CC) = ui32Source;
 1480              		.loc 1 1333 0
 1481 05ee 7B68     		ldr	r3, [r7, #4]
 1482 05f0 03F6C873 		addw	r3, r3, #4040
 1483 05f4 3A68     		ldr	r2, [r7]
 1484 05f6 1A60     		str	r2, [r3]
1334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1485              		.loc 1 1334 0
 1486 05f8 0C37     		adds	r7, r7, #12
 1487 05fa BD46     		mov	sp, r7
 1488              		@ sp needed
 1489 05fc 5DF8047B 		ldr	r7, [sp], #4
 1490 0600 7047     		bx	lr
 1491              		.cfi_endproc
 1492              	.LFE32:
 1494 0602 00BF     		.align	2
 1495              		.global	UARTClockSourceGet
 1496              		.thumb
 1497              		.thumb_func
 1499              	UARTClockSourceGet:
 1500              	.LFB33:
1335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the baud clock source for the specified UART
1339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns the baud clock source for the specified UART.  The
1343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! possible baud clock source are the system clock (\b UART_CLOCK_SYSTEM) or
1344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the precision internal oscillator (\b UART_CLOCK_PIOSC).
1345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
1350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTClockSourceGet(uint32_t ui32Base)
1351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1501              		.loc 1 1351 0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 8
 1504              		@ frame_needed = 1, uses_anonymous_args = 0
 1505              		@ link register save eliminated.
 1506 0604 80B4     		push	{r7}
 1507              		.cfi_def_cfa_offset 4
 1508              		.cfi_offset 7, -4
 1509 0606 83B0     		sub	sp, sp, #12
 1510              		.cfi_def_cfa_offset 16
 1511 0608 00AF     		add	r7, sp, #0
 1512              		.cfi_def_cfa_register 7
 1513 060a 7860     		str	r0, [r7, #4]
1352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the UART clock source.
1359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_CC));
 1514              		.loc 1 1360 0
 1515 060c 7B68     		ldr	r3, [r7, #4]
 1516 060e 03F6C873 		addw	r3, r3, #4040
 1517 0612 1B68     		ldr	r3, [r3]
1361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1518              		.loc 1 1361 0
 1519 0614 1846     		mov	r0, r3
 1520 0616 0C37     		adds	r7, r7, #12
 1521 0618 BD46     		mov	sp, r7
 1522              		@ sp needed
 1523 061a 5DF8047B 		ldr	r7, [sp], #4
 1524 061e 7047     		bx	lr
 1525              		.cfi_endproc
 1526              	.LFE33:
 1528              		.align	2
 1529              		.global	UART9BitEnable
 1530              		.thumb
 1531              		.thumb_func
 1533              	UART9BitEnable:
 1534              	.LFB34:
1362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables 9-bit mode on the specified UART
1366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function enables the 9-bit operational mode of the UART.
1370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UART9BitEnable(uint32_t ui32Base)
1376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1535              		.loc 1 1376 0
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 8
 1538              		@ frame_needed = 1, uses_anonymous_args = 0
 1539              		@ link register save eliminated.
 1540 0620 80B4     		push	{r7}
 1541              		.cfi_def_cfa_offset 4
 1542              		.cfi_offset 7, -4
 1543 0622 83B0     		sub	sp, sp, #12
 1544              		.cfi_def_cfa_offset 16
 1545 0624 00AF     		add	r7, sp, #0
 1546              		.cfi_def_cfa_register 7
 1547 0626 7860     		str	r0, [r7, #4]
1377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable 9-bit mode.
1384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) |= UART_NINEBITADDR_NINEBITEN;
 1548              		.loc 1 1385 0
 1549 0628 7B68     		ldr	r3, [r7, #4]
 1550 062a A433     		adds	r3, r3, #164
 1551 062c 7A68     		ldr	r2, [r7, #4]
 1552 062e A432     		adds	r2, r2, #164
 1553 0630 1268     		ldr	r2, [r2]
 1554 0632 42F40042 		orr	r2, r2, #32768
 1555 0636 1A60     		str	r2, [r3]
1386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1556              		.loc 1 1386 0
 1557 0638 0C37     		adds	r7, r7, #12
 1558 063a BD46     		mov	sp, r7
 1559              		@ sp needed
 1560 063c 5DF8047B 		ldr	r7, [sp], #4
 1561 0640 7047     		bx	lr
 1562              		.cfi_endproc
 1563              	.LFE34:
 1565 0642 00BF     		.align	2
 1566              		.global	UART9BitDisable
 1567              		.thumb
 1568              		.thumb_func
 1570              	UART9BitDisable:
 1571              	.LFB35:
1387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables 9-bit mode on the specified UART
1391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function disables the 9-bit operational mode of the UART.
1395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UART9BitDisable(uint32_t ui32Base)
1401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1572              		.loc 1 1401 0
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 8
 1575              		@ frame_needed = 1, uses_anonymous_args = 0
 1576              		@ link register save eliminated.
 1577 0644 80B4     		push	{r7}
 1578              		.cfi_def_cfa_offset 4
 1579              		.cfi_offset 7, -4
 1580 0646 83B0     		sub	sp, sp, #12
 1581              		.cfi_def_cfa_offset 16
 1582 0648 00AF     		add	r7, sp, #0
 1583              		.cfi_def_cfa_register 7
 1584 064a 7860     		str	r0, [r7, #4]
1402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable 9-bit mode.
1409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) &= ~UART_NINEBITADDR_NINEBITEN;
 1585              		.loc 1 1410 0
 1586 064c 7B68     		ldr	r3, [r7, #4]
 1587 064e A433     		adds	r3, r3, #164
 1588 0650 7A68     		ldr	r2, [r7, #4]
 1589 0652 A432     		adds	r2, r2, #164
 1590 0654 1268     		ldr	r2, [r2]
 1591 0656 22F40042 		bic	r2, r2, #32768
 1592 065a 1A60     		str	r2, [r3]
1411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1593              		.loc 1 1411 0
 1594 065c 0C37     		adds	r7, r7, #12
 1595 065e BD46     		mov	sp, r7
 1596              		@ sp needed
 1597 0660 5DF8047B 		ldr	r7, [sp], #4
 1598 0664 7047     		bx	lr
 1599              		.cfi_endproc
 1600              	.LFE35:
 1602 0666 00BF     		.align	2
 1603              		.global	UART9BitAddrSet
 1604              		.thumb
 1605              		.thumb_func
 1607              	UART9BitAddrSet:
 1608              	.LFB36:
1412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the device address(es) for 9-bit mode
1416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Addr is the device address.
1419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Mask is the device address mask.
1420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sets the device address, or range of device addresses, that
1422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! respond to requests on the 9-bit UART port.  The received address is masked
1423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! with the mask and then compared against the given address, allowing either
1424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! a single address (if \b ui8Mask is 0xff) or a set of addresses to be
1425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! matched.
1426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UART9BitAddrSet(uint32_t ui32Base, uint8_t ui8Addr,
1432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                 uint8_t ui8Mask)
1433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1609              		.loc 1 1433 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 8
 1612              		@ frame_needed = 1, uses_anonymous_args = 0
 1613              		@ link register save eliminated.
 1614 0668 80B4     		push	{r7}
 1615              		.cfi_def_cfa_offset 4
 1616              		.cfi_offset 7, -4
 1617 066a 83B0     		sub	sp, sp, #12
 1618              		.cfi_def_cfa_offset 16
 1619 066c 00AF     		add	r7, sp, #0
 1620              		.cfi_def_cfa_register 7
 1621 066e 7860     		str	r0, [r7, #4]
 1622 0670 1346     		mov	r3, r2
 1623 0672 0A46     		mov	r2, r1
 1624 0674 FA70     		strb	r2, [r7, #3]
 1625 0676 BB70     		strb	r3, [r7, #2]
1434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the address and mask.
1441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) = ui8Addr << UART_NINEBITADDR_ADDR_S;
 1626              		.loc 1 1442 0
 1627 0678 7B68     		ldr	r3, [r7, #4]
 1628 067a A433     		adds	r3, r3, #164
 1629 067c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1630 067e 1A60     		str	r2, [r3]
1443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITAMASK) = ui8Mask << UART_NINEBITAMASK_MASK_S;
 1631              		.loc 1 1443 0
 1632 0680 7B68     		ldr	r3, [r7, #4]
 1633 0682 A833     		adds	r3, r3, #168
 1634 0684 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 1635 0686 1A60     		str	r2, [r3]
1444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1636              		.loc 1 1444 0
 1637 0688 0C37     		adds	r7, r7, #12
 1638 068a BD46     		mov	sp, r7
 1639              		@ sp needed
 1640 068c 5DF8047B 		ldr	r7, [sp], #4
 1641 0690 7047     		bx	lr
 1642              		.cfi_endproc
 1643              	.LFE36:
 1645 0692 00BF     		.align	2
 1646              		.global	UART9BitAddrSend
 1647              		.thumb
 1648              		.thumb_func
 1650              	UART9BitAddrSend:
 1651              	.LFB37:
1445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sends an address character from the specified port when operating in 9-bit
1449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! mode
1450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Addr is the address to be transmitted.
1453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function waits until all data has been sent from the specified port
1455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and then sends the given address as an address byte.  It then waits until
1456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the address byte has been transmitted before returning.
1457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The normal data functions (UARTCharPut(), UARTCharPutNonBlocking(),
1459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTCharGet(), and UARTCharGetNonBlocking()) are used to send and receive
1460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! data characters in 9-bit mode.
1461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UART9BitAddrSend(uint32_t ui32Base, uint8_t ui8Addr)
1467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1652              		.loc 1 1467 0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 16
 1655              		@ frame_needed = 1, uses_anonymous_args = 0
 1656              		@ link register save eliminated.
 1657 0694 80B4     		push	{r7}
 1658              		.cfi_def_cfa_offset 4
 1659              		.cfi_offset 7, -4
 1660 0696 85B0     		sub	sp, sp, #20
 1661              		.cfi_def_cfa_offset 24
 1662 0698 00AF     		add	r7, sp, #0
 1663              		.cfi_def_cfa_register 7
 1664 069a 7860     		str	r0, [r7, #4]
 1665 069c 0B46     		mov	r3, r1
 1666 069e FB70     		strb	r3, [r7, #3]
1468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32LCRH;
1469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait until the FIFO is empty and the UART is not busy.
1477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while((HWREG(ui32Base + UART_O_FR) & (UART_FR_TXFE | UART_FR_BUSY)) !=
 1667              		.loc 1 1478 0
 1668 06a0 00BF     		nop
 1669              	.L67:
 1670              		.loc 1 1478 0 is_stmt 0 discriminator 1
 1671 06a2 7B68     		ldr	r3, [r7, #4]
 1672 06a4 1833     		adds	r3, r3, #24
 1673 06a6 1B68     		ldr	r3, [r3]
 1674 06a8 03F08803 		and	r3, r3, #136
 1675 06ac 802B     		cmp	r3, #128
 1676 06ae F8D1     		bne	.L67
1479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****             UART_FR_TXFE)
1480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
1481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
1482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Force the address/data bit to 1 to indicate this is an address byte.
1486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32LCRH = HWREG(ui32Base + UART_O_LCRH);
 1677              		.loc 1 1487 0 is_stmt 1
 1678 06b0 7B68     		ldr	r3, [r7, #4]
 1679 06b2 2C33     		adds	r3, r3, #44
 1680 06b4 1B68     		ldr	r3, [r3]
 1681 06b6 FB60     		str	r3, [r7, #12]
1488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ((ui32LCRH & ~UART_LCRH_EPS) | UART_LCRH_SPS |
 1682              		.loc 1 1488 0
 1683 06b8 7B68     		ldr	r3, [r7, #4]
 1684 06ba 2C33     		adds	r3, r3, #44
 1685 06bc FA68     		ldr	r2, [r7, #12]
 1686 06be 22F08602 		bic	r2, r2, #134
 1687 06c2 42F08202 		orr	r2, r2, #130
 1688 06c6 1A60     		str	r2, [r3]
1489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                      UART_LCRH_PEN);
1490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Send the address.
1493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DR) = ui8Addr;
 1689              		.loc 1 1494 0
 1690 06c8 7B68     		ldr	r3, [r7, #4]
 1691 06ca FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1692 06cc 1A60     		str	r2, [r3]
1495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait until the address has been sent.
1498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while((HWREG(ui32Base + UART_O_FR) & (UART_FR_TXFE | UART_FR_BUSY)) !=
 1693              		.loc 1 1499 0
 1694 06ce 00BF     		nop
 1695              	.L68:
 1696              		.loc 1 1499 0 is_stmt 0 discriminator 1
 1697 06d0 7B68     		ldr	r3, [r7, #4]
 1698 06d2 1833     		adds	r3, r3, #24
 1699 06d4 1B68     		ldr	r3, [r3]
 1700 06d6 03F08803 		and	r3, r3, #136
 1701 06da 802B     		cmp	r3, #128
 1702 06dc F8D1     		bne	.L68
1500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****             UART_FR_TXFE)
1501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
1502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
1503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Restore the address/data setting.
1506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ui32LCRH;
 1703              		.loc 1 1507 0 is_stmt 1
 1704 06de 7B68     		ldr	r3, [r7, #4]
 1705 06e0 2C33     		adds	r3, r3, #44
 1706 06e2 FA68     		ldr	r2, [r7, #12]
 1707 06e4 1A60     		str	r2, [r3]
1508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1708              		.loc 1 1508 0
 1709 06e6 1437     		adds	r7, r7, #20
 1710 06e8 BD46     		mov	sp, r7
 1711              		@ sp needed
 1712 06ea 5DF8047B 		ldr	r7, [sp], #4
 1713 06ee 7047     		bx	lr
 1714              		.cfi_endproc
 1715              	.LFE37:
 1717              	.Letext0:
 1718              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1719              		.file 3 "/usr/include/newlib/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uarthal.c
     /tmp/ccF9EE8z.s:18     .text:0000000000000000 $t
     /tmp/ccF9EE8z.s:23     .text:0000000000000000 UARTParityModeSet
     /tmp/ccF9EE8z.s:66     .text:0000000000000028 UARTParityModeGet
     /tmp/ccF9EE8z.s:101    .text:0000000000000048 UARTFIFOLevelSet
     /tmp/ccF9EE8z.s:139    .text:000000000000006c UARTFIFOLevelGet
     /tmp/ccF9EE8z.s:185    .text:00000000000000a0 UARTConfigSetExpClk
     /tmp/ccF9EE8z.s:398    .text:00000000000001c0 UARTDisable
     /tmp/ccF9EE8z.s:278    .text:0000000000000124 UARTConfigGetExpClk
     /tmp/ccF9EE8z.s:351    .text:0000000000000188 UARTEnable
     /tmp/ccF9EE8z.s:455    .text:0000000000000208 UARTFIFOEnable
     /tmp/ccF9EE8z.s:492    .text:000000000000022c UARTFIFODisable
     /tmp/ccF9EE8z.s:529    .text:0000000000000250 UARTEnableSIR
     /tmp/ccF9EE8z.s:583    .text:0000000000000290 UARTDisableSIR
     /tmp/ccF9EE8z.s:620    .text:00000000000002b4 UARTTxIntModeSet
     /tmp/ccF9EE8z.s:662    .text:00000000000002dc UARTTxIntModeGet
     /tmp/ccF9EE8z.s:697    .text:00000000000002fc UARTCharsAvail
     /tmp/ccF9EE8z.s:737    .text:0000000000000324 UARTSpaceAvail
     /tmp/ccF9EE8z.s:777    .text:000000000000034c UARTCharGetNonBlocking
     /tmp/ccF9EE8z.s:822    .text:0000000000000378 UARTCharGet
     /tmp/ccF9EE8z.s:865    .text:00000000000003a0 UARTCharPutNonBlocking
     /tmp/ccF9EE8z.s:915    .text:00000000000003d4 UARTCharPut
     /tmp/ccF9EE8z.s:960    .text:0000000000000400 UARTBreakCtl
     /tmp/ccF9EE8z.s:1015   .text:000000000000043c UARTBusy
     /tmp/ccF9EE8z.s:1055   .text:0000000000000464 UARTIntRegister
     /tmp/ccF9EE8z.s:1106   .text:0000000000000498 UARTIntUnregister
     /tmp/ccF9EE8z.s:1155   .text:00000000000004c8 UARTIntEnable
     /tmp/ccF9EE8z.s:1194   .text:00000000000004ec UARTIntDisable
     /tmp/ccF9EE8z.s:1234   .text:0000000000000514 UARTIntStatus
     /tmp/ccF9EE8z.s:1281   .text:0000000000000540 UARTIntClear
     /tmp/ccF9EE8z.s:1316   .text:000000000000055c UARTDMAEnable
     /tmp/ccF9EE8z.s:1355   .text:0000000000000580 UARTDMADisable
     /tmp/ccF9EE8z.s:1395   .text:00000000000005a8 UARTRxErrorGet
     /tmp/ccF9EE8z.s:1430   .text:00000000000005c8 UARTRxErrorClear
     /tmp/ccF9EE8z.s:1464   .text:00000000000005e4 UARTClockSourceSet
     /tmp/ccF9EE8z.s:1499   .text:0000000000000604 UARTClockSourceGet
     /tmp/ccF9EE8z.s:1533   .text:0000000000000620 UART9BitEnable
     /tmp/ccF9EE8z.s:1570   .text:0000000000000644 UART9BitDisable
     /tmp/ccF9EE8z.s:1607   .text:0000000000000668 UART9BitAddrSet
     /tmp/ccF9EE8z.s:1650   .text:0000000000000694 UART9BitAddrSend
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.08074afb2ccc9da754fae8e3ee0f577b
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:0000000000000000 wm4.hw_uart.h.39.98a53ad3c72429c06a23b03415b2e5a7
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.uarthal.h.41.25db9539abdf5c44b7896bf33c1e7f12

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
